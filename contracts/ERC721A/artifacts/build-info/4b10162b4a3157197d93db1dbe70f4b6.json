{
	"id": "4b10162b4a3157197d93db1dbe70f4b6",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.15",
	"solcLongVersion": "0.8.15+commit.e14f2714",
	"input": {
		"language": "Solidity",
		"sources": {
			"ERC721A/MintNagaKids.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./INagaKid.sol\";\r\n\r\ncontract MintNagaKids is Ownable, ReentrancyGuard {\r\n\r\n    bytes32 public constant WHITELIST_MINT_ROUND = keccak256(\"WHITELIST_MINT_ROUND\"); // 0x68e7d51fdb912cb107dda2e59b053d87fcca666dd0ef5339cd3474ccb5276bba\r\n    bytes32 public constant NAGA_HOLDER_MINT_ROUND = keccak256(\"NAGA_HOLDER_MINT_ROUND\"); // 0xb3c595e55271590809f54e2f4fc3a582754f45b104dd3c41666e2ad310493db3\r\n    bytes32 public constant SPECIAL_MINT_ROUND = keccak256(\"SPECIAL_MINT_ROUND\"); // 0x5c8c0ce107274ad0569bd760c3d2406c1ed72c697935f3f965bd096c5cdedee4\r\n    bytes32 public constant DEFAULT = 0x0000000000000000000000000000000000000000000000000000000000000000;\r\n    \r\n    bytes32 public constant WITHDRAW_ROLE = keccak256(\"WITHDRAW_ROLE\");\r\n\r\n    INagaKid public nagaKidContract;\r\n    bytes32 public currentMintRound;\r\n    bytes32 public merkleRoot;\r\n\r\n    mapping(address => mapping(bytes32 => bool)) internal _isUserMinted;\r\n    mapping(address => mapping(bytes32 => uint256)) internal _userMintedAmount;\r\n\r\n    // Events\r\n    event Minted(address indexed user, uint256 amount, uint256 timestamp);\r\n    event NagaKidContractChanged(address nagaKidBefore, address nagaKidAfter);\r\n    event MerkleRootChanged(bytes32 merkleRootBefore, bytes32 merkleRootAfter);\r\n    event RoundChanged(bytes32 roundBefore, bytes32 roundAfter);\r\n    event Withdraw(address to, uint256 balanceOFContract , uint256 timestamp);\r\n    event WithdrawCurrency(address to,address currency,uint256 balanceOfContract,uint256 timestamp);\r\n    event WithdrawNFT(address to,address NFT,uint256 tokenId, uint256 timestamp);\r\n\r\n    constructor(INagaKid _nagaKidContract, bytes32 _merkleRoot) {\r\n        \r\n        setNagaKidContract(_nagaKidContract);\r\n        setMerkleRoot(_merkleRoot);\r\n\r\n    }\r\n\r\n    function setNagaKidContract(INagaKid _nagaKid) public onlyOwner {\r\n        address nagaKidBefore = address(nagaKidContract);\r\n        nagaKidContract = _nagaKid;\r\n        address nagaKidAfter = address(_nagaKid);\r\n\r\n        emit NagaKidContractChanged(nagaKidBefore, nagaKidAfter);\r\n    }\r\n\r\n    function setRound(bytes32 _round) public onlyOwner {\r\n        bytes32 _roundBefore = currentMintRound;\r\n        currentMintRound = _round;\r\n\r\n        emit RoundChanged(_roundBefore, _round);\r\n    }\r\n\r\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\r\n        bytes32 _merkleRootBefore = merkleRoot;\r\n        merkleRoot = _merkleRoot;\r\n\r\n        emit MerkleRootChanged(_merkleRootBefore, _merkleRoot);\r\n    }\r\n\r\n    function allowlistMint(bytes32[] calldata _proof, uint256 _amount, bytes32 _round) public payable nonReentrant {\r\n        require(_round != DEFAULT,\"Mint is not approved.\");\r\n        require(currentMintRound == _round, \"Contract are not in this minting round.\");\r\n        require(getTotalSupply() + _amount < getMaxSupply(), \"Over supply\");\r\n        require(isUserMinted(msg.sender,_round) == false, \"You are already minted.\");\r\n        require(nagaKidContract.isMinter(address(this)), \"Contract Mint is not approved.\");\r\n        require(MerkleProof.verify(_proof, merkleRoot, keccak256(abi.encodePacked(msg.sender, _amount, _round))), \"Unauthorized WhitelistMint This User.\");\r\n\r\n        _isUserMinted[msg.sender][_round] = true;\r\n        _userMintedAmount[msg.sender][_round] += _amount;\r\n\r\n        nagaKidContract.safeMint(msg.sender,_amount);\r\n\r\n        emit Minted(msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    function withdraw(address _to) public onlyOwner {\r\n        uint balanceOFContract = address(this).balance;\r\n        require(balanceOFContract > 0, \"Insufficient Balance\");\r\n        (bool status,) = _to.call{value: balanceOFContract }(\"\");\r\n        require(status);\r\n\r\n        emit Withdraw(_to, balanceOFContract ,block.timestamp);\r\n    }\r\n\r\n    function withdrawCurrency(address _to,address _currency) public onlyOwner {\r\n        uint balanceOfContract = IERC20(_currency).balanceOf(address(this));\r\n        require(balanceOfContract > 0, \"Insufficient Balance\");\r\n        IERC20(_currency).transfer(_to, balanceOfContract);\r\n        \r\n        emit WithdrawCurrency(_to,_currency,balanceOfContract,block.timestamp);\r\n    }\r\n\r\n    function withdrawNFT(address _to,address _NFT,uint256 _tokenId) public onlyOwner {\r\n        require(IERC721(_NFT).ownerOf(_tokenId) == address(this), \"This tokenId is not owned by contract\");\r\n\r\n        IERC721(_NFT).safeTransferFrom(address(this), _to, _tokenId);\r\n        \r\n        emit WithdrawNFT(_to,_NFT,_tokenId,block.timestamp);\r\n    }\r\n\r\n    function isUserMinted(address _user,bytes32 _round) public view returns(bool) {\r\n        return _isUserMinted[_user][_round];\r\n    }\r\n\r\n    function userMintedAmount(address _user,bytes32 _round) public view returns(uint256) {\r\n        return _userMintedAmount[_user][_round];\r\n    }\r\n\r\n    function getTotalSupply() public view returns (uint256) {\r\n        return nagaKidContract.totalSupply();\r\n    }\r\n\r\n    function getMaxSupply() public view returns (uint256) {\r\n        return nagaKidContract.maxSupply();\r\n    }\r\n\r\n}\r\n"
			},
			"ERC721A/INagaKid.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\nimport \"erc721a/contracts/IERC721A.sol\";\r\nimport \"erc721a/contracts/extensions/IERC721ABurnable.sol\";\r\nimport \"erc721a/contracts/extensions/IERC721AQueryable.sol\";\r\n\r\n\r\ninterface INagaKid is IERC721A,IERC721AQueryable {\r\n\r\n    function maxSupply() external view returns (uint256);\r\n    function isMinter(address minter) external view returns(bool);\r\n    function safeMint(address to,uint amount) external;\r\n    \r\n}\r\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"erc721a/contracts/extensions/IERC721AQueryable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.1.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '../IERC721A.sol';\n\n/**\n * @dev Interface of an ERC721AQueryable compliant contract.\n */\ninterface IERC721AQueryable is IERC721A {\n    /**\n     * Invalid query range (`start` >= `stop`).\n     */\n    error InvalidQueryRange();\n\n    /**\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n     *\n     * If the `tokenId` is out of bounds:\n     *   - `addr` = `address(0)`\n     *   - `startTimestamp` = `0`\n     *   - `burned` = `false`\n     *\n     * If the `tokenId` is burned:\n     *   - `addr` = `<Address of owner before token was burned>`\n     *   - `startTimestamp` = `<Timestamp when token was burned>`\n     *   - `burned = `true`\n     *\n     * Otherwise:\n     *   - `addr` = `<Address of owner>`\n     *   - `startTimestamp` = `<Timestamp of start of ownership>`\n     *   - `burned = `false`\n     */\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\n\n    /**\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n     * See {ERC721AQueryable-explicitOwnershipOf}\n     */\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`,\n     * in the range [`start`, `stop`)\n     * (i.e. `start <= tokenId < stop`).\n     *\n     * This function allows for tokens to be queried if the collection\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n     *\n     * Requirements:\n     *\n     * - `start` < `stop`\n     */\n    function tokensOfOwnerIn(\n        address owner,\n        uint256 start,\n        uint256 stop\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`.\n     *\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\n     * It is meant to be called off-chain.\n     *\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n     * multiple smaller scans if the collection is large enough to cause\n     * an out-of-gas error (10K pfp collections should be fine).\n     */\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\n}\n"
			},
			"erc721a/contracts/extensions/IERC721ABurnable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.1.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '../IERC721A.sol';\n\n/**\n * @dev Interface of an ERC721ABurnable compliant contract.\n */\ninterface IERC721ABurnable is IERC721A {\n    /**\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) external;\n}\n"
			},
			"erc721a/contracts/IERC721A.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.1.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of an ERC721A compliant contract.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\n        uint24 extraData;\n    }\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     *\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // ==============================\n    //            IERC165\n    // ==============================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // ==============================\n    //            IERC721\n    // ==============================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // ==============================\n    //        IERC721Metadata\n    // ==============================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // ==============================\n    //            IERC2309\n    // ==============================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\n     * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"MerkleProof": {
					"abi": [],
					"devdoc": {
						"details": "These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":800:2577  library MerkleProof {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":800:2577  library MerkleProof {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e53668fa5fa11d3d3dd2408463979970c27be388d0f7df26a4a92e9b7b8c470464736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e53668fa5fa11d3d3dd2408463979970c27be388d0f7df26a4a92e9b7b8c470464736f6c634300080f0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 CALLDATASIZE PUSH9 0xFA5FA11D3D3DD24084 PUSH4 0x979970C2 PUSH28 0xE388D0F7DF26A4A92E9B7B8C470464736F6C634300080F0033000000 ",
							"sourceMap": "800:1777:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;800:1777:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e53668fa5fa11d3d3dd2408463979970c27be388d0f7df26a4a92e9b7b8c470464736f6c634300080f0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 CALLDATASIZE PUSH9 0xFA5FA11D3D3DD24084 PUSH4 0x979970C2 PUSH28 0xE388D0F7DF26A4A92E9B7B8C470464736F6C634300080F0033000000 ",
							"sourceMap": "800:1777:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_efficientHash(bytes32,bytes32)": "infinite",
								"processProof(bytes32[] memory,bytes32)": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e53668fa5fa11d3d3dd2408463979970c27be388d0f7df26a4a92e9b7b8c470464736f6c634300080f0033",
									".code": [
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"ERC721A/INagaKid.sol",
								"ERC721A/MintNagaKids.sol",
								"erc721a/contracts/IERC721A.sol",
								"erc721a/contracts/extensions/IERC721ABurnable.sol",
								"erc721a/contracts/extensions/IERC721AQueryable.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1aa68fa19422863cc91d23b5896917dbe79175ed47b591148aaeb3e98cb49752\",\"dweb:/ipfs/QmeY64vTRbGhdXcytRKusfJsAfNF4aqr9e1SGBGdCYvW2j\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC721A/INagaKid.sol": {
				"INagaKid": {
					"abi": [
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidQueryRange",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintERC2309QuantityExceedsLimit",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintZeroQuantity",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnershipNotInitializedForExtraData",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "URIQueryForNonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "fromTokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "toTokenId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "ConsecutiveTransfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "explicitOwnershipOf",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "addr",
											"type": "address"
										},
										{
											"internalType": "uint64",
											"name": "startTimestamp",
											"type": "uint64"
										},
										{
											"internalType": "bool",
											"name": "burned",
											"type": "bool"
										},
										{
											"internalType": "uint24",
											"name": "extraData",
											"type": "uint24"
										}
									],
									"internalType": "struct IERC721A.TokenOwnership",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "tokenIds",
									"type": "uint256[]"
								}
							],
							"name": "explicitOwnershipsOf",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "addr",
											"type": "address"
										},
										{
											"internalType": "uint64",
											"name": "startTimestamp",
											"type": "uint64"
										},
										{
											"internalType": "bool",
											"name": "burned",
											"type": "bool"
										},
										{
											"internalType": "uint24",
											"name": "extraData",
											"type": "uint24"
										}
									],
									"internalType": "struct IERC721A.TokenOwnership[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "minter",
									"type": "address"
								}
							],
							"name": "isMinter",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "safeMint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "tokensOfOwner",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "start",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stop",
									"type": "uint256"
								}
							],
							"name": "tokensOfOwnerIn",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"explicitOwnershipOf(uint256)": {
								"details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds:   - `addr` = `address(0)`   - `startTimestamp` = `0`   - `burned` = `false` If the `tokenId` is burned:   - `addr` = `<Address of owner before token was burned>`   - `startTimestamp` = `<Timestamp when token was burned>`   - `burned = `true` Otherwise:   - `addr` = `<Address of owner>`   - `startTimestamp` = `<Timestamp of start of ownership>`   - `burned = `false`"
							},
							"explicitOwnershipsOf(uint256[])": {
								"details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"tokensOfOwner(address)": {
								"details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(totalSupply) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K pfp collections should be fine)."
							},
							"tokensOfOwnerIn(address,uint256,uint256)": {
								"details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start` < `stop`"
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract. Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"explicitOwnershipOf(uint256)": "c23dc68f",
							"explicitOwnershipsOf(uint256[])": "5bbb2177",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"isMinter(address)": "aa271e1a",
							"maxSupply()": "d5abeb01",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeMint(address,uint256)": "a1448194",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"tokensOfOwner(address)": "8462151c",
							"tokensOfOwnerIn(address,uint256,uint256)": "99a2557a",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds:   - `addr` = `address(0)`   - `startTimestamp` = `0`   - `burned` = `false` If the `tokenId` is burned:   - `addr` = `<Address of owner before token was burned>`   - `startTimestamp` = `<Timestamp when token was burned>`   - `burned = `true` Otherwise:   - `addr` = `<Address of owner>`   - `startTimestamp` = `<Timestamp of start of ownership>`   - `burned = `false`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(totalSupply) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K pfp collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start` < `stop`\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract. Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC721A/INagaKid.sol\":\"INagaKid\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC721A/INagaKid.sol\":{\"keccak256\":\"0x6d40b0cc478b970043e5567d209eda8b52325f1d271022e638f43e4aefb4e595\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c6f40836e74cc2739a624d11dd24565c4b63fcbe5a06481566e73c1512dfe63\",\"dweb:/ipfs/QmbJKRZNVHk55PV6fEjbE5kgNGLaTJzu8eAvwk2derkhnq\"]},\"erc721a/contracts/IERC721A.sol\":{\"keccak256\":\"0x14469c33c8a3ba9a3627c02ec94dcd9f7f3d6d540f89ea37a358f625058eb309\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a86910ef1502c5c09f71c311d3a9f6d9004b01a3e585628de5240b4096e0d10\",\"dweb:/ipfs/QmQZNkC3oApQvLXgTHnJyQv1LjHokriTSDDupRyTijD1xY\"]},\"erc721a/contracts/extensions/IERC721ABurnable.sol\":{\"keccak256\":\"0xf190b7fd1dfc51d8d259d5dca23f4fa1734f7b090db4a39504ac98f13a5ba4a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f52952c16f9fb4d44fb1758010a805cf340e9d1d59a798c4ec0e41120092f71a\",\"dweb:/ipfs/Qmemym1BpEu1RP8X6GMasiCHuvcx4TgvS4zs8WMf6SeJPQ\"]},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"keccak256\":\"0x55e6863d273b676d65797fee7aac1b520848a0e31c0dd2e5a29887457043b7a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4a8477b7c9788e36787f79ef9b1580c46bdadc13da4c8ef85ce82d42a754743\",\"dweb:/ipfs/QmQvqKtF8YyJKqpEiNh1KkeC1Q5JmvEkQmP2ZCPYSW72BS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"ApprovalCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"ApprovalQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"ApproveToCaller()": [
								{
									"notice": "The caller cannot approve to their own address."
								}
							],
							"BalanceQueryForZeroAddress()": [
								{
									"notice": "Cannot query the balance for the zero address."
								}
							],
							"InvalidQueryRange()": [
								{
									"notice": "Invalid query range (`start` >= `stop`)."
								}
							],
							"MintERC2309QuantityExceedsLimit()": [
								{
									"notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
								}
							],
							"MintToZeroAddress()": [
								{
									"notice": "Cannot mint to the zero address."
								}
							],
							"MintZeroQuantity()": [
								{
									"notice": "The quantity of tokens minted must be more than zero."
								}
							],
							"OwnerQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"OwnershipNotInitializedForExtraData()": [
								{
									"notice": "The `extraData` cannot be set on an unintialized ownership slot."
								}
							],
							"TransferCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"TransferFromIncorrectOwner()": [
								{
									"notice": "The token must be owned by `from`."
								}
							],
							"TransferToNonERC721ReceiverImplementer()": [
								{
									"notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
								}
							],
							"TransferToZeroAddress()": [
								{
									"notice": "Cannot transfer to the zero address."
								}
							],
							"URIQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							]
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC721A/MintNagaKids.sol": {
				"MintNagaKids": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract INagaKid",
									"name": "_nagaKidContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "_merkleRoot",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "merkleRootBefore",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "merkleRootAfter",
									"type": "bytes32"
								}
							],
							"name": "MerkleRootChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "Minted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "nagaKidBefore",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "nagaKidAfter",
									"type": "address"
								}
							],
							"name": "NagaKidContractChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "roundBefore",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "roundAfter",
									"type": "bytes32"
								}
							],
							"name": "RoundChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "balanceOFContract",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "currency",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "balanceOfContract",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "WithdrawCurrency",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "NFT",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "WithdrawNFT",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "NAGA_HOLDER_MINT_ROUND",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "SPECIAL_MINT_ROUND",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WHITELIST_MINT_ROUND",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WITHDRAW_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32[]",
									"name": "_proof",
									"type": "bytes32[]"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "_round",
									"type": "bytes32"
								}
							],
							"name": "allowlistMint",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "currentMintRound",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getMaxSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTotalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "_round",
									"type": "bytes32"
								}
							],
							"name": "isUserMinted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "merkleRoot",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nagaKidContract",
							"outputs": [
								{
									"internalType": "contract INagaKid",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_merkleRoot",
									"type": "bytes32"
								}
							],
							"name": "setMerkleRoot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract INagaKid",
									"name": "_nagaKid",
									"type": "address"
								}
							],
							"name": "setNagaKidContract",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_round",
									"type": "bytes32"
								}
							],
							"name": "setRound",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "_round",
									"type": "bytes32"
								}
							],
							"name": "userMintedAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_currency",
									"type": "address"
								}
							],
							"name": "withdrawCurrency",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_NFT",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								}
							],
							"name": "withdrawNFT",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"ERC721A/MintNagaKids.sol\":395:5393  contract MintNagaKids is Ownable, ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n    /* \"ERC721A/MintNagaKids.sol\":1965:2129  constructor(INagaKid _nagaKidContract, bytes32 _merkleRoot) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  tag_8\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:939  _transferOwnership */\n  tag_11\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_8:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  dup1\n  sstore\n    /* \"ERC721A/MintNagaKids.sol\":2046:2082  setNagaKidContract(_nagaKidContract) */\n  tag_14\n    /* \"ERC721A/MintNagaKids.sol\":2065:2081  _nagaKidContract */\n  dup3\n    /* \"ERC721A/MintNagaKids.sol\":2046:2064  setNagaKidContract */\n  tag_15\n    /* \"ERC721A/MintNagaKids.sol\":2046:2082  setNagaKidContract(_nagaKidContract) */\n  jump\t// in\ntag_14:\n    /* \"ERC721A/MintNagaKids.sol\":2093:2119  setMerkleRoot(_merkleRoot) */\n  tag_16\n    /* \"ERC721A/MintNagaKids.sol\":2107:2118  _merkleRoot */\n  dup2\n    /* \"ERC721A/MintNagaKids.sol\":2093:2106  setMerkleRoot */\n  tag_17\n    /* \"ERC721A/MintNagaKids.sol\":2093:2119  setMerkleRoot(_merkleRoot) */\n  jump\t// in\ntag_16:\n    /* \"ERC721A/MintNagaKids.sol\":1965:2129  constructor(INagaKid _nagaKidContract, bytes32 _merkleRoot) {... */\n  pop\n  pop\n    /* \"ERC721A/MintNagaKids.sol\":395:5393  contract MintNagaKids is Ownable, ReentrancyGuard {... */\n  jump(tag_40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\ntag_11:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"ERC721A/MintNagaKids.sol\":2137:2425  function setNagaKidContract(INagaKid _nagaKid) public onlyOwner {... */\ntag_15:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  and\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n  eq\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n  tag_25\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":588:590   */\n  0x20\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":570:591   */\n  dup2\n  swap1\n  mstore\n    /* \"#utility.yul\":607:625   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":600:630   */\n  mstore\n  0x00\n  dup1\n  mload\n  0x20\n  data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n  dup4\n  codecopy\n  dup2\n  mload\n  swap2\n  mstore\n    /* \"#utility.yul\":646:664   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":639:701   */\n  mstore\n    /* \"#utility.yul\":718:736   */\n  0x64\n  add\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\ntag_26:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_25:\n    /* \"ERC721A/MintNagaKids.sol\":2244:2259  nagaKidContract */\n  0x02\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"ERC721A/MintNagaKids.sol\":2271:2297  nagaKidContract = _nagaKid */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"ERC721A/MintNagaKids.sol\":2366:2417  NagaKidContractChanged(nagaKidBefore, nagaKidAfter) */\n  0x40\n  dup1\n  mload\n    /* \"ERC721A/MintNagaKids.sol\":2244:2259  nagaKidContract */\n  swap2\n  swap1\n  swap3\n  and\n    /* \"#utility.yul\":959:993   */\n  dup1\n  dup3\n  mstore\n    /* \"#utility.yul\":1024:1026   */\n  0x20\n    /* \"#utility.yul\":1009:1027   */\n  dup3\n  add\n    /* \"#utility.yul\":1002:1045   */\n  swap4\n  swap1\n  swap4\n  mstore\n    /* \"ERC721A/MintNagaKids.sol\":2271:2297  nagaKidContract = _nagaKid */\n  dup4\n  swap2\n    /* \"ERC721A/MintNagaKids.sol\":2366:2417  NagaKidContractChanged(nagaKidBefore, nagaKidAfter) */\n  0xabdf056c85a221fcb31d0366c4475b6b2c613df2eeea951a9fcb3e1a8595d973\n  swap2\n    /* \"#utility.yul\":894:912   */\n  add\n    /* \"ERC721A/MintNagaKids.sol\":2366:2417  NagaKidContractChanged(nagaKidBefore, nagaKidAfter) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log1\n    /* \"ERC721A/MintNagaKids.sol\":2201:2425  {... */\n  pop\n  pop\n    /* \"ERC721A/MintNagaKids.sol\":2137:2425  function setNagaKidContract(INagaKid _nagaKid) public onlyOwner {... */\n  pop\n  jump\t// out\n    /* \"ERC721A/MintNagaKids.sol\":2638:2858  function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {... */\ntag_17:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  and\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n  eq\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n  tag_34\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":588:590   */\n  0x20\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":570:591   */\n  dup2\n  swap1\n  mstore\n    /* \"#utility.yul\":607:625   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":600:630   */\n  mstore\n  0x00\n  dup1\n  mload\n  0x20\n  data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n  dup4\n  codecopy\n  dup2\n  mload\n  swap2\n  mstore\n    /* \"#utility.yul\":646:664   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":639:701   */\n  mstore\n    /* \"#utility.yul\":718:736   */\n  0x64\n  add\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n  tag_26\n    /* \"#utility.yul\":386:742   */\n  jump\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\ntag_34:\n    /* \"ERC721A/MintNagaKids.sol\":2738:2748  merkleRoot */\n  0x04\n  dup1\n  sload\n    /* \"ERC721A/MintNagaKids.sol\":2759:2783  merkleRoot = _merkleRoot */\n  swap1\n  dup3\n  swap1\n  sstore\n    /* \"ERC721A/MintNagaKids.sol\":2801:2850  MerkleRootChanged(_merkleRootBefore, _merkleRoot) */\n  0x40\n  dup1\n  mload\n    /* \"#utility.yul\":1230:1255   */\n  dup3\n  dup2\n  mstore\n    /* \"#utility.yul\":1286:1288   */\n  0x20\n    /* \"#utility.yul\":1271:1289   */\n  dup2\n  add\n    /* \"#utility.yul\":1264:1298   */\n  dup5\n  swap1\n  mstore\n    /* \"ERC721A/MintNagaKids.sol\":2801:2850  MerkleRootChanged(_merkleRootBefore, _merkleRoot) */\n  0x123d88ba82600dfc3f219f8885c691b0ff020caa535666874b3f5174973757fe\n  swap2\n    /* \"#utility.yul\":1203:1221   */\n  add\n    /* \"ERC721A/MintNagaKids.sol\":2801:2850  MerkleRootChanged(_merkleRootBefore, _merkleRoot) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log1\n    /* \"ERC721A/MintNagaKids.sol\":2699:2858  {... */\n  pop\n    /* \"ERC721A/MintNagaKids.sol\":2638:2858  function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:381   */\ntag_3:\n    /* \"#utility.yul\":109:115   */\n  0x00\n    /* \"#utility.yul\":117:123   */\n  dup1\n    /* \"#utility.yul\":170:172   */\n  0x40\n    /* \"#utility.yul\":158:167   */\n  dup4\n    /* \"#utility.yul\":149:156   */\n  dup6\n    /* \"#utility.yul\":145:168   */\n  sub\n    /* \"#utility.yul\":141:173   */\n  slt\n    /* \"#utility.yul\":138:190   */\n  iszero\n  tag_42\n  jumpi\n    /* \"#utility.yul\":186:187   */\n  0x00\n    /* \"#utility.yul\":183:184   */\n  dup1\n    /* \"#utility.yul\":176:188   */\n  revert\n    /* \"#utility.yul\":138:190   */\ntag_42:\n    /* \"#utility.yul\":212:228   */\n  dup3\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":257:288   */\n  dup2\n  and\n    /* \"#utility.yul\":247:289   */\n  dup2\n  eq\n    /* \"#utility.yul\":237:307   */\n  tag_43\n  jumpi\n    /* \"#utility.yul\":303:304   */\n  0x00\n    /* \"#utility.yul\":300:301   */\n  dup1\n    /* \"#utility.yul\":293:305   */\n  revert\n    /* \"#utility.yul\":237:307   */\ntag_43:\n    /* \"#utility.yul\":371:373   */\n  0x20\n    /* \"#utility.yul\":356:374   */\n  swap4\n  swap1\n  swap4\n  add\n    /* \"#utility.yul\":350:375   */\n  mload\n    /* \"#utility.yul\":326:331   */\n  swap3\n  swap5\n    /* \"#utility.yul\":350:375   */\n  swap3\n  swap4\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":14:381   */\n  jump\t// out\n    /* \"#utility.yul\":1056:1304   */\ntag_40:\n    /* \"ERC721A/MintNagaKids.sol\":395:5393  contract MintNagaKids is Ownable, ReentrancyGuard {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\ndata_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe 4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n\nsub_0: assembly {\n        /* \"ERC721A/MintNagaKids.sol\":395:5393  contract MintNagaKids is Ownable, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xb5abafa1\n      gt\n      tag_24\n      jumpi\n      dup1\n      0xef5fe79f\n      gt\n      tag_25\n      jumpi\n      dup1\n      0xef5fe79f\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xf500cdfc\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xf6b48e55\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xff05fe4a\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xffdc6129\n      eq\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      dup1\n      0xb5abafa1\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xbff863ec\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xc4e41b22\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xdf4e5881\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xe02023a1\n      eq\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_24:\n      dup1\n      0x5b94bbc3\n      gt\n      tag_26\n      jumpi\n      dup1\n      0x5b94bbc3\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x7cb64759\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8407ecc4\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x9e6c8855\n      eq\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      dup1\n      0x0a25dea9\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x24c37a85\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2eb4a7ab\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x4c0f38c2\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x51cff8d9\n      eq\n      tag_6\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"ERC721A/MintNagaKids.sol\":925:1025  bytes32 public constant DEFAULT = 0x0000000000000000000000000000000000000000000000000000000000000000 */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      pop\n      tag_28\n        /* \"ERC721A/MintNagaKids.sol\":959:1025  0x0000000000000000000000000000000000000000000000000000000000000000 */\n      0x00\n        /* \"ERC721A/MintNagaKids.sol\":925:1025  bytes32 public constant DEFAULT = 0x0000000000000000000000000000000000000000000000000000000000000000 */\n      dup2\n      jump\n    tag_28:\n      mload(0x40)\n        /* \"#utility.yul\":160:185   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"ERC721A/MintNagaKids.sol\":925:1025  bytes32 public constant DEFAULT = 0x0000000000000000000000000000000000000000000000000000000000000000 */\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC721A/MintNagaKids.sol\":611:695  bytes32 public constant NAGA_HOLDER_MINT_ROUND = keccak256(\"NAGA_HOLDER_MINT_ROUND\") */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      pop\n      tag_28\n        /* \"ERC721A/MintNagaKids.sol\":660:695  keccak256(\"NAGA_HOLDER_MINT_ROUND\") */\n      0xb3c595e55271590809f54e2f4fc3a582754f45b104dd3c41666e2ad310493db3\n        /* \"ERC721A/MintNagaKids.sol\":611:695  bytes32 public constant NAGA_HOLDER_MINT_ROUND = keccak256(\"NAGA_HOLDER_MINT_ROUND\") */\n      dup2\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":1189:1214  bytes32 public merkleRoot */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      pop\n      tag_28\n      sload(0x04)\n      dup2\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":5281:5388  function getMaxSupply() public view returns (uint256) {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_40\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_40:\n      pop\n      tag_28\n      tag_42\n      jump\t// in\n        /* \"ERC721A/MintNagaKids.sol\":3789:4127  function withdraw(address _to) public onlyOwner {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_45\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      pop\n      tag_46\n      tag_47\n      calldatasize\n      0x04\n      tag_48\n      jump\t// in\n    tag_47:\n      tag_49\n      jump\t// in\n    tag_46:\n      stop\n        /* \"ERC721A/MintNagaKids.sol\":772:848  bytes32 public constant SPECIAL_MINT_ROUND = keccak256(\"SPECIAL_MINT_ROUND\") */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      pop\n      tag_28\n        /* \"ERC721A/MintNagaKids.sol\":817:848  keccak256(\"SPECIAL_MINT_ROUND\") */\n      0x5c8c0ce107274ad0569bd760c3d2406c1ed72c697935f3f965bd096c5cdedee4\n        /* \"ERC721A/MintNagaKids.sol\":772:848  bytes32 public constant SPECIAL_MINT_ROUND = keccak256(\"SPECIAL_MINT_ROUND\") */\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_54\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_54:\n      pop\n      tag_46\n      tag_56\n      jump\t// in\n        /* \"ERC721A/MintNagaKids.sol\":2638:2858  function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_57\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_57:\n      pop\n      tag_46\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"ERC721A/MintNagaKids.sol\":4135:4512  function withdrawCurrency(address _to,address _currency) public onlyOwner {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_62\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_62:\n      pop\n      tag_46\n      tag_64\n      calldatasize\n      0x04\n      tag_65\n      jump\t// in\n    tag_64:\n      tag_66\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_68:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1508:1540   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1490:1541   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1478:1480   */\n      0x20\n        /* \"#utility.yul\":1463:1481   */\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n      tag_30\n        /* \"#utility.yul\":1344:1547   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":2137:2425  function setNagaKidContract(INagaKid _nagaKid) public onlyOwner {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_72\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_72:\n      pop\n      tag_46\n      tag_74\n      calldatasize\n      0x04\n      tag_48\n      jump\t// in\n    tag_74:\n      tag_76\n      jump\t// in\n        /* \"ERC721A/MintNagaKids.sol\":5011:5154  function userMintedAmount(address _user,bytes32 _round) public view returns(uint256) {... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_77\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_77:\n      pop\n      tag_28\n      tag_79\n      calldatasize\n      0x04\n      tag_80\n      jump\t// in\n    tag_79:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC721A/MintNagaKids.sol\":5114:5138  _userMintedAmount[_user] */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"ERC721A/MintNagaKids.sol\":5087:5094  uint256 */\n      0x00\n        /* \"ERC721A/MintNagaKids.sol\":5114:5138  _userMintedAmount[_user] */\n      swap1\n      dup2\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":5114:5131  _userMintedAmount */\n      0x06\n        /* \"ERC721A/MintNagaKids.sol\":5114:5138  _userMintedAmount[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"ERC721A/MintNagaKids.sol\":5114:5146  _userMintedAmount[_user][_round] */\n      swap4\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"ERC721A/MintNagaKids.sol\":5011:5154  function userMintedAmount(address _user,bytes32 _round) public view returns(uint256) {... */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":4520:4863  function withdrawNFT(address _to,address _NFT,uint256 _tokenId) public onlyOwner {... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n      pop\n      tag_46\n      tag_85\n      calldatasize\n      0x04\n      tag_86\n      jump\t// in\n    tag_85:\n      tag_87\n      jump\t// in\n        /* \"ERC721A/MintNagaKids.sol\":5162:5273  function getTotalSupply() public view returns (uint256) {... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_88\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_88:\n      pop\n      tag_28\n      tag_90\n      jump\t// in\n        /* \"ERC721A/MintNagaKids.sol\":1113:1144  INagaKid public nagaKidContract */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_92\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_92:\n      pop\n      sload(0x02)\n      tag_68\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":1038:1104  bytes32 public constant WITHDRAW_ROLE = keccak256(\"WITHDRAW_ROLE\") */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_97\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_97:\n      pop\n      tag_28\n        /* \"ERC721A/MintNagaKids.sol\":1078:1104  keccak256(\"WITHDRAW_ROLE\") */\n      0x5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec\n        /* \"ERC721A/MintNagaKids.sol\":1038:1104  bytes32 public constant WITHDRAW_ROLE = keccak256(\"WITHDRAW_ROLE\") */\n      dup2\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":1151:1182  bytes32 public currentMintRound */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_101\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_101:\n      pop\n      tag_28\n      sload(0x03)\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_105\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_105:\n      pop\n      tag_46\n      tag_107\n      calldatasize\n      0x04\n      tag_48\n      jump\t// in\n    tag_107:\n      tag_108\n      jump\t// in\n        /* \"ERC721A/MintNagaKids.sol\":454:534  bytes32 public constant WHITELIST_MINT_ROUND = keccak256(\"WHITELIST_MINT_ROUND\") */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_109\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_109:\n      pop\n      tag_28\n        /* \"ERC721A/MintNagaKids.sol\":501:534  keccak256(\"WHITELIST_MINT_ROUND\") */\n      0x68e7d51fdb912cb107dda2e59b053d87fcca666dd0ef5339cd3474ccb5276bba\n        /* \"ERC721A/MintNagaKids.sol\":454:534  bytes32 public constant WHITELIST_MINT_ROUND = keccak256(\"WHITELIST_MINT_ROUND\") */\n      dup2\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":2866:3781  function allowlistMint(bytes32[] calldata _proof, uint256 _amount, bytes32 _round) public payable nonReentrant {... */\n    tag_21:\n      tag_46\n      tag_114\n      calldatasize\n      0x04\n      tag_115\n      jump\t// in\n    tag_114:\n      tag_116\n      jump\t// in\n        /* \"ERC721A/MintNagaKids.sol\":2433:2630  function setRound(bytes32 _round) public onlyOwner {... */\n    tag_22:\n      callvalue\n      dup1\n      iszero\n      tag_117\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_117:\n      pop\n      tag_46\n      tag_119\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_119:\n      tag_120\n      jump\t// in\n        /* \"ERC721A/MintNagaKids.sol\":4871:5003  function isUserMinted(address _user,bytes32 _round) public view returns(bool) {... */\n    tag_23:\n      callvalue\n      dup1\n      iszero\n      tag_121\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_121:\n      pop\n      tag_122\n      tag_123\n      calldatasize\n      0x04\n      tag_80\n      jump\t// in\n    tag_123:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC721A/MintNagaKids.sol\":4967:4987  _isUserMinted[_user] */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"ERC721A/MintNagaKids.sol\":4943:4947  bool */\n      0x00\n        /* \"ERC721A/MintNagaKids.sol\":4967:4987  _isUserMinted[_user] */\n      swap1\n      dup2\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4967:4980  _isUserMinted */\n      0x05\n        /* \"ERC721A/MintNagaKids.sol\":4967:4987  _isUserMinted[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"ERC721A/MintNagaKids.sol\":4967:4995  _isUserMinted[_user][_round] */\n      swap4\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"ERC721A/MintNagaKids.sol\":4871:5003  function isUserMinted(address _user,bytes32 _round) public view returns(bool) {... */\n      jump\n    tag_122:\n      mload(0x40)\n        /* \"#utility.yul\":3752:3766   */\n      swap1\n      iszero\n        /* \"#utility.yul\":3745:3767   */\n      iszero\n        /* \"#utility.yul\":3727:3768   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3715:3717   */\n      0x20\n        /* \"#utility.yul\":3700:3718   */\n      add\n        /* \"ERC721A/MintNagaKids.sol\":4871:5003  function isUserMinted(address _user,bytes32 _round) public view returns(bool) {... */\n      tag_30\n        /* \"#utility.yul\":3587:3774   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":5281:5388  function getMaxSupply() public view returns (uint256) {... */\n    tag_42:\n        /* \"ERC721A/MintNagaKids.sol\":5353:5368  nagaKidContract */\n      sload(0x02)\n        /* \"ERC721A/MintNagaKids.sol\":5353:5380  nagaKidContract.maxSupply() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0xd5abeb01)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"ERC721A/MintNagaKids.sol\":5326:5333  uint256 */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC721A/MintNagaKids.sol\":5353:5368  nagaKidContract */\n      and\n      swap2\n        /* \"ERC721A/MintNagaKids.sol\":5353:5378  nagaKidContract.maxSupply */\n      0xd5abeb01\n      swap2\n        /* \"ERC721A/MintNagaKids.sol\":5353:5380  nagaKidContract.maxSupply() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"ERC721A/MintNagaKids.sol\":5353:5368  nagaKidContract */\n      dup7\n        /* \"ERC721A/MintNagaKids.sol\":5353:5380  nagaKidContract.maxSupply() */\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_129\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_129:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_130\n      swap2\n      swap1\n      tag_131\n      jump\t// in\n    tag_130:\n        /* \"ERC721A/MintNagaKids.sol\":5346:5380  return nagaKidContract.maxSupply() */\n      swap1\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":5281:5388  function getMaxSupply() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"ERC721A/MintNagaKids.sol\":3789:4127  function withdraw(address _to) public onlyOwner {... */\n    tag_49:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_136\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_137\n      swap1\n      tag_138\n      jump\t// in\n    tag_137:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_136:\n        /* \"ERC721A/MintNagaKids.sol\":3873:3894  address(this).balance */\n      selfbalance\n        /* \"ERC721A/MintNagaKids.sol\":3913:3934  balanceOFContract > 0 */\n      dup1\n        /* \"ERC721A/MintNagaKids.sol\":3905:3959  require(balanceOFContract > 0, \"Insufficient Balance\") */\n      tag_140\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4531:4533   */\n      0x20\n        /* \"ERC721A/MintNagaKids.sol\":3905:3959  require(balanceOFContract > 0, \"Insufficient Balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4513:4534   */\n      mstore\n        /* \"#utility.yul\":4570:4572   */\n      0x14\n        /* \"#utility.yul\":4550:4568   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4543:4573   */\n      mstore\n      shl(0x60, 0x496e73756666696369656e742042616c616e6365)\n        /* \"#utility.yul\":4589:4607   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4582:4632   */\n      mstore\n        /* \"#utility.yul\":4649:4667   */\n      0x64\n      add\n        /* \"ERC721A/MintNagaKids.sol\":3905:3959  require(balanceOFContract > 0, \"Insufficient Balance\") */\n      tag_137\n        /* \"#utility.yul\":4329:4673   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":3905:3959  require(balanceOFContract > 0, \"Insufficient Balance\") */\n    tag_140:\n        /* \"ERC721A/MintNagaKids.sol\":3971:3982  bool status */\n      0x00\n        /* \"ERC721A/MintNagaKids.sol\":3987:3990  _to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC721A/MintNagaKids.sol\":3987:3995  _to.call */\n      and\n        /* \"ERC721A/MintNagaKids.sol\":4003:4020  balanceOFContract */\n      dup3\n        /* \"ERC721A/MintNagaKids.sol\":3987:4026  _to.call{value: balanceOFContract }(\"\") */\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_147\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_146)\n    tag_147:\n      0x60\n      swap2\n      pop\n    tag_146:\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":3970:4026  (bool status,) = _to.call{value: balanceOFContract }(\"\") */\n      pop\n      swap1\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":4045:4051  status */\n      dup1\n        /* \"ERC721A/MintNagaKids.sol\":4037:4052  require(status) */\n      tag_148\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_148:\n        /* \"ERC721A/MintNagaKids.sol\":4070:4119  Withdraw(_to, balanceOFContract ,block.timestamp) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5108:5140   */\n      dup6\n      and\n        /* \"#utility.yul\":5090:5141   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5172:5174   */\n      0x20\n        /* \"#utility.yul\":5157:5175   */\n      dup2\n      add\n        /* \"#utility.yul\":5150:5184   */\n      dup5\n      swap1\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4103:4118  block.timestamp */\n      timestamp\n        /* \"#utility.yul\":5200:5218   */\n      swap2\n      dup2\n      add\n        /* \"#utility.yul\":5193:5227   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4070:4119  Withdraw(_to, balanceOFContract ,block.timestamp) */\n      0xf279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568\n      swap1\n        /* \"#utility.yul\":5078:5080   */\n      0x60\n        /* \"#utility.yul\":5063:5081   */\n      add\n        /* \"ERC721A/MintNagaKids.sol\":4070:4119  Withdraw(_to, balanceOFContract ,block.timestamp) */\n    tag_149:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"ERC721A/MintNagaKids.sol\":3837:4127  {... */\n      pop\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":3789:4127  function withdraw(address _to) public onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_56:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_154\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_137\n      swap1\n      tag_138\n      jump\t// in\n    tag_154:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      tag_157\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1759:1760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1750  _transferOwnership */\n      tag_158\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_157:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"ERC721A/MintNagaKids.sol\":2638:2858  function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {... */\n    tag_61:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_162\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_137\n      swap1\n      tag_138\n      jump\t// in\n    tag_162:\n        /* \"ERC721A/MintNagaKids.sol\":2738:2748  merkleRoot */\n      0x04\n      dup1\n      sload\n        /* \"ERC721A/MintNagaKids.sol\":2759:2783  merkleRoot = _merkleRoot */\n      swap1\n      dup3\n      swap1\n      sstore\n        /* \"ERC721A/MintNagaKids.sol\":2801:2850  MerkleRootChanged(_merkleRootBefore, _merkleRoot) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":5412:5437   */\n      dup3\n      dup2\n      mstore\n        /* \"#utility.yul\":5468:5470   */\n      0x20\n        /* \"#utility.yul\":5453:5471   */\n      dup2\n      add\n        /* \"#utility.yul\":5446:5480   */\n      dup5\n      swap1\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":2801:2850  MerkleRootChanged(_merkleRootBefore, _merkleRoot) */\n      0x123d88ba82600dfc3f219f8885c691b0ff020caa535666874b3f5174973757fe\n      swap2\n        /* \"#utility.yul\":5385:5403   */\n      add\n        /* \"ERC721A/MintNagaKids.sol\":2801:2850  MerkleRootChanged(_merkleRootBefore, _merkleRoot) */\n    tag_165:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"ERC721A/MintNagaKids.sol\":2699:2858  {... */\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":2638:2858  function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"ERC721A/MintNagaKids.sol\":4135:4512  function withdrawCurrency(address _to,address _currency) public onlyOwner {... */\n    tag_66:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_170\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_137\n      swap1\n      tag_138\n      jump\t// in\n    tag_170:\n        /* \"ERC721A/MintNagaKids.sol\":4245:4287  IERC20(_currency).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4281:4285  this */\n      address\n        /* \"ERC721A/MintNagaKids.sol\":4245:4287  IERC20(_currency).balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1490:1541   */\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4220:4242  uint balanceOfContract */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC721A/MintNagaKids.sol\":4245:4272  IERC20(_currency).balanceOf */\n      dup4\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":1463:1481   */\n      0x24\n      add\n        /* \"ERC721A/MintNagaKids.sol\":4245:4287  IERC20(_currency).balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_175\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_175:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_176\n      swap2\n      swap1\n      tag_131\n      jump\t// in\n    tag_176:\n        /* \"ERC721A/MintNagaKids.sol\":4220:4287  uint balanceOfContract = IERC20(_currency).balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":4326:4327  0 */\n      0x00\n        /* \"ERC721A/MintNagaKids.sol\":4306:4323  balanceOfContract */\n      dup2\n        /* \"ERC721A/MintNagaKids.sol\":4306:4327  balanceOfContract > 0 */\n      gt\n        /* \"ERC721A/MintNagaKids.sol\":4298:4352  require(balanceOfContract > 0, \"Insufficient Balance\") */\n      tag_177\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4531:4533   */\n      0x20\n        /* \"ERC721A/MintNagaKids.sol\":4298:4352  require(balanceOfContract > 0, \"Insufficient Balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4513:4534   */\n      mstore\n        /* \"#utility.yul\":4570:4572   */\n      0x14\n        /* \"#utility.yul\":4550:4568   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4543:4573   */\n      mstore\n      shl(0x60, 0x496e73756666696369656e742042616c616e6365)\n        /* \"#utility.yul\":4589:4607   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4582:4632   */\n      mstore\n        /* \"#utility.yul\":4649:4667   */\n      0x64\n      add\n        /* \"ERC721A/MintNagaKids.sol\":4298:4352  require(balanceOfContract > 0, \"Insufficient Balance\") */\n      tag_137\n        /* \"#utility.yul\":4329:4673   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":4298:4352  require(balanceOfContract > 0, \"Insufficient Balance\") */\n    tag_177:\n        /* \"ERC721A/MintNagaKids.sol\":4363:4413  IERC20(_currency).transfer(_to, balanceOfContract) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5683:5715   */\n      dup5\n      dup2\n      and\n        /* \"ERC721A/MintNagaKids.sol\":4363:4413  IERC20(_currency).transfer(_to, balanceOfContract) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":5665:5716   */\n      mstore\n        /* \"#utility.yul\":5732:5750   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5725:5759   */\n      dup4\n      swap1\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4363:4389  IERC20(_currency).transfer */\n      dup4\n      and\n      swap1\n      0xa9059cbb\n      swap1\n        /* \"#utility.yul\":5638:5656   */\n      0x44\n      add\n        /* \"ERC721A/MintNagaKids.sol\":4363:4413  IERC20(_currency).transfer(_to, balanceOfContract) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_182\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_182:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_183\n      swap2\n      swap1\n      tag_184\n      jump\t// in\n    tag_183:\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":4439:4504  WithdrawCurrency(_to,_currency,balanceOfContract,block.timestamp) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6339:6354   */\n      dup1\n      dup7\n      and\n        /* \"#utility.yul\":6321:6355   */\n      dup3\n      mstore\n        /* \"#utility.yul\":6391:6406   */\n      dup5\n      and\n        /* \"#utility.yul\":6386:6388   */\n      0x20\n        /* \"#utility.yul\":6371:6389   */\n      dup3\n      add\n        /* \"#utility.yul\":6364:6407   */\n      mstore\n        /* \"#utility.yul\":6423:6441   */\n      swap1\n      dup2\n      add\n        /* \"#utility.yul\":6416:6450   */\n      dup3\n      swap1\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4488:4503  block.timestamp */\n      timestamp\n        /* \"#utility.yul\":6481:6483   */\n      0x60\n        /* \"#utility.yul\":6466:6484   */\n      dup3\n      add\n        /* \"#utility.yul\":6459:6493   */\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4439:4504  WithdrawCurrency(_to,_currency,balanceOfContract,block.timestamp) */\n      0xb818a975f91276df8ba59329becbc23c793df0d503c19ac296c3c372a1fa0461\n      swap1\n        /* \"#utility.yul\":6270:6273   */\n      0x80\n        /* \"#utility.yul\":6255:6274   */\n      add\n        /* \"ERC721A/MintNagaKids.sol\":4439:4504  WithdrawCurrency(_to,_currency,balanceOfContract,block.timestamp) */\n      tag_149\n        /* \"#utility.yul\":6052:6499   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":2137:2425  function setNagaKidContract(INagaKid _nagaKid) public onlyOwner {... */\n    tag_76:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_191\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_137\n      swap1\n      tag_138\n      jump\t// in\n    tag_191:\n        /* \"ERC721A/MintNagaKids.sol\":2244:2259  nagaKidContract */\n      0x02\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC721A/MintNagaKids.sol\":2271:2297  nagaKidContract = _nagaKid */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"ERC721A/MintNagaKids.sol\":2366:2417  NagaKidContractChanged(nagaKidBefore, nagaKidAfter) */\n      0x40\n      dup1\n      mload\n        /* \"ERC721A/MintNagaKids.sol\":2244:2259  nagaKidContract */\n      swap2\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":6716:6750   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6781:6783   */\n      0x20\n        /* \"#utility.yul\":6766:6784   */\n      dup3\n      add\n        /* \"#utility.yul\":6759:6802   */\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":2271:2297  nagaKidContract = _nagaKid */\n      dup4\n      swap2\n        /* \"ERC721A/MintNagaKids.sol\":2366:2417  NagaKidContractChanged(nagaKidBefore, nagaKidAfter) */\n      0xabdf056c85a221fcb31d0366c4475b6b2c613df2eeea951a9fcb3e1a8595d973\n      swap2\n        /* \"#utility.yul\":6651:6669   */\n      add\n        /* \"ERC721A/MintNagaKids.sol\":2366:2417  NagaKidContractChanged(nagaKidBefore, nagaKidAfter) */\n      tag_149\n        /* \"#utility.yul\":6504:6808   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":4520:4863  function withdrawNFT(address _to,address _NFT,uint256 _tokenId) public onlyOwner {... */\n    tag_87:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_200\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_137\n      swap1\n      tag_138\n      jump\t// in\n    tag_200:\n        /* \"ERC721A/MintNagaKids.sol\":4620:4651  IERC721(_NFT).ownerOf(_tokenId) */\n      mload(0x40)\n      shl(0xe1, 0x31a9108f)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":160:185   */\n      dup3\n      swap1\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4663:4667  this */\n      address\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC721A/MintNagaKids.sol\":4620:4641  IERC721(_NFT).ownerOf */\n      dup5\n      and\n      swap1\n      0x6352211e\n      swap1\n        /* \"#utility.yul\":133:151   */\n      0x24\n      add\n        /* \"ERC721A/MintNagaKids.sol\":4620:4651  IERC721(_NFT).ownerOf(_tokenId) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_205\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_205:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_206\n      swap2\n      swap1\n      tag_207\n      jump\t// in\n    tag_206:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC721A/MintNagaKids.sol\":4620:4668  IERC721(_NFT).ownerOf(_tokenId) == address(this) */\n      and\n      eq\n        /* \"ERC721A/MintNagaKids.sol\":4612:4710  require(IERC721(_NFT).ownerOf(_tokenId) == address(this), \"This tokenId is not owned by contract\") */\n      tag_208\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7271:7273   */\n      0x20\n        /* \"ERC721A/MintNagaKids.sol\":4612:4710  require(IERC721(_NFT).ownerOf(_tokenId) == address(this), \"This tokenId is not owned by contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7253:7274   */\n      mstore\n        /* \"#utility.yul\":7310:7312   */\n      0x25\n        /* \"#utility.yul\":7290:7308   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7283:7313   */\n      mstore\n        /* \"#utility.yul\":7349:7383   */\n      0x5468697320746f6b656e4964206973206e6f74206f776e656420627920636f6e\n        /* \"#utility.yul\":7329:7347   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7322:7384   */\n      mstore\n      shl(0xda, 0x1d1c9858dd)\n        /* \"#utility.yul\":7400:7418   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7393:7428   */\n      mstore\n        /* \"#utility.yul\":7445:7464   */\n      0x84\n      add\n        /* \"ERC721A/MintNagaKids.sol\":4612:4710  require(IERC721(_NFT).ownerOf(_tokenId) == address(this), \"This tokenId is not owned by contract\") */\n      tag_137\n        /* \"#utility.yul\":7069:7470   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":4612:4710  require(IERC721(_NFT).ownerOf(_tokenId) == address(this), \"This tokenId is not owned by contract\") */\n    tag_208:\n        /* \"ERC721A/MintNagaKids.sol\":4723:4783  IERC721(_NFT).safeTransferFrom(address(this), _to, _tokenId) */\n      mload(0x40)\n      shl(0xe1, 0x21421707)\n      dup2\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4762:4766  this */\n      address\n        /* \"ERC721A/MintNagaKids.sol\":4723:4783  IERC721(_NFT).safeTransferFrom(address(this), _to, _tokenId) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7715:7749   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7785:7800   */\n      dup5\n      dup2\n      and\n        /* \"#utility.yul\":7765:7783   */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":7758:7801   */\n      mstore\n        /* \"#utility.yul\":7817:7835   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7810:7844   */\n      dup4\n      swap1\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4723:4753  IERC721(_NFT).safeTransferFrom */\n      dup4\n      and\n      swap1\n      0x42842e0e\n      swap1\n        /* \"#utility.yul\":7650:7668   */\n      0x64\n      add\n        /* \"ERC721A/MintNagaKids.sol\":4723:4783  IERC721(_NFT).safeTransferFrom(address(this), _to, _tokenId) */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_213\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_213:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_215\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_215:\n      pop\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":4809:4855  WithdrawNFT(_to,_NFT,_tokenId,block.timestamp) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6339:6354   */\n      dup1\n      dup9\n      and\n        /* \"#utility.yul\":6321:6355   */\n      dup3\n      mstore\n        /* \"#utility.yul\":6391:6406   */\n      dup7\n      and\n        /* \"#utility.yul\":6386:6388   */\n      0x20\n        /* \"#utility.yul\":6371:6389   */\n      dup3\n      add\n        /* \"#utility.yul\":6364:6407   */\n      mstore\n        /* \"#utility.yul\":6423:6441   */\n      swap1\n      dup2\n      add\n        /* \"#utility.yul\":6416:6450   */\n      dup5\n      swap1\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4839:4854  block.timestamp */\n      timestamp\n        /* \"#utility.yul\":6481:6483   */\n      0x60\n        /* \"#utility.yul\":6466:6484   */\n      dup3\n      add\n        /* \"#utility.yul\":6459:6493   */\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4809:4855  WithdrawNFT(_to,_NFT,_tokenId,block.timestamp) */\n      0x0127a8d3f57942833f6930572bce52ad882683e36eeb5830d199d3fa4bfa9467\n      swap3\n      pop\n        /* \"#utility.yul\":6270:6273   */\n      0x80\n        /* \"#utility.yul\":6255:6274   */\n      add\n      swap1\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":4809:4855  WithdrawNFT(_to,_NFT,_tokenId,block.timestamp) */\n      tag_149\n        /* \"#utility.yul\":6052:6499   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":5162:5273  function getTotalSupply() public view returns (uint256) {... */\n    tag_90:\n        /* \"ERC721A/MintNagaKids.sol\":5236:5251  nagaKidContract */\n      sload(0x02)\n        /* \"ERC721A/MintNagaKids.sol\":5236:5265  nagaKidContract.totalSupply() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x18160ddd)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"ERC721A/MintNagaKids.sol\":5209:5216  uint256 */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC721A/MintNagaKids.sol\":5236:5251  nagaKidContract */\n      and\n      swap2\n        /* \"ERC721A/MintNagaKids.sol\":5236:5263  nagaKidContract.totalSupply */\n      0x18160ddd\n      swap2\n        /* \"ERC721A/MintNagaKids.sol\":5236:5265  nagaKidContract.totalSupply() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"ERC721A/MintNagaKids.sol\":5236:5251  nagaKidContract */\n      dup7\n        /* \"ERC721A/MintNagaKids.sol\":5236:5265  nagaKidContract.totalSupply() */\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_129\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_108:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_224\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_137\n      swap1\n      tag_138\n      jump\t// in\n    tag_224:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_227\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8057:8059   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8039:8060   */\n      mstore\n        /* \"#utility.yul\":8096:8098   */\n      0x26\n        /* \"#utility.yul\":8076:8094   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8069:8099   */\n      mstore\n        /* \"#utility.yul\":8135:8169   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":8115:8133   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8108:8170   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":8186:8204   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8179:8215   */\n      mstore\n        /* \"#utility.yul\":8232:8251   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_137\n        /* \"#utility.yul\":7855:8257   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_227:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      tag_230\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2100:2108  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2099  _transferOwnership */\n      tag_158\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_230:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"ERC721A/MintNagaKids.sol\":2866:3781  function allowlistMint(bytes32[] calldata _proof, uint256 _amount, bytes32 _round) public payable nonReentrant {... */\n    tag_116:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      sub\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_232\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8464:8466   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8446:8467   */\n      mstore\n        /* \"#utility.yul\":8503:8505   */\n      0x1f\n        /* \"#utility.yul\":8483:8501   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8476:8506   */\n      mstore\n        /* \"#utility.yul\":8542:8575   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":8522:8540   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8515:8576   */\n      mstore\n        /* \"#utility.yul\":8593:8611   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_137\n        /* \"#utility.yul\":8262:8617   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_232:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"ERC721A/MintNagaKids.sol\":2996:3002  _round */\n      dup1\n        /* \"ERC721A/MintNagaKids.sol\":2988:3038  require(_round != DEFAULT,\"Mint is not approved.\") */\n      tag_236\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8824:8826   */\n      0x20\n        /* \"ERC721A/MintNagaKids.sol\":2988:3038  require(_round != DEFAULT,\"Mint is not approved.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8806:8827   */\n      mstore\n        /* \"#utility.yul\":8863:8865   */\n      0x15\n        /* \"#utility.yul\":8843:8861   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8836:8866   */\n      mstore\n      shl(0x59, 0x26b4b73a1034b9903737ba1030b8383937bb32b217)\n        /* \"#utility.yul\":8882:8900   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8875:8926   */\n      mstore\n        /* \"#utility.yul\":8943:8961   */\n      0x64\n      add\n        /* \"ERC721A/MintNagaKids.sol\":2988:3038  require(_round != DEFAULT,\"Mint is not approved.\") */\n      tag_137\n        /* \"#utility.yul\":8622:8967   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":2988:3038  require(_round != DEFAULT,\"Mint is not approved.\") */\n    tag_236:\n        /* \"ERC721A/MintNagaKids.sol\":3077:3083  _round */\n      dup1\n        /* \"ERC721A/MintNagaKids.sol\":3057:3073  currentMintRound */\n      sload(0x03)\n        /* \"ERC721A/MintNagaKids.sol\":3057:3083  currentMintRound == _round */\n      eq\n        /* \"ERC721A/MintNagaKids.sol\":3049:3127  require(currentMintRound == _round, \"Contract are not in this minting round.\") */\n      tag_239\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9174:9176   */\n      0x20\n        /* \"ERC721A/MintNagaKids.sol\":3049:3127  require(currentMintRound == _round, \"Contract are not in this minting round.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9156:9177   */\n      mstore\n        /* \"#utility.yul\":9213:9215   */\n      0x27\n        /* \"#utility.yul\":9193:9211   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9186:9216   */\n      mstore\n        /* \"#utility.yul\":9252:9286   */\n      0x436f6e747261637420617265206e6f7420696e2074686973206d696e74696e67\n        /* \"#utility.yul\":9232:9250   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9225:9287   */\n      mstore\n      shl(0xc9, 0x103937bab73217)\n        /* \"#utility.yul\":9303:9321   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9296:9333   */\n      mstore\n        /* \"#utility.yul\":9350:9369   */\n      0x84\n      add\n        /* \"ERC721A/MintNagaKids.sol\":3049:3127  require(currentMintRound == _round, \"Contract are not in this minting round.\") */\n      tag_137\n        /* \"#utility.yul\":8972:9375   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":3049:3127  require(currentMintRound == _round, \"Contract are not in this minting round.\") */\n    tag_239:\n        /* \"ERC721A/MintNagaKids.sol\":3175:3189  getMaxSupply() */\n      tag_242\n        /* \"ERC721A/MintNagaKids.sol\":3175:3187  getMaxSupply */\n      tag_42\n        /* \"ERC721A/MintNagaKids.sol\":3175:3189  getMaxSupply() */\n      jump\t// in\n    tag_242:\n        /* \"ERC721A/MintNagaKids.sol\":3165:3172  _amount */\n      dup3\n        /* \"ERC721A/MintNagaKids.sol\":3146:3162  getTotalSupply() */\n      tag_243\n        /* \"ERC721A/MintNagaKids.sol\":3146:3160  getTotalSupply */\n      tag_90\n        /* \"ERC721A/MintNagaKids.sol\":3146:3162  getTotalSupply() */\n      jump\t// in\n    tag_243:\n        /* \"ERC721A/MintNagaKids.sol\":3146:3172  getTotalSupply() + _amount */\n      tag_244\n      swap2\n      swap1\n      tag_245\n      jump\t// in\n    tag_244:\n        /* \"ERC721A/MintNagaKids.sol\":3146:3189  getTotalSupply() + _amount < getMaxSupply() */\n      lt\n        /* \"ERC721A/MintNagaKids.sol\":3138:3205  require(getTotalSupply() + _amount < getMaxSupply(), \"Over supply\") */\n      tag_246\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9847:9849   */\n      0x20\n        /* \"ERC721A/MintNagaKids.sol\":3138:3205  require(getTotalSupply() + _amount < getMaxSupply(), \"Over supply\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9829:9850   */\n      mstore\n        /* \"#utility.yul\":9886:9888   */\n      0x0b\n        /* \"#utility.yul\":9866:9884   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9859:9889   */\n      mstore\n      shl(0xa8, 0x4f76657220737570706c79)\n        /* \"#utility.yul\":9905:9923   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9898:9939   */\n      mstore\n        /* \"#utility.yul\":9956:9974   */\n      0x64\n      add\n        /* \"ERC721A/MintNagaKids.sol\":3138:3205  require(getTotalSupply() + _amount < getMaxSupply(), \"Over supply\") */\n      tag_137\n        /* \"#utility.yul\":9645:9980   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":3138:3205  require(getTotalSupply() + _amount < getMaxSupply(), \"Over supply\") */\n    tag_246:\n        /* \"ERC721A/MintNagaKids.sol\":3237:3247  msg.sender */\n      caller\n        /* \"ERC721A/MintNagaKids.sol\":4943:4947  bool */\n      0x00\n        /* \"ERC721A/MintNagaKids.sol\":4967:4987  _isUserMinted[_user] */\n      swap1\n      dup2\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":4967:4980  _isUserMinted */\n      0x05\n        /* \"ERC721A/MintNagaKids.sol\":4967:4987  _isUserMinted[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"ERC721A/MintNagaKids.sol\":4967:4995  _isUserMinted[_user][_round] */\n      dup5\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"ERC721A/MintNagaKids.sol\":3224:3264  isUserMinted(msg.sender,_round) == false */\n      iszero\n        /* \"ERC721A/MintNagaKids.sol\":3216:3292  require(isUserMinted(msg.sender,_round) == false, \"You are already minted.\") */\n      tag_250\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10187:10189   */\n      0x20\n        /* \"ERC721A/MintNagaKids.sol\":3216:3292  require(isUserMinted(msg.sender,_round) == false, \"You are already minted.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10169:10190   */\n      mstore\n        /* \"#utility.yul\":10226:10228   */\n      0x17\n        /* \"#utility.yul\":10206:10224   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10199:10229   */\n      mstore\n        /* \"#utility.yul\":10265:10290   */\n      0x596f752061726520616c7265616479206d696e7465642e000000000000000000\n        /* \"#utility.yul\":10245:10263   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10238:10291   */\n      mstore\n        /* \"#utility.yul\":10308:10326   */\n      0x64\n      add\n        /* \"ERC721A/MintNagaKids.sol\":3216:3292  require(isUserMinted(msg.sender,_round) == false, \"You are already minted.\") */\n      tag_137\n        /* \"#utility.yul\":9985:10332   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":3216:3292  require(isUserMinted(msg.sender,_round) == false, \"You are already minted.\") */\n    tag_250:\n        /* \"ERC721A/MintNagaKids.sol\":3311:3326  nagaKidContract */\n      sload(0x02)\n        /* \"ERC721A/MintNagaKids.sol\":3311:3350  nagaKidContract.isMinter(address(this)) */\n      mload(0x40)\n      shl(0xe1, 0x55138f0d)\n      dup2\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":3344:3348  this */\n      address\n        /* \"ERC721A/MintNagaKids.sol\":3311:3350  nagaKidContract.isMinter(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1490:1541   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC721A/MintNagaKids.sol\":3311:3326  nagaKidContract */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"ERC721A/MintNagaKids.sol\":3311:3335  nagaKidContract.isMinter */\n      0xaa271e1a\n      swap1\n        /* \"#utility.yul\":1463:1481   */\n      0x24\n      add\n        /* \"ERC721A/MintNagaKids.sol\":3311:3350  nagaKidContract.isMinter(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_255\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_255:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_256\n      swap2\n      swap1\n      tag_184\n      jump\t// in\n    tag_256:\n        /* \"ERC721A/MintNagaKids.sol\":3303:3385  require(nagaKidContract.isMinter(address(this)), \"Contract Mint is not approved.\") */\n      tag_257\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10539:10541   */\n      0x20\n        /* \"ERC721A/MintNagaKids.sol\":3303:3385  require(nagaKidContract.isMinter(address(this)), \"Contract Mint is not approved.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10521:10542   */\n      mstore\n        /* \"#utility.yul\":10578:10580   */\n      0x1e\n        /* \"#utility.yul\":10558:10576   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10551:10581   */\n      mstore\n        /* \"#utility.yul\":10617:10649   */\n      0x436f6e7472616374204d696e74206973206e6f7420617070726f7665642e0000\n        /* \"#utility.yul\":10597:10615   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10590:10650   */\n      mstore\n        /* \"#utility.yul\":10667:10685   */\n      0x64\n      add\n        /* \"ERC721A/MintNagaKids.sol\":3303:3385  require(nagaKidContract.isMinter(address(this)), \"Contract Mint is not approved.\") */\n      tag_137\n        /* \"#utility.yul\":10337:10691   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":3303:3385  require(nagaKidContract.isMinter(address(this)), \"Contract Mint is not approved.\") */\n    tag_257:\n        /* \"ERC721A/MintNagaKids.sol\":3404:3500  MerkleProof.verify(_proof, merkleRoot, keccak256(abi.encodePacked(msg.sender, _amount, _round))) */\n      tag_260\n        /* \"ERC721A/MintNagaKids.sol\":3423:3429  _proof */\n      dup5\n      dup5\n        /* \"ERC721A/MintNagaKids.sol\":3404:3500  MerkleProof.verify(_proof, merkleRoot, keccak256(abi.encodePacked(msg.sender, _amount, _round))) */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":3431:3441  merkleRoot */\n      sload(0x04)\n        /* \"ERC721A/MintNagaKids.sol\":3453:3498  abi.encodePacked(msg.sender, _amount, _round) */\n      mload(0x40)\n      not(0xffffffffffffffffffffffff)\n        /* \"ERC721A/MintNagaKids.sol\":3470:3480  msg.sender */\n      caller\n        /* \"#utility.yul\":10901:10903   */\n      0x60\n        /* \"#utility.yul\":10897:10912   */\n      shl\n        /* \"#utility.yul\":10893:10946   */\n      and\n        /* \"ERC721A/MintNagaKids.sol\":3453:3498  abi.encodePacked(msg.sender, _amount, _round) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":10881:10947   */\n      mstore\n        /* \"#utility.yul\":10963:10975   */\n      0x34\n      dup2\n      add\n        /* \"#utility.yul\":10956:10984   */\n      dup9\n      swap1\n      mstore\n        /* \"#utility.yul\":11000:11012   */\n      0x54\n      dup2\n      add\n        /* \"#utility.yul\":10993:11021   */\n      dup8\n      swap1\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":3431:3441  merkleRoot */\n      swap1\n      swap3\n      pop\n        /* \"#utility.yul\":11037:11049   */\n      0x74\n      add\n      swap1\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":3453:3498  abi.encodePacked(msg.sender, _amount, _round) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":3443:3499  keccak256(abi.encodePacked(msg.sender, _amount, _round)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"ERC721A/MintNagaKids.sol\":3404:3422  MerkleProof.verify */\n      tag_263\n        /* \"ERC721A/MintNagaKids.sol\":3404:3500  MerkleProof.verify(_proof, merkleRoot, keccak256(abi.encodePacked(msg.sender, _amount, _round))) */\n      jump\t// in\n    tag_260:\n        /* \"ERC721A/MintNagaKids.sol\":3396:3542  require(MerkleProof.verify(_proof, merkleRoot, keccak256(abi.encodePacked(msg.sender, _amount, _round))), \"Unauthorized WhitelistMint This User.\") */\n      tag_264\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11262:11264   */\n      0x20\n        /* \"ERC721A/MintNagaKids.sol\":3396:3542  require(MerkleProof.verify(_proof, merkleRoot, keccak256(abi.encodePacked(msg.sender, _amount, _round))), \"Unauthorized WhitelistMint This User.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11244:11265   */\n      mstore\n        /* \"#utility.yul\":11301:11303   */\n      0x25\n        /* \"#utility.yul\":11281:11299   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11274:11304   */\n      mstore\n        /* \"#utility.yul\":11340:11374   */\n      0x556e617574686f72697a65642057686974656c6973744d696e74205468697320\n        /* \"#utility.yul\":11320:11338   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11313:11375   */\n      mstore\n      shl(0xd9, 0x2ab9b2b917)\n        /* \"#utility.yul\":11391:11409   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11384:11419   */\n      mstore\n        /* \"#utility.yul\":11436:11455   */\n      0x84\n      add\n        /* \"ERC721A/MintNagaKids.sol\":3396:3542  require(MerkleProof.verify(_proof, merkleRoot, keccak256(abi.encodePacked(msg.sender, _amount, _round))), \"Unauthorized WhitelistMint This User.\") */\n      tag_137\n        /* \"#utility.yul\":11060:11461   */\n      jump\n        /* \"ERC721A/MintNagaKids.sol\":3396:3542  require(MerkleProof.verify(_proof, merkleRoot, keccak256(abi.encodePacked(msg.sender, _amount, _round))), \"Unauthorized WhitelistMint This User.\") */\n    tag_264:\n        /* \"ERC721A/MintNagaKids.sol\":3569:3579  msg.sender */\n      caller\n        /* \"ERC721A/MintNagaKids.sol\":3555:3580  _isUserMinted[msg.sender] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":3555:3568  _isUserMinted */\n      0x05\n        /* \"ERC721A/MintNagaKids.sol\":3555:3580  _isUserMinted[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"ERC721A/MintNagaKids.sol\":3555:3588  _isUserMinted[msg.sender][_round] */\n      dup6\n      dup5\n      mstore\n      dup3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"ERC721A/MintNagaKids.sol\":3555:3595  _isUserMinted[msg.sender][_round] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"ERC721A/MintNagaKids.sol\":3591:3595  true */\n      0x01\n        /* \"ERC721A/MintNagaKids.sol\":3555:3595  _isUserMinted[msg.sender][_round] = true */\n      or\n      swap1\n      sstore\n        /* \"ERC721A/MintNagaKids.sol\":3606:3635  _userMintedAmount[msg.sender] */\n      swap3\n      dup3\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":3606:3623  _userMintedAmount */\n      0x06\n        /* \"ERC721A/MintNagaKids.sol\":3606:3635  _userMintedAmount[msg.sender] */\n      dup2\n      mstore\n      dup3\n      dup3\n      keccak256\n        /* \"ERC721A/MintNagaKids.sol\":3606:3643  _userMintedAmount[msg.sender][_round] */\n      dup5\n      dup4\n      mstore\n      swap1\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"ERC721A/MintNagaKids.sol\":3606:3654  _userMintedAmount[msg.sender][_round] += _amount */\n      dup1\n      sload\n        /* \"ERC721A/MintNagaKids.sol\":3647:3654  _amount */\n      dup5\n      swap3\n        /* \"ERC721A/MintNagaKids.sol\":3555:3580  _isUserMinted[msg.sender] */\n      swap1\n        /* \"ERC721A/MintNagaKids.sol\":3606:3654  _userMintedAmount[msg.sender][_round] += _amount */\n      tag_267\n      swap1\n        /* \"ERC721A/MintNagaKids.sol\":3647:3654  _amount */\n      dup5\n      swap1\n        /* \"ERC721A/MintNagaKids.sol\":3606:3654  _userMintedAmount[msg.sender][_round] += _amount */\n      tag_245\n      jump\t// in\n    tag_267:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":3667:3682  nagaKidContract */\n      sload(0x02)\n        /* \"ERC721A/MintNagaKids.sol\":3667:3711  nagaKidContract.safeMint(msg.sender,_amount) */\n      mload(0x40)\n      shl(0xe2, 0x28512065)\n      dup2\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":3692:3702  msg.sender */\n      caller\n        /* \"ERC721A/MintNagaKids.sol\":3667:3711  nagaKidContract.safeMint(msg.sender,_amount) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5665:5716   */\n      mstore\n        /* \"#utility.yul\":5732:5750   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":5725:5759   */\n      dup5\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"ERC721A/MintNagaKids.sol\":3667:3682  nagaKidContract */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"ERC721A/MintNagaKids.sol\":3667:3691  nagaKidContract.safeMint */\n      0xa1448194\n      swap1\n        /* \"#utility.yul\":5638:5656   */\n      0x44\n      add\n        /* \"ERC721A/MintNagaKids.sol\":3667:3711  nagaKidContract.safeMint(msg.sender,_amount) */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_269\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_269:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_271\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_271:\n      pop\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":3729:3773  Minted(msg.sender, _amount, block.timestamp) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":5412:5437   */\n      dup6\n      dup2\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":3757:3772  block.timestamp */\n      timestamp\n        /* \"#utility.yul\":5468:5470   */\n      0x20\n        /* \"#utility.yul\":5453:5471   */\n      dup3\n      add\n        /* \"#utility.yul\":5446:5480   */\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":3736:3746  msg.sender */\n      caller\n      swap4\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":3729:3773  Minted(msg.sender, _amount, block.timestamp) */\n      0x25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff\n      swap3\n      pop\n        /* \"#utility.yul\":5385:5403   */\n      add\n        /* \"ERC721A/MintNagaKids.sol\":3729:3773  Minted(msg.sender, _amount, block.timestamp) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      dup1\n      sstore\n      pop\n      pop\n        /* \"ERC721A/MintNagaKids.sol\":2866:3781  function allowlistMint(bytes32[] calldata _proof, uint256 _amount, bytes32 _round) public payable nonReentrant {... */\n      jump\t// out\n        /* \"ERC721A/MintNagaKids.sol\":2433:2630  function setRound(bytes32 _round) public onlyOwner {... */\n    tag_120:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_277\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_137\n      swap1\n      tag_138\n      jump\t// in\n    tag_277:\n        /* \"ERC721A/MintNagaKids.sol\":2518:2534  currentMintRound */\n      0x03\n      dup1\n      sload\n        /* \"ERC721A/MintNagaKids.sol\":2545:2570  currentMintRound = _round */\n      swap1\n      dup3\n      swap1\n      sstore\n        /* \"ERC721A/MintNagaKids.sol\":2588:2622  RoundChanged(_roundBefore, _round) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":5412:5437   */\n      dup3\n      dup2\n      mstore\n        /* \"#utility.yul\":5468:5470   */\n      0x20\n        /* \"#utility.yul\":5453:5471   */\n      dup2\n      add\n        /* \"#utility.yul\":5446:5480   */\n      dup5\n      swap1\n      mstore\n        /* \"ERC721A/MintNagaKids.sol\":2588:2622  RoundChanged(_roundBefore, _round) */\n      0x521ec96875ca228cd2fc1dbd4c927a34328c9ce1a83bcb8c1f633f012c90d785\n      swap2\n        /* \"#utility.yul\":5385:5403   */\n      add\n        /* \"ERC721A/MintNagaKids.sol\":2588:2622  RoundChanged(_roundBefore, _round) */\n      tag_165\n        /* \"#utility.yul\":5238:5486   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_158:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1154:1338  function verify(... */\n    tag_263:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1275:1279  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1327:1331  root */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1323  processProof(proof, leaf) */\n      tag_285\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1311:1316  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1318:1322  leaf */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1310  processProof */\n      tag_286\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1323  processProof(proof, leaf) */\n      jump\t// in\n    tag_285:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1331  processProof(proof, leaf) == root */\n      eq\n      swap5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1154:1338  function verify(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1689:2351  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n    tag_286:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1772:1779  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1814:1818  leaf */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1772:1779  bytes32 */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1828:2316  for (uint256 i = 0; i < proof.length; i++) {... */\n    tag_288:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1852:1857  proof */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1852:1864  proof.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1848:1849  i */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1848:1864  i < proof.length */\n      lt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1828:2316  for (uint256 i = 0; i < proof.length; i++) {... */\n      iszero\n      tag_289\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1885:1905  bytes32 proofElement */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1908:1913  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1914:1915  i */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1908:1916  proof[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_292\n      jumpi\n      tag_292\n      tag_293\n      jump\t// in\n    tag_292:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1885:1916  bytes32 proofElement = proof[i] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1950:1962  proofElement */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1934:1946  computedHash */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1934:1962  computedHash <= proofElement */\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1930:2306  if (computedHash <= proofElement) {... */\n      tag_294\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2425:2438  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2473:2488  mstore(0x00, a) */\n      dup4\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2508:2512  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2501:2516  mstore(0x20, b) */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2554:2558  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2538:2559  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2060:2117  computedHash = _efficientHash(computedHash, proofElement) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1930:2306  if (computedHash <= proofElement) {... */\n      jump(tag_297)\n    tag_294:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2425:2438  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2473:2488  mstore(0x00, a) */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2508:2512  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2501:2516  mstore(0x20, b) */\n      dup5\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2554:2558  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2538:2559  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2234:2291  computedHash = _efficientHash(proofElement, computedHash) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1930:2306  if (computedHash <= proofElement) {... */\n    tag_297:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1866:1869  i++ */\n      dup1\n      tag_299\n      dup2\n      tag_300\n      jump\t// in\n    tag_299:\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1828:2316  for (uint256 i = 0; i < proof.length; i++) {... */\n      jump(tag_288)\n    tag_289:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2332:2344  computedHash */\n      swap4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1689:2351  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":378:509   */\n    tag_302:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":453:484   */\n      dup2\n      and\n        /* \"#utility.yul\":443:485   */\n      dup2\n      eq\n        /* \"#utility.yul\":433:503   */\n      tag_230\n      jumpi\n        /* \"#utility.yul\":499:500   */\n      0x00\n        /* \"#utility.yul\":496:497   */\n      dup1\n        /* \"#utility.yul\":489:501   */\n      revert\n        /* \"#utility.yul\":514:761   */\n    tag_48:\n        /* \"#utility.yul\":573:579   */\n      0x00\n        /* \"#utility.yul\":626:628   */\n      0x20\n        /* \"#utility.yul\":614:623   */\n      dup3\n        /* \"#utility.yul\":605:612   */\n      dup5\n        /* \"#utility.yul\":601:624   */\n      sub\n        /* \"#utility.yul\":597:629   */\n      slt\n        /* \"#utility.yul\":594:646   */\n      iszero\n      tag_310\n      jumpi\n        /* \"#utility.yul\":642:643   */\n      0x00\n        /* \"#utility.yul\":639:640   */\n      dup1\n        /* \"#utility.yul\":632:644   */\n      revert\n        /* \"#utility.yul\":594:646   */\n    tag_310:\n        /* \"#utility.yul\":681:690   */\n      dup2\n        /* \"#utility.yul\":668:691   */\n      calldataload\n        /* \"#utility.yul\":700:731   */\n      tag_311\n        /* \"#utility.yul\":725:730   */\n      dup2\n        /* \"#utility.yul\":700:731   */\n      tag_302\n      jump\t// in\n    tag_311:\n        /* \"#utility.yul\":750:755   */\n      swap4\n        /* \"#utility.yul\":514:761   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":766:946   */\n    tag_60:\n        /* \"#utility.yul\":825:831   */\n      0x00\n        /* \"#utility.yul\":878:880   */\n      0x20\n        /* \"#utility.yul\":866:875   */\n      dup3\n        /* \"#utility.yul\":857:864   */\n      dup5\n        /* \"#utility.yul\":853:876   */\n      sub\n        /* \"#utility.yul\":849:881   */\n      slt\n        /* \"#utility.yul\":846:898   */\n      iszero\n      tag_313\n      jumpi\n        /* \"#utility.yul\":894:895   */\n      0x00\n        /* \"#utility.yul\":891:892   */\n      dup1\n        /* \"#utility.yul\":884:896   */\n      revert\n        /* \"#utility.yul\":846:898   */\n    tag_313:\n      pop\n        /* \"#utility.yul\":917:940   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":766:946   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":951:1339   */\n    tag_65:\n        /* \"#utility.yul\":1019:1025   */\n      0x00\n        /* \"#utility.yul\":1027:1033   */\n      dup1\n        /* \"#utility.yul\":1080:1082   */\n      0x40\n        /* \"#utility.yul\":1068:1077   */\n      dup4\n        /* \"#utility.yul\":1059:1066   */\n      dup6\n        /* \"#utility.yul\":1055:1078   */\n      sub\n        /* \"#utility.yul\":1051:1083   */\n      slt\n        /* \"#utility.yul\":1048:1100   */\n      iszero\n      tag_315\n      jumpi\n        /* \"#utility.yul\":1096:1097   */\n      0x00\n        /* \"#utility.yul\":1093:1094   */\n      dup1\n        /* \"#utility.yul\":1086:1098   */\n      revert\n        /* \"#utility.yul\":1048:1100   */\n    tag_315:\n        /* \"#utility.yul\":1135:1144   */\n      dup3\n        /* \"#utility.yul\":1122:1145   */\n      calldataload\n        /* \"#utility.yul\":1154:1185   */\n      tag_316\n        /* \"#utility.yul\":1179:1184   */\n      dup2\n        /* \"#utility.yul\":1154:1185   */\n      tag_302\n      jump\t// in\n    tag_316:\n        /* \"#utility.yul\":1204:1209   */\n      swap2\n      pop\n        /* \"#utility.yul\":1261:1263   */\n      0x20\n        /* \"#utility.yul\":1246:1264   */\n      dup4\n      add\n        /* \"#utility.yul\":1233:1265   */\n      calldataload\n        /* \"#utility.yul\":1274:1307   */\n      tag_317\n        /* \"#utility.yul\":1233:1265   */\n      dup2\n        /* \"#utility.yul\":1274:1307   */\n      tag_302\n      jump\t// in\n    tag_317:\n        /* \"#utility.yul\":1326:1333   */\n      dup1\n        /* \"#utility.yul\":1316:1333   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":951:1339   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1820:2135   */\n    tag_80:\n        /* \"#utility.yul\":1888:1894   */\n      0x00\n        /* \"#utility.yul\":1896:1902   */\n      dup1\n        /* \"#utility.yul\":1949:1951   */\n      0x40\n        /* \"#utility.yul\":1937:1946   */\n      dup4\n        /* \"#utility.yul\":1928:1935   */\n      dup6\n        /* \"#utility.yul\":1924:1947   */\n      sub\n        /* \"#utility.yul\":1920:1952   */\n      slt\n        /* \"#utility.yul\":1917:1969   */\n      iszero\n      tag_323\n      jumpi\n        /* \"#utility.yul\":1965:1966   */\n      0x00\n        /* \"#utility.yul\":1962:1963   */\n      dup1\n        /* \"#utility.yul\":1955:1967   */\n      revert\n        /* \"#utility.yul\":1917:1969   */\n    tag_323:\n        /* \"#utility.yul\":2004:2013   */\n      dup3\n        /* \"#utility.yul\":1991:2014   */\n      calldataload\n        /* \"#utility.yul\":2023:2054   */\n      tag_324\n        /* \"#utility.yul\":2048:2053   */\n      dup2\n        /* \"#utility.yul\":2023:2054   */\n      tag_302\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":2073:2078   */\n      swap5\n        /* \"#utility.yul\":2125:2127   */\n      0x20\n        /* \"#utility.yul\":2110:2128   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2097:2129   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1820:2135   */\n      jump\t// out\n        /* \"#utility.yul\":2140:2596   */\n    tag_86:\n        /* \"#utility.yul\":2217:2223   */\n      0x00\n        /* \"#utility.yul\":2225:2231   */\n      dup1\n        /* \"#utility.yul\":2233:2239   */\n      0x00\n        /* \"#utility.yul\":2286:2288   */\n      0x60\n        /* \"#utility.yul\":2274:2283   */\n      dup5\n        /* \"#utility.yul\":2265:2272   */\n      dup7\n        /* \"#utility.yul\":2261:2284   */\n      sub\n        /* \"#utility.yul\":2257:2289   */\n      slt\n        /* \"#utility.yul\":2254:2306   */\n      iszero\n      tag_326\n      jumpi\n        /* \"#utility.yul\":2302:2303   */\n      0x00\n        /* \"#utility.yul\":2299:2300   */\n      dup1\n        /* \"#utility.yul\":2292:2304   */\n      revert\n        /* \"#utility.yul\":2254:2306   */\n    tag_326:\n        /* \"#utility.yul\":2341:2350   */\n      dup4\n        /* \"#utility.yul\":2328:2351   */\n      calldataload\n        /* \"#utility.yul\":2360:2391   */\n      tag_327\n        /* \"#utility.yul\":2385:2390   */\n      dup2\n        /* \"#utility.yul\":2360:2391   */\n      tag_302\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":2410:2415   */\n      swap3\n      pop\n        /* \"#utility.yul\":2467:2469   */\n      0x20\n        /* \"#utility.yul\":2452:2470   */\n      dup5\n      add\n        /* \"#utility.yul\":2439:2471   */\n      calldataload\n        /* \"#utility.yul\":2480:2513   */\n      tag_328\n        /* \"#utility.yul\":2439:2471   */\n      dup2\n        /* \"#utility.yul\":2480:2513   */\n      tag_302\n      jump\t// in\n    tag_328:\n        /* \"#utility.yul\":2140:2596   */\n      swap3\n      swap6\n        /* \"#utility.yul\":2532:2539   */\n      swap3\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2586:2588   */\n      0x40\n        /* \"#utility.yul\":2571:2589   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":2558:2590   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":2140:2596   */\n      jump\t// out\n        /* \"#utility.yul\":2825:3582   */\n    tag_115:\n        /* \"#utility.yul\":2929:2935   */\n      0x00\n        /* \"#utility.yul\":2937:2943   */\n      dup1\n        /* \"#utility.yul\":2945:2951   */\n      0x00\n        /* \"#utility.yul\":2953:2959   */\n      dup1\n        /* \"#utility.yul\":3006:3008   */\n      0x60\n        /* \"#utility.yul\":2994:3003   */\n      dup6\n        /* \"#utility.yul\":2985:2992   */\n      dup8\n        /* \"#utility.yul\":2981:3004   */\n      sub\n        /* \"#utility.yul\":2977:3009   */\n      slt\n        /* \"#utility.yul\":2974:3026   */\n      iszero\n      tag_331\n      jumpi\n        /* \"#utility.yul\":3022:3023   */\n      0x00\n        /* \"#utility.yul\":3019:3020   */\n      dup1\n        /* \"#utility.yul\":3012:3024   */\n      revert\n        /* \"#utility.yul\":2974:3026   */\n    tag_331:\n        /* \"#utility.yul\":3062:3071   */\n      dup5\n        /* \"#utility.yul\":3049:3072   */\n      calldataload\n        /* \"#utility.yul\":3091:3109   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3132:3134   */\n      dup1\n        /* \"#utility.yul\":3124:3130   */\n      dup3\n        /* \"#utility.yul\":3121:3135   */\n      gt\n        /* \"#utility.yul\":3118:3152   */\n      iszero\n      tag_332\n      jumpi\n        /* \"#utility.yul\":3148:3149   */\n      0x00\n        /* \"#utility.yul\":3145:3146   */\n      dup1\n        /* \"#utility.yul\":3138:3150   */\n      revert\n        /* \"#utility.yul\":3118:3152   */\n    tag_332:\n        /* \"#utility.yul\":3186:3192   */\n      dup2\n        /* \"#utility.yul\":3175:3184   */\n      dup8\n        /* \"#utility.yul\":3171:3193   */\n      add\n        /* \"#utility.yul\":3161:3193   */\n      swap2\n      pop\n        /* \"#utility.yul\":3231:3238   */\n      dup8\n        /* \"#utility.yul\":3224:3228   */\n      0x1f\n        /* \"#utility.yul\":3220:3222   */\n      dup4\n        /* \"#utility.yul\":3216:3229   */\n      add\n        /* \"#utility.yul\":3212:3239   */\n      slt\n        /* \"#utility.yul\":3202:3257   */\n      tag_333\n      jumpi\n        /* \"#utility.yul\":3253:3254   */\n      0x00\n        /* \"#utility.yul\":3250:3251   */\n      dup1\n        /* \"#utility.yul\":3243:3255   */\n      revert\n        /* \"#utility.yul\":3202:3257   */\n    tag_333:\n        /* \"#utility.yul\":3293:3295   */\n      dup2\n        /* \"#utility.yul\":3280:3296   */\n      calldataload\n        /* \"#utility.yul\":3319:3321   */\n      dup2\n        /* \"#utility.yul\":3311:3317   */\n      dup2\n        /* \"#utility.yul\":3308:3322   */\n      gt\n        /* \"#utility.yul\":3305:3339   */\n      iszero\n      tag_334\n      jumpi\n        /* \"#utility.yul\":3335:3336   */\n      0x00\n        /* \"#utility.yul\":3332:3333   */\n      dup1\n        /* \"#utility.yul\":3325:3337   */\n      revert\n        /* \"#utility.yul\":3305:3339   */\n    tag_334:\n        /* \"#utility.yul\":3390:3397   */\n      dup9\n        /* \"#utility.yul\":3383:3387   */\n      0x20\n        /* \"#utility.yul\":3373:3379   */\n      dup3\n        /* \"#utility.yul\":3370:3371   */\n      0x05\n        /* \"#utility.yul\":3366:3380   */\n      shl\n        /* \"#utility.yul\":3362:3364   */\n      dup6\n        /* \"#utility.yul\":3358:3381   */\n      add\n        /* \"#utility.yul\":3354:3388   */\n      add\n        /* \"#utility.yul\":3351:3398   */\n      gt\n        /* \"#utility.yul\":3348:3415   */\n      iszero\n      tag_335\n      jumpi\n        /* \"#utility.yul\":3411:3412   */\n      0x00\n        /* \"#utility.yul\":3408:3409   */\n      dup1\n        /* \"#utility.yul\":3401:3413   */\n      revert\n        /* \"#utility.yul\":3348:3415   */\n    tag_335:\n        /* \"#utility.yul\":3442:3446   */\n      0x20\n        /* \"#utility.yul\":3434:3447   */\n      swap3\n      dup4\n      add\n      swap10\n        /* \"#utility.yul\":3466:3472   */\n      swap1\n      swap9\n      pop\n        /* \"#utility.yul\":3504:3524   */\n      swap2\n      dup8\n      add\n        /* \"#utility.yul\":3491:3525   */\n      calldataload\n      swap7\n        /* \"#utility.yul\":3572:3574   */\n      0x40\n        /* \"#utility.yul\":3557:3575   */\n      add\n        /* \"#utility.yul\":3544:3576   */\n      calldataload\n      swap6\n      pop\n        /* \"#utility.yul\":2825:3582   */\n      swap1\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3779:3963   */\n    tag_131:\n        /* \"#utility.yul\":3849:3855   */\n      0x00\n        /* \"#utility.yul\":3902:3904   */\n      0x20\n        /* \"#utility.yul\":3890:3899   */\n      dup3\n        /* \"#utility.yul\":3881:3888   */\n      dup5\n        /* \"#utility.yul\":3877:3900   */\n      sub\n        /* \"#utility.yul\":3873:3905   */\n      slt\n        /* \"#utility.yul\":3870:3922   */\n      iszero\n      tag_338\n      jumpi\n        /* \"#utility.yul\":3918:3919   */\n      0x00\n        /* \"#utility.yul\":3915:3916   */\n      dup1\n        /* \"#utility.yul\":3908:3920   */\n      revert\n        /* \"#utility.yul\":3870:3922   */\n    tag_338:\n      pop\n        /* \"#utility.yul\":3941:3957   */\n      mload\n      swap2\n        /* \"#utility.yul\":3779:3963   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3968:4324   */\n    tag_138:\n        /* \"#utility.yul\":4170:4172   */\n      0x20\n        /* \"#utility.yul\":4152:4173   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4189:4207   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":4182:4212   */\n      mstore\n        /* \"#utility.yul\":4248:4282   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":4243:4245   */\n      0x40\n        /* \"#utility.yul\":4228:4246   */\n      dup3\n      add\n        /* \"#utility.yul\":4221:4283   */\n      mstore\n        /* \"#utility.yul\":4315:4317   */\n      0x60\n        /* \"#utility.yul\":4300:4318   */\n      add\n      swap1\n        /* \"#utility.yul\":3968:4324   */\n      jump\t// out\n        /* \"#utility.yul\":5770:6047   */\n    tag_184:\n        /* \"#utility.yul\":5837:5843   */\n      0x00\n        /* \"#utility.yul\":5890:5892   */\n      0x20\n        /* \"#utility.yul\":5878:5887   */\n      dup3\n        /* \"#utility.yul\":5869:5876   */\n      dup5\n        /* \"#utility.yul\":5865:5888   */\n      sub\n        /* \"#utility.yul\":5861:5893   */\n      slt\n        /* \"#utility.yul\":5858:5910   */\n      iszero\n      tag_346\n      jumpi\n        /* \"#utility.yul\":5906:5907   */\n      0x00\n        /* \"#utility.yul\":5903:5904   */\n      dup1\n        /* \"#utility.yul\":5896:5908   */\n      revert\n        /* \"#utility.yul\":5858:5910   */\n    tag_346:\n        /* \"#utility.yul\":5938:5947   */\n      dup2\n        /* \"#utility.yul\":5932:5948   */\n      mload\n        /* \"#utility.yul\":5991:5996   */\n      dup1\n        /* \"#utility.yul\":5984:5997   */\n      iszero\n        /* \"#utility.yul\":5977:5998   */\n      iszero\n        /* \"#utility.yul\":5970:5975   */\n      dup2\n        /* \"#utility.yul\":5967:5999   */\n      eq\n        /* \"#utility.yul\":5957:6017   */\n      tag_311\n      jumpi\n        /* \"#utility.yul\":6013:6014   */\n      0x00\n        /* \"#utility.yul\":6010:6011   */\n      dup1\n        /* \"#utility.yul\":6003:6015   */\n      revert\n        /* \"#utility.yul\":6813:7064   */\n    tag_207:\n        /* \"#utility.yul\":6883:6889   */\n      0x00\n        /* \"#utility.yul\":6936:6938   */\n      0x20\n        /* \"#utility.yul\":6924:6933   */\n      dup3\n        /* \"#utility.yul\":6915:6922   */\n      dup5\n        /* \"#utility.yul\":6911:6934   */\n      sub\n        /* \"#utility.yul\":6907:6939   */\n      slt\n        /* \"#utility.yul\":6904:6956   */\n      iszero\n      tag_351\n      jumpi\n        /* \"#utility.yul\":6952:6953   */\n      0x00\n        /* \"#utility.yul\":6949:6950   */\n      dup1\n        /* \"#utility.yul\":6942:6954   */\n      revert\n        /* \"#utility.yul\":6904:6956   */\n    tag_351:\n        /* \"#utility.yul\":6984:6993   */\n      dup2\n        /* \"#utility.yul\":6978:6994   */\n      mload\n        /* \"#utility.yul\":7003:7034   */\n      tag_311\n        /* \"#utility.yul\":7028:7033   */\n      dup2\n        /* \"#utility.yul\":7003:7034   */\n      tag_302\n      jump\t// in\n        /* \"#utility.yul\":9380:9507   */\n    tag_303:\n        /* \"#utility.yul\":9441:9451   */\n      0x4e487b71\n        /* \"#utility.yul\":9436:9439   */\n      0xe0\n        /* \"#utility.yul\":9432:9452   */\n      shl\n        /* \"#utility.yul\":9429:9430   */\n      0x00\n        /* \"#utility.yul\":9422:9453   */\n      mstore\n        /* \"#utility.yul\":9472:9476   */\n      0x11\n        /* \"#utility.yul\":9469:9470   */\n      0x04\n        /* \"#utility.yul\":9462:9477   */\n      mstore\n        /* \"#utility.yul\":9496:9500   */\n      0x24\n        /* \"#utility.yul\":9493:9494   */\n      0x00\n        /* \"#utility.yul\":9486:9501   */\n      revert\n        /* \"#utility.yul\":9512:9640   */\n    tag_245:\n        /* \"#utility.yul\":9552:9555   */\n      0x00\n        /* \"#utility.yul\":9583:9584   */\n      dup3\n        /* \"#utility.yul\":9579:9585   */\n      not\n        /* \"#utility.yul\":9576:9577   */\n      dup3\n        /* \"#utility.yul\":9573:9586   */\n      gt\n        /* \"#utility.yul\":9570:9609   */\n      iszero\n      tag_362\n      jumpi\n        /* \"#utility.yul\":9589:9607   */\n      tag_362\n      tag_303\n      jump\t// in\n    tag_362:\n      pop\n        /* \"#utility.yul\":9625:9634   */\n      add\n      swap1\n        /* \"#utility.yul\":9512:9640   */\n      jump\t// out\n        /* \"#utility.yul\":11719:11846   */\n    tag_293:\n        /* \"#utility.yul\":11780:11790   */\n      0x4e487b71\n        /* \"#utility.yul\":11775:11778   */\n      0xe0\n        /* \"#utility.yul\":11771:11791   */\n      shl\n        /* \"#utility.yul\":11768:11769   */\n      0x00\n        /* \"#utility.yul\":11761:11792   */\n      mstore\n        /* \"#utility.yul\":11811:11815   */\n      0x32\n        /* \"#utility.yul\":11808:11809   */\n      0x04\n        /* \"#utility.yul\":11801:11816   */\n      mstore\n        /* \"#utility.yul\":11835:11839   */\n      0x24\n        /* \"#utility.yul\":11832:11833   */\n      0x00\n        /* \"#utility.yul\":11825:11840   */\n      revert\n        /* \"#utility.yul\":11851:11986   */\n    tag_300:\n        /* \"#utility.yul\":11890:11893   */\n      0x00\n        /* \"#utility.yul\":11911:11928   */\n      0x01\n      dup3\n      add\n        /* \"#utility.yul\":11908:11951   */\n      tag_372\n      jumpi\n        /* \"#utility.yul\":11931:11949   */\n      tag_372\n      tag_303\n      jump\t// in\n    tag_372:\n      pop\n        /* \"#utility.yul\":11978:11979   */\n      0x01\n        /* \"#utility.yul\":11967:11980   */\n      add\n      swap1\n        /* \"#utility.yul\":11851:11986   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220398c536463b06c0f8de6fa02a095ab49a69424f2ff49f5622179369a6832592e64736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_123": {
									"entryPoint": null,
									"id": 123,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_619": {
									"entryPoint": null,
									"id": 619,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_350": {
									"entryPoint": null,
									"id": 350,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 97,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@owner_32": {
									"entryPoint": null,
									"id": 32,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@setMerkleRoot_693": {
									"entryPoint": 356,
									"id": 693,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setNagaKidContract_651": {
									"entryPoint": 177,
									"id": 651,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_contract$_INagaKid_$494t_bytes32_fromMemory": {
									"entryPoint": 500,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1306:12",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:12",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "128:253:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "174:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "183:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "186:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "176:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "176:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "176:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "149:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "158:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "145:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "145:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "170:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "141:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "141:32:12"
															},
															"nodeType": "YulIf",
															"src": "138:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "199:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "218:9:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "212:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "212:16:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "203:5:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "291:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "300:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "303:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "293:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "293:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "293:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "250:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "261:5:12"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "276:3:12",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "281:1:12",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "272:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "272:11:12"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "285:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "268:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "268:19:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "257:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "257:31:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "247:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "247:42:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "240:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "240:50:12"
															},
															"nodeType": "YulIf",
															"src": "237:70:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "316:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "326:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "316:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "340:35:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "360:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "371:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "356:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "356:18:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "350:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "350:25:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "340:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_INagaKid_$494t_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "86:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "97:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "109:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "117:6:12",
														"type": ""
													}
												],
												"src": "14:367:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "560:182:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "577:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "588:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "570:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "570:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "570:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "611:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "622:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "607:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "607:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "627:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "600:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "600:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "600:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "650:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "661:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "646:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "646:18:12"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "666:34:12",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "639:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "639:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "639:62:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "710:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "722:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "733:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "718:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "718:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "710:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "537:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "551:4:12",
														"type": ""
													}
												],
												"src": "386:356:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "876:175:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "886:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "898:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "909:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "894:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "894:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "886:4:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "921:29:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "939:3:12",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "944:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "935:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "935:11:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "948:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "931:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "931:19:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "925:2:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "966:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "981:6:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "989:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "977:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "977:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "959:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "959:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "959:34:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1013:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1024:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1009:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1009:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "1033:6:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1041:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1029:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1029:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1002:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1002:43:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1002:43:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "837:9:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "848:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "856:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "867:4:12",
														"type": ""
													}
												],
												"src": "747:304:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1185:119:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1195:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1207:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1218:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1203:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1203:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1195:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1237:9:12"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1248:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1230:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1230:25:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1230:25:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1275:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1286:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1271:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1271:18:12"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1291:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1264:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1264:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1264:34:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1146:9:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1157:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1165:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1176:4:12",
														"type": ""
													}
												],
												"src": "1056:248:12"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_INagaKid_$494t_bytes32_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n}",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b50604051620015fe380380620015fe8339810160408190526200003491620001f4565b6200003f3362000061565b600180556200004e82620000b1565b620000598162000164565b505062000230565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001005760405162461bcd60e51b81526020600482018190526024820152600080516020620015de83398151915260448201526064015b60405180910390fd5b600280546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935283917fabdf056c85a221fcb31d0366c4475b6b2c613df2eeea951a9fcb3e1a8595d973910160405180910390a1505050565b6000546001600160a01b03163314620001af5760405162461bcd60e51b81526020600482018190526024820152600080516020620015de8339815191526044820152606401620000f7565b600480549082905560408051828152602081018490527f123d88ba82600dfc3f219f8885c691b0ff020caa535666874b3f5174973757fe910160405180910390a15050565b600080604083850312156200020857600080fd5b82516001600160a01b03811681146200022057600080fd5b6020939093015192949293505050565b61139e80620002406000396000f3fe6080604052600436106101355760003560e01c8063b5abafa1116100ab578063ef5fe79f1161006f578063ef5fe79f1461038a578063f2fde38b146103a0578063f500cdfc146103c0578063f6b48e55146103f4578063ff05fe4a14610407578063ffdc61291461042757600080fd5b8063b5abafa1146102be578063bff863ec14610301578063c4e41b2214610321578063df4e588114610336578063e02023a11461035657600080fd5b80635b94bbc3116100fd5780635b94bbc3146101e3578063715018a6146102175780637cb647591461022c5780638407ecc41461024c5780638da5cb5b1461026c5780639e6c88551461029e57600080fd5b80630a25dea91461013a57806324c37a85146101625780632eb4a7ab146101965780634c0f38c2146101ac57806351cff8d9146101c1575b600080fd5b34801561014657600080fd5b5061014f600081565b6040519081526020015b60405180910390f35b34801561016e57600080fd5b5061014f7fb3c595e55271590809f54e2f4fc3a582754f45b104dd3c41666e2ad310493db381565b3480156101a257600080fd5b5061014f60045481565b3480156101b857600080fd5b5061014f61047d565b3480156101cd57600080fd5b506101e16101dc366004611119565b6104f0565b005b3480156101ef57600080fd5b5061014f7f5c8c0ce107274ad0569bd760c3d2406c1ed72c697935f3f965bd096c5cdedee481565b34801561022357600080fd5b506101e161061a565b34801561023857600080fd5b506101e161024736600461113d565b610650565b34801561025857600080fd5b506101e1610267366004611156565b6106c0565b34801561027857600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610159565b3480156102aa57600080fd5b506101e16102b9366004611119565b610860565b3480156102ca57600080fd5b5061014f6102d936600461118f565b6001600160a01b03919091166000908152600660209081526040808320938352929052205490565b34801561030d57600080fd5b506101e161031c3660046111bb565b6108e6565b34801561032d57600080fd5b5061014f610a96565b34801561034257600080fd5b50600254610286906001600160a01b031681565b34801561036257600080fd5b5061014f7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec81565b34801561039657600080fd5b5061014f60035481565b3480156103ac57600080fd5b506101e16103bb366004611119565b610ae0565b3480156103cc57600080fd5b5061014f7f68e7d51fdb912cb107dda2e59b053d87fcca666dd0ef5339cd3474ccb5276bba81565b6101e16104023660046111fc565b610b7b565b34801561041357600080fd5b506101e161042236600461113d565b610fc2565b34801561043357600080fd5b5061046d61044236600461118f565b6001600160a01b03919091166000908152600560209081526040808320938352929052205460ff1690565b6040519015158152602001610159565b6002546040805163d5abeb0160e01b815290516000926001600160a01b03169163d5abeb019160048083019260209291908290030181865afa1580156104c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104eb919061127e565b905090565b6000546001600160a01b031633146105235760405162461bcd60e51b815260040161051a90611297565b60405180910390fd5b47806105685760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742042616c616e636560601b604482015260640161051a565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146105b5576040519150601f19603f3d011682016040523d82523d6000602084013e6105ba565b606091505b50509050806105c857600080fd5b604080516001600160a01b03851681526020810184905242918101919091527ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906060015b60405180910390a1505050565b6000546001600160a01b031633146106445760405162461bcd60e51b815260040161051a90611297565b61064e600061102a565b565b6000546001600160a01b0316331461067a5760405162461bcd60e51b815260040161051a90611297565b600480549082905560408051828152602081018490527f123d88ba82600dfc3f219f8885c691b0ff020caa535666874b3f5174973757fe91015b60405180910390a15050565b6000546001600160a01b031633146106ea5760405162461bcd60e51b815260040161051a90611297565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610731573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610755919061127e565b90506000811161079e5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742042616c616e636560601b604482015260640161051a565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af11580156107ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081191906112cc565b50604080516001600160a01b038086168252841660208201529081018290524260608201527fb818a975f91276df8ba59329becbc23c793df0d503c19ac296c3c372a1fa04619060800161060d565b6000546001600160a01b0316331461088a5760405162461bcd60e51b815260040161051a90611297565b600280546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935283917fabdf056c85a221fcb31d0366c4475b6b2c613df2eeea951a9fcb3e1a8595d973910161060d565b6000546001600160a01b031633146109105760405162461bcd60e51b815260040161051a90611297565b6040516331a9108f60e11b81526004810182905230906001600160a01b03841690636352211e90602401602060405180830381865afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b91906112ee565b6001600160a01b0316146109df5760405162461bcd60e51b815260206004820152602560248201527f5468697320746f6b656e4964206973206e6f74206f776e656420627920636f6e6044820152641d1c9858dd60da1b606482015260840161051a565b604051632142170760e11b81523060048201526001600160a01b038481166024830152604482018390528316906342842e0e90606401600060405180830381600087803b158015610a2f57600080fd5b505af1158015610a43573d6000803e3d6000fd5b5050604080516001600160a01b038088168252861660208201529081018490524260608201527f0127a8d3f57942833f6930572bce52ad882683e36eeb5830d199d3fa4bfa94679250608001905061060d565b600254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156104c7573d6000803e3d6000fd5b6000546001600160a01b03163314610b0a5760405162461bcd60e51b815260040161051a90611297565b6001600160a01b038116610b6f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161051a565b610b788161102a565b50565b600260015403610bcd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161051a565b600260015580610c175760405162461bcd60e51b815260206004820152601560248201527426b4b73a1034b9903737ba1030b8383937bb32b21760591b604482015260640161051a565b8060035414610c785760405162461bcd60e51b815260206004820152602760248201527f436f6e747261637420617265206e6f7420696e2074686973206d696e74696e67604482015266103937bab7321760c91b606482015260840161051a565b610c8061047d565b82610c89610a96565b610c939190611321565b10610cce5760405162461bcd60e51b815260206004820152600b60248201526a4f76657220737570706c7960a81b604482015260640161051a565b33600090815260056020908152604080832084845290915290205460ff1615610d395760405162461bcd60e51b815260206004820152601760248201527f596f752061726520616c7265616479206d696e7465642e000000000000000000604482015260640161051a565b6002546040516355138f0d60e11b81523060048201526001600160a01b039091169063aa271e1a90602401602060405180830381865afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906112cc565b610df15760405162461bcd60e51b815260206004820152601e60248201527f436f6e7472616374204d696e74206973206e6f7420617070726f7665642e0000604482015260640161051a565b610e74848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506004546040516bffffffffffffffffffffffff193360601b166020820152603481018890526054810187905290925060740190506040516020818303038152906040528051906020012061107a565b610ece5760405162461bcd60e51b815260206004820152602560248201527f556e617574686f72697a65642057686974656c6973744d696e742054686973206044820152642ab9b2b91760d91b606482015260840161051a565b3360008181526005602090815260408083208584528252808320805460ff191660011790559282526006815282822084835290529081208054849290610f15908490611321565b9091555050600254604051632851206560e21b8152336004820152602481018490526001600160a01b039091169063a144819490604401600060405180830381600087803b158015610f6657600080fd5b505af1158015610f7a573d6000803e3d6000fd5b5050604080518581524260208201523393507f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff92500160405180910390a25050600180555050565b6000546001600160a01b03163314610fec5760405162461bcd60e51b815260040161051a90611297565b600380549082905560408051828152602081018490527f521ec96875ca228cd2fc1dbd4c927a34328c9ce1a83bcb8c1f633f012c90d78591016106b4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000826110878584611090565b14949350505050565b600081815b84518110156110fc5760008582815181106110b2576110b2611339565b602002602001015190508083116110d857600083815260208290526040902092506110e9565b600081815260208490526040902092505b50806110f48161134f565b915050611095565b509392505050565b6001600160a01b0381168114610b7857600080fd5b60006020828403121561112b57600080fd5b813561113681611104565b9392505050565b60006020828403121561114f57600080fd5b5035919050565b6000806040838503121561116957600080fd5b823561117481611104565b9150602083013561118481611104565b809150509250929050565b600080604083850312156111a257600080fd5b82356111ad81611104565b946020939093013593505050565b6000806000606084860312156111d057600080fd5b83356111db81611104565b925060208401356111eb81611104565b929592945050506040919091013590565b6000806000806060858703121561121257600080fd5b843567ffffffffffffffff8082111561122a57600080fd5b818701915087601f83011261123e57600080fd5b81358181111561124d57600080fd5b8860208260051b850101111561126257600080fd5b6020928301999098509187013596604001359550909350505050565b60006020828403121561129057600080fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156112de57600080fd5b8151801515811461113657600080fd5b60006020828403121561130057600080fd5b815161113681611104565b634e487b7160e01b600052601160045260246000fd5b600082198211156113345761133461130b565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600182016113615761136161130b565b506001019056fea2646970667358221220398c536463b06c0f8de6fa02a095ab49a69424f2ff49f5622179369a6832592e64736f6c634300080f00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x15FE CODESIZE SUB DUP1 PUSH3 0x15FE DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1F4 JUMP JUMPDEST PUSH3 0x3F CALLER PUSH3 0x61 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE PUSH3 0x4E DUP3 PUSH3 0xB1 JUMP JUMPDEST PUSH3 0x59 DUP2 PUSH3 0x164 JUMP JUMPDEST POP POP PUSH3 0x230 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x100 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x15DE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 SWAP2 PUSH32 0xABDF056C85A221FCB31D0366C4475B6B2C613DF2EEEA951A9FCB3E1A8595D973 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x1AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x15DE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0xF7 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x123D88BA82600DFC3F219F8885C691B0FF020CAA535666874B3F5174973757FE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH2 0x139E DUP1 PUSH3 0x240 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x135 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB5ABAFA1 GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xEF5FE79F GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xEF5FE79F EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xF500CDFC EQ PUSH2 0x3C0 JUMPI DUP1 PUSH4 0xF6B48E55 EQ PUSH2 0x3F4 JUMPI DUP1 PUSH4 0xFF05FE4A EQ PUSH2 0x407 JUMPI DUP1 PUSH4 0xFFDC6129 EQ PUSH2 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB5ABAFA1 EQ PUSH2 0x2BE JUMPI DUP1 PUSH4 0xBFF863EC EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0xC4E41B22 EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0xDF4E5881 EQ PUSH2 0x336 JUMPI DUP1 PUSH4 0xE02023A1 EQ PUSH2 0x356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5B94BBC3 GT PUSH2 0xFD JUMPI DUP1 PUSH4 0x5B94BBC3 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x8407ECC4 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x9E6C8855 EQ PUSH2 0x29E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA25DEA9 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x24C37A85 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x4C0F38C2 EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0x1C1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH32 0xB3C595E55271590809F54E2F4FC3A582754F45B104DD3C41666E2AD310493DB3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x47D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0x1119 JUMP JUMPDEST PUSH2 0x4F0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH32 0x5C8C0CE107274AD0569BD760C3D2406C1ED72C697935F3F965BD096C5CDEDEE4 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x223 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x61A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x247 CALLDATASIZE PUSH1 0x4 PUSH2 0x113D JUMP JUMPDEST PUSH2 0x650 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x1156 JUMP JUMPDEST PUSH2 0x6C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x159 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x2B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1119 JUMP JUMPDEST PUSH2 0x860 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x2D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x118F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x31C CALLDATASIZE PUSH1 0x4 PUSH2 0x11BB JUMP JUMPDEST PUSH2 0x8E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0xA96 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x286 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH32 0x5D8E12C39142FF96D79D04D15D1BA1269E4FE57BB9D26F43523628B34BA108EC DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x396 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x3BB CALLDATASIZE PUSH1 0x4 PUSH2 0x1119 JUMP JUMPDEST PUSH2 0xAE0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH32 0x68E7D51FDB912CB107DDA2E59B053D87FCCA666DD0EF5339CD3474CCB5276BBA DUP2 JUMP JUMPDEST PUSH2 0x1E1 PUSH2 0x402 CALLDATASIZE PUSH1 0x4 PUSH2 0x11FC JUMP JUMPDEST PUSH2 0xB7B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x422 CALLDATASIZE PUSH1 0x4 PUSH2 0x113D JUMP JUMPDEST PUSH2 0xFC2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46D PUSH2 0x442 CALLDATASIZE PUSH1 0x4 PUSH2 0x118F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x159 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD5ABEB01 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xD5ABEB01 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4EB SWAP2 SWAP1 PUSH2 0x127E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x523 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SELFBALANCE DUP1 PUSH2 0x568 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742042616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5B5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5BA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x5C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE TIMESTAMP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF279E6A1F5E320CCA91135676D9CB6E44CA8A08C0B88342BCDB1144F6511B568 SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x644 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH2 0x64E PUSH1 0x0 PUSH2 0x102A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x67A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x123D88BA82600DFC3F219F8885C691B0FF020CAA535666874B3F5174973757FE SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x731 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x755 SWAP2 SWAP1 PUSH2 0x127E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x79E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742042616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x811 SWAP2 SWAP1 PUSH2 0x12CC JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE TIMESTAMP PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xB818A975F91276DF8BA59329BECBC23C793DF0D503C19AC296C3C372A1FA0461 SWAP1 PUSH1 0x80 ADD PUSH2 0x60D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x88A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 SWAP2 PUSH32 0xABDF056C85A221FCB31D0366C4475B6B2C613DF2EEEA951A9FCB3E1A8595D973 SWAP2 ADD PUSH2 0x60D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x910 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE ADDRESS SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x957 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x97B SWAP2 SWAP1 PUSH2 0x12EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468697320746F6B656E4964206973206E6F74206F776E656420627920636F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1D1C9858DD PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x51A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE DUP4 AND SWAP1 PUSH4 0x42842E0E SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA43 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP3 MSTORE DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE TIMESTAMP PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x127A8D3F57942833F6930572BCE52AD882683E36EEB5830D199D3FA4BFA9467 SWAP3 POP PUSH1 0x80 ADD SWAP1 POP PUSH2 0x60D JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB6F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x51A JUMP JUMPDEST PUSH2 0xB78 DUP2 PUSH2 0x102A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0xBCD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE DUP1 PUSH2 0xC17 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x26B4B73A1034B9903737BA1030B8383937BB32B217 PUSH1 0x59 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST DUP1 PUSH1 0x3 SLOAD EQ PUSH2 0xC78 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E747261637420617265206E6F7420696E2074686973206D696E74696E67 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x103937BAB73217 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x51A JUMP JUMPDEST PUSH2 0xC80 PUSH2 0x47D JUMP JUMPDEST DUP3 PUSH2 0xC89 PUSH2 0xA96 JUMP JUMPDEST PUSH2 0xC93 SWAP2 SWAP1 PUSH2 0x1321 JUMP JUMPDEST LT PUSH2 0xCCE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x4F76657220737570706C79 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752061726520616C7265616479206D696E7465642E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x55138F0D PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xAA271E1A SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDA5 SWAP2 SWAP1 PUSH2 0x12CC JUMP JUMPDEST PUSH2 0xDF1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E7472616374204D696E74206973206E6F7420617070726F7665642E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST PUSH2 0xE74 DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x54 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH1 0x74 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x107A JUMP JUMPDEST PUSH2 0xECE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E617574686F72697A65642057686974656C6973744D696E74205468697320 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x2AB9B2B917 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x51A JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP3 DUP3 MSTORE PUSH1 0x6 DUP2 MSTORE DUP3 DUP3 KECCAK256 DUP5 DUP4 MSTORE SWAP1 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xF15 SWAP1 DUP5 SWAP1 PUSH2 0x1321 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x28512065 PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA1448194 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE CALLER SWAP4 POP PUSH32 0x25B428DFDE728CCFADDAD7E29E4AC23C24ED7FD1A6E3E3F91894A9A073F5DFFF SWAP3 POP ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 DUP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFEC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x521EC96875CA228CD2FC1DBD4C927A34328C9CE1A83BCB8C1F633F012C90D785 SWAP2 ADD PUSH2 0x6B4 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1087 DUP6 DUP5 PUSH2 0x1090 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x10FC JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x10B2 JUMPI PUSH2 0x10B2 PUSH2 0x1339 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0x10D8 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP PUSH2 0x10E9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0x10F4 DUP2 PUSH2 0x134F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1095 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x112B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1136 DUP2 PUSH2 0x1104 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x114F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1174 DUP2 PUSH2 0x1104 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1184 DUP2 PUSH2 0x1104 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x11AD DUP2 PUSH2 0x1104 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x11DB DUP2 PUSH2 0x1104 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x11EB DUP2 PUSH2 0x1104 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x122A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x123E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x124D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP10 SWAP1 SWAP9 POP SWAP2 DUP8 ADD CALLDATALOAD SWAP7 PUSH1 0x40 ADD CALLDATALOAD SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1136 DUP2 PUSH2 0x1104 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1334 JUMPI PUSH2 0x1334 PUSH2 0x130B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1361 JUMPI PUSH2 0x1361 PUSH2 0x130B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY DUP13 MSTORE8 PUSH5 0x63B06C0F8D 0xE6 STATICCALL MUL LOG0 SWAP6 0xAB 0x49 0xA6 SWAP5 0x24 CALLCODE SELFDESTRUCT 0x49 CREATE2 PUSH3 0x217936 SWAP11 PUSH9 0x32592E64736F6C6343 STOP ADDMOD 0xF STOP CALLER 0x4F PUSH24 0x6E61626C653A2063616C6C6572206973206E6F7420746865 KECCAK256 PUSH16 0x776E6572000000000000000000000000 ",
							"sourceMap": "395:4998:8:-:0;;;1965:164;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;921:32:0;719:10:4;921:18:0;:32::i;:::-;1701:1:1;1806:22;;2046:36:8;2065:16;2046:18;:36::i;:::-;2093:26;2107:11;2093:13;:26::i;:::-;1965:164;;395:4998;;2270:187:0;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;2137:288:8:-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:4;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;588:2:12;1240:68:0;;;570:21:12;;;607:18;;;600:30;-1:-1:-1;;;;;;;;;;;646:18:12;;;639:62;718:18;;1240:68:0;;;;;;;;;2244:15:8::1;::::0;;-1:-1:-1;;;;;2271:26:8;;::::1;-1:-1:-1::0;;;;;;2271:26:8;::::1;::::0;::::1;::::0;;;2366:51:::1;::::0;;2244:15;;;::::1;959:34:12::0;;;1024:2;1009:18;;1002:43;;;;2271:26:8;;2366:51:::1;::::0;894:18:12;2366:51:8::1;;;;;;;2201:224;;2137:288:::0;:::o;2638:220::-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:4;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;588:2:12;1240:68:0;;;570:21:12;;;607:18;;;600:30;-1:-1:-1;;;;;;;;;;;646:18:12;;;639:62;718:18;;1240:68:0;386:356:12;1240:68:0;2738:10:8::1;::::0;;2759:24;;;;2801:49:::1;::::0;;1230:25:12;;;1286:2;1271:18;;1264:34;;;2801:49:8::1;::::0;1203:18:12;2801:49:8::1;;;;;;;2699:159;2638:220:::0;:::o;14:367:12:-;109:6;117;170:2;158:9;149:7;145:23;141:32;138:52;;;186:1;183;176:12;138:52;212:16;;-1:-1:-1;;;;;257:31:12;;247:42;;237:70;;303:1;300;293:12;237:70;371:2;356:18;;;;350:25;326:5;;350:25;;-1:-1:-1;;;14:367:12:o;1056:248::-;395:4998:8;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DEFAULT_524": {
									"entryPoint": null,
									"id": 524,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@NAGA_HOLDER_MINT_ROUND_516": {
									"entryPoint": null,
									"id": 516,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@SPECIAL_MINT_ROUND_521": {
									"entryPoint": null,
									"id": 521,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@WHITELIST_MINT_ROUND_511": {
									"entryPoint": null,
									"id": 511,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@WITHDRAW_ROLE_529": {
									"entryPoint": null,
									"id": 529,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_efficientHash_452": {
									"entryPoint": null,
									"id": 452,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_msgSender_350": {
									"entryPoint": null,
									"id": 350,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 4138,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@allowlistMint_805": {
									"entryPoint": 2939,
									"id": 805,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@currentMintRound_534": {
									"entryPoint": null,
									"id": 534,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@getMaxSupply_992": {
									"entryPoint": 1149,
									"id": 992,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getTotalSupply_982": {
									"entryPoint": 2710,
									"id": 982,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isUserMinted_956": {
									"entryPoint": null,
									"id": 956,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@merkleRoot_536": {
									"entryPoint": null,
									"id": 536,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@nagaKidContract_532": {
									"entryPoint": null,
									"id": 532,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@owner_32": {
									"entryPoint": null,
									"id": 32,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@processProof_441": {
									"entryPoint": 4240,
									"id": 441,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@renounceOwnership_60": {
									"entryPoint": 1562,
									"id": 60,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@setMerkleRoot_693": {
									"entryPoint": 1616,
									"id": 693,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setNagaKidContract_651": {
									"entryPoint": 2144,
									"id": 651,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setRound_672": {
									"entryPoint": 4034,
									"id": 672,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transferOwnership_83": {
									"entryPoint": 2784,
									"id": 83,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@userMintedAmount_972": {
									"entryPoint": null,
									"id": 972,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@verify_384": {
									"entryPoint": 4218,
									"id": 384,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@withdrawCurrency_893": {
									"entryPoint": 1728,
									"id": 893,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@withdrawNFT_940": {
									"entryPoint": 2278,
									"id": 940,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@withdraw_848": {
									"entryPoint": 1264,
									"id": 848,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 4377,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 4846,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 4438,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 4539,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_bytes32": {
									"entryPoint": 4495,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_uint256t_bytes32": {
									"entryPoint": 4604,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 4812,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32": {
									"entryPoint": 4413,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_contract$_INagaKid_$494": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 4734,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_INagaKid_$494__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_01b030b8b5a56a7c757eaa200dd58c9c7b611dc637845adcfee0eed19fdd1265__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0c7f4d12e145bf6262f68ff2a7f1cb7b6f85bd1339b4c00b13a6687d963b9dc8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_2c2411020c41eae6dcfcf8c36dfeed2ad5167769d337d3eba6c16ddf45224e79__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_95d28383fddc0a416793ce8ec2405e6075664f03c74a9f16892baa9d68c29a32__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4759,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b80e76e4c9dd95c0a6a7ab97569124291f4757bb9e5ff42d1e95905b42144c82__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d90203a2446623747bbba855df65d033d63eb4b6a185c4640964fa4010f07517__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_eb4251b4ffd06c77b74f4c850691212ca55278808f7b03c1ff056c93470ea2ae__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 4897,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 4943,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 4875,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 4921,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_address": {
									"entryPoint": 4356,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:11988:12",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:12",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "115:76:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "125:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "137:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "148:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "133:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "133:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "125:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "167:9:12"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "178:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "160:25:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "160:25:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "84:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "95:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "106:4:12",
														"type": ""
													}
												],
												"src": "14:177:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "297:76:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "307:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "319:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "330:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "315:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "315:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "307:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "349:9:12"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "360:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "342:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "342:25:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "342:25:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "266:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "277:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "288:4:12",
														"type": ""
													}
												],
												"src": "196:177:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "423:86:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "487:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "496:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "499:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "489:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "489:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "489:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "446:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "457:5:12"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "472:3:12",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "477:1:12",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "468:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "468:11:12"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "481:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "464:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "464:19:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "453:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "453:31:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "443:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "443:42:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "436:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "436:50:12"
															},
															"nodeType": "YulIf",
															"src": "433:70:12"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "412:5:12",
														"type": ""
													}
												],
												"src": "378:131:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "584:177:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "630:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "639:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "642:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "632:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "632:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "632:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "605:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "614:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "601:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "601:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "626:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "597:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "597:32:12"
															},
															"nodeType": "YulIf",
															"src": "594:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "655:36:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "681:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "668:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "668:23:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "659:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "725:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "700:24:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "700:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "700:31:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "740:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "750:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "740:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "550:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "561:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "573:6:12",
														"type": ""
													}
												],
												"src": "514:247:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "836:110:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "882:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "891:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "894:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "884:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "884:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "884:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "857:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "866:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "853:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "853:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "878:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "849:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "849:32:12"
															},
															"nodeType": "YulIf",
															"src": "846:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "907:33:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "930:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "917:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "917:23:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "907:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "802:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "813:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "825:6:12",
														"type": ""
													}
												],
												"src": "766:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1038:301:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1084:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1093:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1096:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1086:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1086:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1086:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1059:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1068:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1055:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1055:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1080:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1051:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1051:32:12"
															},
															"nodeType": "YulIf",
															"src": "1048:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1109:36:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1135:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1122:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1122:23:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1113:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1179:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1154:24:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1154:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1154:31:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1194:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1204:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1194:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1218:47:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1250:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1261:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1246:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1246:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1233:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1233:32:12"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "1222:7:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "1299:7:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1274:24:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1274:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1274:33:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1316:17:12",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "1326:7:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1316:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "996:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1007:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1019:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1027:6:12",
														"type": ""
													}
												],
												"src": "951:388:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1445:102:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1455:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1467:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1478:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1463:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1463:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1455:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1497:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1512:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1528:3:12",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1533:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1524:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1524:11:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1537:1:12",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1520:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1520:19:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1508:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1508:32:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1490:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1490:51:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1490:51:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1414:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1425:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1436:4:12",
														"type": ""
													}
												],
												"src": "1344:203:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1638:177:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1684:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1693:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1696:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1686:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1686:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1686:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1659:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1668:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1655:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1655:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1680:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1651:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1651:32:12"
															},
															"nodeType": "YulIf",
															"src": "1648:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1709:36:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1735:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1722:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1722:23:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1713:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1779:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1754:24:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1754:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1754:31:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1794:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1804:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1794:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_INagaKid_$494",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1604:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1615:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1627:6:12",
														"type": ""
													}
												],
												"src": "1552:263:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1907:228:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1953:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1962:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1965:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1955:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1955:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1955:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1928:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1937:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1924:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1924:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1949:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1920:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1920:32:12"
															},
															"nodeType": "YulIf",
															"src": "1917:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1978:36:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2004:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1991:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1991:23:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1982:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2048:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2023:24:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2023:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2023:31:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2063:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2073:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2063:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2087:42:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2114:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2125:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2110:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2110:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2097:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2097:32:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2087:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1865:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1876:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1888:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1896:6:12",
														"type": ""
													}
												],
												"src": "1820:315:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2244:352:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2290:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2299:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2302:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2292:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2292:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2292:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2265:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2274:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2261:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2261:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2286:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2257:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2257:32:12"
															},
															"nodeType": "YulIf",
															"src": "2254:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2315:36:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2341:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2328:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2328:23:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2319:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2385:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2360:24:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2360:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2360:31:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2400:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2410:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2400:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2424:47:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2456:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2467:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2452:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2452:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2439:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2439:32:12"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "2428:7:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "2505:7:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2480:24:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2480:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2480:33:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2522:17:12",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "2532:7:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2522:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2548:42:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2575:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2586:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2571:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2571:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2558:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2558:32:12"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2548:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2194:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2205:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2217:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2225:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2233:6:12",
														"type": ""
													}
												],
												"src": "2140:456:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2718:102:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2728:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2740:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2751:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2736:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2736:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2728:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2770:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2785:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2801:3:12",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2806:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2797:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2797:11:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2810:1:12",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2793:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2793:19:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2781:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2781:32:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2763:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2763:51:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2763:51:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_INagaKid_$494__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2687:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2698:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2709:4:12",
														"type": ""
													}
												],
												"src": "2601:219:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2964:618:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3010:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3019:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3022:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3012:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3012:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3012:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2985:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2994:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2981:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2981:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3006:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2977:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2977:32:12"
															},
															"nodeType": "YulIf",
															"src": "2974:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3035:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3062:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3049:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3049:23:12"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3039:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3081:28:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3091:18:12",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3085:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3136:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3145:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3148:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3138:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3138:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3138:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3124:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3132:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3121:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3121:14:12"
															},
															"nodeType": "YulIf",
															"src": "3118:34:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3161:32:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3175:9:12"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3186:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3171:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3171:22:12"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3165:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3241:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3250:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3253:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3243:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3243:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3243:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3220:2:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3224:4:12",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3216:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3216:13:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3231:7:12"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3212:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3212:27:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3205:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3205:35:12"
															},
															"nodeType": "YulIf",
															"src": "3202:55:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3266:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3293:2:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3280:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3280:16:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3270:6:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3323:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3332:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3335:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3325:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3325:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3325:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3311:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3319:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3308:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3308:14:12"
															},
															"nodeType": "YulIf",
															"src": "3305:34:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3399:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3408:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3411:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3401:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3401:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3401:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3362:2:12"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3370:1:12",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "3373:6:12"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3366:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3366:14:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3358:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3358:23:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3383:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3354:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3354:34:12"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3390:7:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3351:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3351:47:12"
															},
															"nodeType": "YulIf",
															"src": "3348:67:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3424:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3438:2:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3442:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3434:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3434:13:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3424:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3456:16:12",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "3466:6:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3456:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3481:44:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3508:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3519:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3504:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3504:20:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3491:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3491:34:12"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3481:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3534:42:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3561:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3572:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3557:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3557:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3544:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3544:32:12"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "3534:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_uint256t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2906:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2917:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2929:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2937:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2945:6:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2953:6:12",
														"type": ""
													}
												],
												"src": "2825:757:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3682:92:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3692:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3704:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3715:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3700:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3700:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3692:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3734:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "3759:6:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3752:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3752:14:12"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3745:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3745:22:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3727:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3727:41:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3727:41:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3651:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3662:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3673:4:12",
														"type": ""
													}
												],
												"src": "3587:187:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3860:103:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3906:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3915:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3918:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3908:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3908:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3908:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3881:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3890:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3877:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3877:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3902:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3873:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3873:32:12"
															},
															"nodeType": "YulIf",
															"src": "3870:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3931:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3947:9:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3941:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3941:16:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3931:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3826:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3837:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3849:6:12",
														"type": ""
													}
												],
												"src": "3779:184:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4142:182:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4159:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4170:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4152:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4152:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4152:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4193:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4204:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4189:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4189:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4209:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4182:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4182:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4182:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4232:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4243:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4228:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4228:18:12"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4248:34:12",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4221:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4221:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4221:62:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4292:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4304:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4315:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4300:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4300:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4292:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4119:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4133:4:12",
														"type": ""
													}
												],
												"src": "3968:356:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4503:170:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4520:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4531:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4513:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4513:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4513:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4554:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4565:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4550:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4550:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4570:2:12",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4543:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4543:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4543:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4593:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4604:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4589:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4589:18:12"
																	},
																	{
																		"hexValue": "496e73756666696369656e742042616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4609:22:12",
																		"type": "",
																		"value": "Insufficient Balance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4582:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4582:50:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4582:50:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4641:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4653:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4664:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4649:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4649:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4641:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b80e76e4c9dd95c0a6a7ab97569124291f4757bb9e5ff42d1e95905b42144c82__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4480:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4494:4:12",
														"type": ""
													}
												],
												"src": "4329:344:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4869:14:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4871:10:12",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "4878:3:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4871:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4853:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4861:3:12",
														"type": ""
													}
												],
												"src": "4678:205:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5045:188:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5055:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5067:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5078:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5063:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5063:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5055:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5097:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5112:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5128:3:12",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5133:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5124:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5124:11:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5137:1:12",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "5120:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5120:19:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5108:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5108:32:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5090:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5090:51:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5090:51:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5161:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5172:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5157:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5157:18:12"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5177:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5150:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5150:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5150:34:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5204:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5215:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5200:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5200:18:12"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5220:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5193:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5193:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5193:34:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4998:9:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5009:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5017:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5025:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5036:4:12",
														"type": ""
													}
												],
												"src": "4888:345:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5367:119:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5377:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5389:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5400:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5385:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5385:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5377:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5419:9:12"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5430:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5412:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5412:25:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5412:25:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5457:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5468:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5453:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5453:18:12"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5473:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5446:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5446:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5446:34:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5328:9:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5339:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5347:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5358:4:12",
														"type": ""
													}
												],
												"src": "5238:248:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5620:145:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5630:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5642:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5653:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5638:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5638:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5630:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5672:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5687:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5703:3:12",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5708:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5699:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5699:11:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5712:1:12",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "5695:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5695:19:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5683:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5683:32:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5665:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5665:51:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5665:51:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5736:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5747:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5732:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5732:18:12"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5752:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5725:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5725:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5725:34:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5581:9:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5592:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5600:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5611:4:12",
														"type": ""
													}
												],
												"src": "5491:274:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5848:199:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5894:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5903:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5906:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5896:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5896:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5896:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5869:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5878:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5865:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5865:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5890:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5861:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5861:32:12"
															},
															"nodeType": "YulIf",
															"src": "5858:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5919:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5938:9:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5932:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5932:16:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5923:5:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6001:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6010:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6013:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6003:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6003:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6003:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5970:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "5991:5:12"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "5984:6:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5984:13:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5977:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5977:21:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5967:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5967:32:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5960:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5960:40:12"
															},
															"nodeType": "YulIf",
															"src": "5957:60:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6026:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "6036:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6026:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5814:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5825:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5837:6:12",
														"type": ""
													}
												],
												"src": "5770:277:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6237:262:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6247:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6259:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6270:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6255:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6255:19:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6247:4:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6283:29:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6301:3:12",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6306:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6297:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6297:11:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6310:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "6293:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6293:19:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "6287:2:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6328:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6343:6:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6351:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6339:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6339:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6321:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6321:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6321:34:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6375:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6386:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6371:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6371:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "6395:6:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6403:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6391:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6391:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6364:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6364:43:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6364:43:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6427:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6438:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6423:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6423:18:12"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6443:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6416:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6416:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6416:34:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6470:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6481:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6466:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6466:18:12"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "6486:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6459:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6459:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6459:34:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6182:9:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "6193:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "6201:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6209:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6217:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6228:4:12",
														"type": ""
													}
												],
												"src": "6052:447:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6633:175:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6643:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6655:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6666:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6651:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6651:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6643:4:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6678:29:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6696:3:12",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6701:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6692:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6692:11:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6705:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "6688:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6688:19:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "6682:2:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6723:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6738:6:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6746:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6734:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6734:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6716:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6716:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6716:34:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6770:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6781:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6766:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6766:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "6790:6:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6798:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6786:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6786:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6759:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6759:43:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6759:43:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6594:9:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6605:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6613:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6624:4:12",
														"type": ""
													}
												],
												"src": "6504:304:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6894:170:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6940:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6949:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6952:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6942:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6942:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6942:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6915:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6924:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6911:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6911:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6936:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6907:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6907:32:12"
															},
															"nodeType": "YulIf",
															"src": "6904:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6965:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6984:9:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6978:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6978:16:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "6969:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7028:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "7003:24:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7003:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7003:31:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7043:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "7053:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "7043:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6860:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6871:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6883:6:12",
														"type": ""
													}
												],
												"src": "6813:251:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7243:227:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7260:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7271:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7253:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7253:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7253:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7294:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7305:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7290:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7290:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7310:2:12",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7283:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7283:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7283:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7333:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7344:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7329:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7329:18:12"
																	},
																	{
																		"hexValue": "5468697320746f6b656e4964206973206e6f74206f776e656420627920636f6e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7349:34:12",
																		"type": "",
																		"value": "This tokenId is not owned by con"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7322:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7322:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7322:62:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7404:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7415:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7400:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7400:18:12"
																	},
																	{
																		"hexValue": "7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7420:7:12",
																		"type": "",
																		"value": "tract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7393:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7393:35:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7393:35:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7437:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7449:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7460:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7445:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7445:19:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7437:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_95d28383fddc0a416793ce8ec2405e6075664f03c74a9f16892baa9d68c29a32__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7220:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7234:4:12",
														"type": ""
													}
												],
												"src": "7069:401:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7632:218:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7642:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7654:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7665:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7650:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7650:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7642:4:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7677:29:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7695:3:12",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7700:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7691:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7691:11:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7704:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7687:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7687:19:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7681:2:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7722:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7737:6:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7745:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7733:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7733:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7715:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7715:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7715:34:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7769:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7780:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7765:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7765:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "7789:6:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7797:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7785:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7785:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7758:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7758:43:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7758:43:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7821:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7832:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7817:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7817:18:12"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "7837:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7810:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7810:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7810:34:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7585:9:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7596:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7604:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7612:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7623:4:12",
														"type": ""
													}
												],
												"src": "7475:375:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8029:228:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8046:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8057:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8039:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8039:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8039:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8080:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8091:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8076:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8076:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8096:2:12",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8069:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8069:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8069:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8119:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8130:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8115:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8115:18:12"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8135:34:12",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8108:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8108:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8108:62:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8190:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8201:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8186:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8186:18:12"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8206:8:12",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8179:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8179:36:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8179:36:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8224:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8236:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8247:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8232:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8232:19:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8224:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8006:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8020:4:12",
														"type": ""
													}
												],
												"src": "7855:402:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8436:181:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8453:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8464:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8446:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8446:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8446:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8487:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8498:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8483:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8483:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8503:2:12",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8476:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8476:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8476:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8526:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8537:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8522:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8522:18:12"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8542:33:12",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8515:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8515:61:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8515:61:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8585:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8597:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8608:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8593:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8593:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8585:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8413:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8427:4:12",
														"type": ""
													}
												],
												"src": "8262:355:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8796:171:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8813:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8824:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8806:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8806:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8806:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8847:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8858:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8843:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8843:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8863:2:12",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8836:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8836:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8836:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8886:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8897:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8882:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8882:18:12"
																	},
																	{
																		"hexValue": "4d696e74206973206e6f7420617070726f7665642e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8902:23:12",
																		"type": "",
																		"value": "Mint is not approved."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8875:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8875:51:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8875:51:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8935:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8947:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8958:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8943:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8943:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8935:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_eb4251b4ffd06c77b74f4c850691212ca55278808f7b03c1ff056c93470ea2ae__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8773:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8787:4:12",
														"type": ""
													}
												],
												"src": "8622:345:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9146:229:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9163:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9174:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9156:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9156:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9156:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9197:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9208:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9193:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9193:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9213:2:12",
																		"type": "",
																		"value": "39"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9186:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9186:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9186:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9236:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9247:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9232:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9232:18:12"
																	},
																	{
																		"hexValue": "436f6e747261637420617265206e6f7420696e2074686973206d696e74696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9252:34:12",
																		"type": "",
																		"value": "Contract are not in this minting"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9225:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9225:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9225:62:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9307:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9318:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9303:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9303:18:12"
																	},
																	{
																		"hexValue": "20726f756e642e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9323:9:12",
																		"type": "",
																		"value": " round."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9296:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9296:37:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9296:37:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9342:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9354:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9365:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9350:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9350:19:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9342:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_01b030b8b5a56a7c757eaa200dd58c9c7b611dc637845adcfee0eed19fdd1265__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9123:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9137:4:12",
														"type": ""
													}
												],
												"src": "8972:403:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9412:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9429:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9436:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9441:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "9432:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9432:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9422:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9422:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9422:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9469:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9472:4:12",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9462:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9462:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9462:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9493:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9496:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "9486:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9486:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9486:15:12"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "9380:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9560:80:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9587:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9589:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9589:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9589:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9576:1:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "9583:1:12"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "9579:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9579:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9573:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9573:13:12"
															},
															"nodeType": "YulIf",
															"src": "9570:39:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9618:16:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9629:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9632:1:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9625:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9625:9:12"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "9618:3:12"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9543:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9546:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "9552:3:12",
														"type": ""
													}
												],
												"src": "9512:128:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9819:161:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9836:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9847:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9829:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9829:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9829:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9870:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9881:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9866:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9866:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9886:2:12",
																		"type": "",
																		"value": "11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9859:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9859:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9859:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9909:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9920:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9905:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9905:18:12"
																	},
																	{
																		"hexValue": "4f76657220737570706c79",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9925:13:12",
																		"type": "",
																		"value": "Over supply"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9898:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9898:41:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9898:41:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9948:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9960:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9971:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9956:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9956:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9948:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9796:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9810:4:12",
														"type": ""
													}
												],
												"src": "9645:335:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10159:173:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10176:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10187:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10169:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10169:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10169:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10210:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10221:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10206:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10206:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10226:2:12",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10199:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10199:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10199:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10249:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10260:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10245:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10245:18:12"
																	},
																	{
																		"hexValue": "596f752061726520616c7265616479206d696e7465642e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10265:25:12",
																		"type": "",
																		"value": "You are already minted."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10238:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10238:53:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10238:53:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10300:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10312:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10323:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10308:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10308:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10300:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0c7f4d12e145bf6262f68ff2a7f1cb7b6f85bd1339b4c00b13a6687d963b9dc8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10136:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10150:4:12",
														"type": ""
													}
												],
												"src": "9985:347:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10511:180:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10528:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10539:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10521:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10521:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10521:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10562:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10573:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10558:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10558:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10578:2:12",
																		"type": "",
																		"value": "30"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10551:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10551:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10551:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10601:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10612:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10597:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10597:18:12"
																	},
																	{
																		"hexValue": "436f6e7472616374204d696e74206973206e6f7420617070726f7665642e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10617:32:12",
																		"type": "",
																		"value": "Contract Mint is not approved."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10590:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10590:60:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10590:60:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10659:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10671:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10682:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10667:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10667:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10659:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_2c2411020c41eae6dcfcf8c36dfeed2ad5167769d337d3eba6c16ddf45224e79__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10488:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10502:4:12",
														"type": ""
													}
												],
												"src": "10337:354:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10871:184:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10888:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10901:2:12",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "10905:6:12"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "10897:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10897:15:12"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10918:26:12",
																						"type": "",
																						"value": "0xffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "10914:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10914:31:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10893:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10893:53:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10881:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10881:66:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10881:66:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "10967:3:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10972:2:12",
																				"type": "",
																				"value": "20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10963:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10963:12:12"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "10977:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10956:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10956:28:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10956:28:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "11004:3:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11009:2:12",
																				"type": "",
																				"value": "52"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11000:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11000:12:12"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "11014:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10993:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10993:28:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10993:28:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11030:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11041:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11046:2:12",
																		"type": "",
																		"value": "84"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11037:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11037:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11030:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10831:3:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10836:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10844:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10852:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10863:3:12",
														"type": ""
													}
												],
												"src": "10696:359:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11234:227:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11251:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11262:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11244:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11244:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11244:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11285:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11296:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11281:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11281:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11301:2:12",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11274:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11274:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11274:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11324:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11335:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11320:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11320:18:12"
																	},
																	{
																		"hexValue": "556e617574686f72697a65642057686974656c6973744d696e74205468697320",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11340:34:12",
																		"type": "",
																		"value": "Unauthorized WhitelistMint This "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11313:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11313:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11313:62:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11395:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11406:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11391:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11391:18:12"
																	},
																	{
																		"hexValue": "557365722e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11411:7:12",
																		"type": "",
																		"value": "User."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11384:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11384:35:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11384:35:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11428:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11440:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11451:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11436:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11436:19:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11428:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d90203a2446623747bbba855df65d033d63eb4b6a185c4640964fa4010f07517__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11211:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11225:4:12",
														"type": ""
													}
												],
												"src": "11060:401:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11595:119:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11605:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11617:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11628:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11613:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11613:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11605:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11647:9:12"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11658:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11640:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11640:25:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11640:25:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11685:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11696:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11681:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11681:18:12"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11701:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11674:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11674:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11674:34:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11556:9:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11567:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11575:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11586:4:12",
														"type": ""
													}
												],
												"src": "11466:248:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11751:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11768:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11775:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11780:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "11771:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11771:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11761:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11761:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11761:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11808:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11811:4:12",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11801:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11801:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11801:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11832:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11835:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11825:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11825:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11825:15:12"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "11719:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11898:88:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11929:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "11931:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11931:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11931:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11914:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11925:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "11921:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11921:6:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "11911:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11911:17:12"
															},
															"nodeType": "YulIf",
															"src": "11908:43:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11960:20:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11971:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11978:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11967:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11967:13:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "11960:3:12"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11880:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "11890:3:12",
														"type": ""
													}
												],
												"src": "11851:135:12"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_contract$_INagaKid_$494(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_contract$_INagaKid_$494__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 0x20)\n        value1 := length\n        value2 := calldataload(add(headStart, 0x20))\n        value3 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b80e76e4c9dd95c0a6a7ab97569124291f4757bb9e5ff42d1e95905b42144c82__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Insufficient Balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_95d28383fddc0a416793ce8ec2405e6075664f03c74a9f16892baa9d68c29a32__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"This tokenId is not owned by con\")\n        mstore(add(headStart, 96), \"tract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_eb4251b4ffd06c77b74f4c850691212ca55278808f7b03c1ff056c93470ea2ae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Mint is not approved.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_01b030b8b5a56a7c757eaa200dd58c9c7b611dc637845adcfee0eed19fdd1265__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Contract are not in this minting\")\n        mstore(add(headStart, 96), \" round.\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Over supply\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0c7f4d12e145bf6262f68ff2a7f1cb7b6f85bd1339b4c00b13a6687d963b9dc8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"You are already minted.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2c2411020c41eae6dcfcf8c36dfeed2ad5167769d337d3eba6c16ddf45224e79__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"Contract Mint is not approved.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 20), value1)\n        mstore(add(pos, 52), value2)\n        end := add(pos, 84)\n    }\n    function abi_encode_tuple_t_stringliteral_d90203a2446623747bbba855df65d033d63eb4b6a185c4640964fa4010f07517__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"Unauthorized WhitelistMint This \")\n        mstore(add(headStart, 96), \"User.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n}",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x135 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB5ABAFA1 GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xEF5FE79F GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xEF5FE79F EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xF500CDFC EQ PUSH2 0x3C0 JUMPI DUP1 PUSH4 0xF6B48E55 EQ PUSH2 0x3F4 JUMPI DUP1 PUSH4 0xFF05FE4A EQ PUSH2 0x407 JUMPI DUP1 PUSH4 0xFFDC6129 EQ PUSH2 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB5ABAFA1 EQ PUSH2 0x2BE JUMPI DUP1 PUSH4 0xBFF863EC EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0xC4E41B22 EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0xDF4E5881 EQ PUSH2 0x336 JUMPI DUP1 PUSH4 0xE02023A1 EQ PUSH2 0x356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5B94BBC3 GT PUSH2 0xFD JUMPI DUP1 PUSH4 0x5B94BBC3 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x8407ECC4 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x9E6C8855 EQ PUSH2 0x29E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA25DEA9 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x24C37A85 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x4C0F38C2 EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0x1C1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH32 0xB3C595E55271590809F54E2F4FC3A582754F45B104DD3C41666E2AD310493DB3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x47D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0x1119 JUMP JUMPDEST PUSH2 0x4F0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH32 0x5C8C0CE107274AD0569BD760C3D2406C1ED72C697935F3F965BD096C5CDEDEE4 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x223 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x61A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x247 CALLDATASIZE PUSH1 0x4 PUSH2 0x113D JUMP JUMPDEST PUSH2 0x650 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x1156 JUMP JUMPDEST PUSH2 0x6C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x159 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x2B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1119 JUMP JUMPDEST PUSH2 0x860 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x2D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x118F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x31C CALLDATASIZE PUSH1 0x4 PUSH2 0x11BB JUMP JUMPDEST PUSH2 0x8E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0xA96 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x286 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH32 0x5D8E12C39142FF96D79D04D15D1BA1269E4FE57BB9D26F43523628B34BA108EC DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x396 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x3BB CALLDATASIZE PUSH1 0x4 PUSH2 0x1119 JUMP JUMPDEST PUSH2 0xAE0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH32 0x68E7D51FDB912CB107DDA2E59B053D87FCCA666DD0EF5339CD3474CCB5276BBA DUP2 JUMP JUMPDEST PUSH2 0x1E1 PUSH2 0x402 CALLDATASIZE PUSH1 0x4 PUSH2 0x11FC JUMP JUMPDEST PUSH2 0xB7B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH2 0x422 CALLDATASIZE PUSH1 0x4 PUSH2 0x113D JUMP JUMPDEST PUSH2 0xFC2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46D PUSH2 0x442 CALLDATASIZE PUSH1 0x4 PUSH2 0x118F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x159 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD5ABEB01 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xD5ABEB01 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4EB SWAP2 SWAP1 PUSH2 0x127E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x523 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SELFBALANCE DUP1 PUSH2 0x568 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742042616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5B5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5BA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x5C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE TIMESTAMP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF279E6A1F5E320CCA91135676D9CB6E44CA8A08C0B88342BCDB1144F6511B568 SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x644 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH2 0x64E PUSH1 0x0 PUSH2 0x102A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x67A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x123D88BA82600DFC3F219F8885C691B0FF020CAA535666874B3F5174973757FE SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x731 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x755 SWAP2 SWAP1 PUSH2 0x127E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x79E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742042616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x811 SWAP2 SWAP1 PUSH2 0x12CC JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE TIMESTAMP PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xB818A975F91276DF8BA59329BECBC23C793DF0D503C19AC296C3C372A1FA0461 SWAP1 PUSH1 0x80 ADD PUSH2 0x60D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x88A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 SWAP2 PUSH32 0xABDF056C85A221FCB31D0366C4475B6B2C613DF2EEEA951A9FCB3E1A8595D973 SWAP2 ADD PUSH2 0x60D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x910 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE ADDRESS SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x957 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x97B SWAP2 SWAP1 PUSH2 0x12EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468697320746F6B656E4964206973206E6F74206F776E656420627920636F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1D1C9858DD PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x51A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE DUP4 AND SWAP1 PUSH4 0x42842E0E SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA43 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP3 MSTORE DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE TIMESTAMP PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x127A8D3F57942833F6930572BCE52AD882683E36EEB5830D199D3FA4BFA9467 SWAP3 POP PUSH1 0x80 ADD SWAP1 POP PUSH2 0x60D JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB6F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x51A JUMP JUMPDEST PUSH2 0xB78 DUP2 PUSH2 0x102A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0xBCD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE DUP1 PUSH2 0xC17 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x26B4B73A1034B9903737BA1030B8383937BB32B217 PUSH1 0x59 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST DUP1 PUSH1 0x3 SLOAD EQ PUSH2 0xC78 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E747261637420617265206E6F7420696E2074686973206D696E74696E67 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x103937BAB73217 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x51A JUMP JUMPDEST PUSH2 0xC80 PUSH2 0x47D JUMP JUMPDEST DUP3 PUSH2 0xC89 PUSH2 0xA96 JUMP JUMPDEST PUSH2 0xC93 SWAP2 SWAP1 PUSH2 0x1321 JUMP JUMPDEST LT PUSH2 0xCCE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x4F76657220737570706C79 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752061726520616C7265616479206D696E7465642E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x55138F0D PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xAA271E1A SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDA5 SWAP2 SWAP1 PUSH2 0x12CC JUMP JUMPDEST PUSH2 0xDF1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E7472616374204D696E74206973206E6F7420617070726F7665642E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51A JUMP JUMPDEST PUSH2 0xE74 DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x54 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH1 0x74 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x107A JUMP JUMPDEST PUSH2 0xECE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E617574686F72697A65642057686974656C6973744D696E74205468697320 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x2AB9B2B917 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x51A JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP3 DUP3 MSTORE PUSH1 0x6 DUP2 MSTORE DUP3 DUP3 KECCAK256 DUP5 DUP4 MSTORE SWAP1 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xF15 SWAP1 DUP5 SWAP1 PUSH2 0x1321 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x28512065 PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA1448194 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE CALLER SWAP4 POP PUSH32 0x25B428DFDE728CCFADDAD7E29E4AC23C24ED7FD1A6E3E3F91894A9A073F5DFFF SWAP3 POP ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 DUP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFEC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51A SWAP1 PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x521EC96875CA228CD2FC1DBD4C927A34328C9CE1A83BCB8C1F633F012C90D785 SWAP2 ADD PUSH2 0x6B4 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1087 DUP6 DUP5 PUSH2 0x1090 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x10FC JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x10B2 JUMPI PUSH2 0x10B2 PUSH2 0x1339 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0x10D8 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP PUSH2 0x10E9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0x10F4 DUP2 PUSH2 0x134F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1095 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x112B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1136 DUP2 PUSH2 0x1104 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x114F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1174 DUP2 PUSH2 0x1104 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1184 DUP2 PUSH2 0x1104 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x11AD DUP2 PUSH2 0x1104 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x11DB DUP2 PUSH2 0x1104 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x11EB DUP2 PUSH2 0x1104 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x122A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x123E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x124D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP10 SWAP1 SWAP9 POP SWAP2 DUP8 ADD CALLDATALOAD SWAP7 PUSH1 0x40 ADD CALLDATALOAD SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1136 DUP2 PUSH2 0x1104 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1334 JUMPI PUSH2 0x1334 PUSH2 0x130B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1361 JUMPI PUSH2 0x1361 PUSH2 0x130B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY DUP13 MSTORE8 PUSH5 0x63B06C0F8D 0xE6 STATICCALL MUL LOG0 SWAP6 0xAB 0x49 0xA6 SWAP5 0x24 CALLCODE SELFDESTRUCT 0x49 CREATE2 PUSH3 0x217936 SWAP11 PUSH9 0x32592E64736F6C6343 STOP ADDMOD 0xF STOP CALLER ",
							"sourceMap": "395:4998:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;925:100;;;;;;;;;;-1:-1:-1;925:100:8;959:66;925:100;;;;;160:25:12;;;148:2;133:18;925:100:8;;;;;;;;611:84;;;;;;;;;;;;660:35;611:84;;1189:25;;;;;;;;;;;;;;;;5281:107;;;;;;;;;;;;;:::i;3789:338::-;;;;;;;;;;-1:-1:-1;3789:338:8;;;;;:::i;:::-;;:::i;:::-;;772:76;;;;;;;;;;;;817:31;772:76;;1668:101:0;;;;;;;;;;;;;:::i;2638:220:8:-;;;;;;;;;;-1:-1:-1;2638:220:8;;;;;:::i;:::-;;:::i;4135:377::-;;;;;;;;;;-1:-1:-1;4135:377:8;;;;;:::i;:::-;;:::i;1036:85:0:-;;;;;;;;;;-1:-1:-1;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;1036:85;;;-1:-1:-1;;;;;1508:32:12;;;1490:51;;1478:2;1463:18;1036:85:0;1344:203:12;2137:288:8;;;;;;;;;;-1:-1:-1;2137:288:8;;;;;:::i;:::-;;:::i;5011:143::-;;;;;;;;;;-1:-1:-1;5011:143:8;;;;;:::i;:::-;-1:-1:-1;;;;;5114:24:8;;;;5087:7;5114:24;;;:17;:24;;;;;;;;:32;;;;;;;;;5011:143;4520:343;;;;;;;;;;-1:-1:-1;4520:343:8;;;;;:::i;:::-;;:::i;5162:111::-;;;;;;;;;;;;;:::i;1113:31::-;;;;;;;;;;-1:-1:-1;1113:31:8;;;;-1:-1:-1;;;;;1113:31:8;;;1038:66;;;;;;;;;;;;1078:26;1038:66;;1151:31;;;;;;;;;;;;;;;;1918:198:0;;;;;;;;;;-1:-1:-1;1918:198:0;;;;;:::i;:::-;;:::i;454:80:8:-;;;;;;;;;;;;501:33;454:80;;2866:915;;;;;;:::i;:::-;;:::i;2433:197::-;;;;;;;;;;-1:-1:-1;2433:197:8;;;;;:::i;:::-;;:::i;4871:132::-;;;;;;;;;;-1:-1:-1;4871:132:8;;;;;:::i;:::-;-1:-1:-1;;;;;4967:20:8;;;;4943:4;4967:20;;;:13;:20;;;;;;;;:28;;;;;;;;;;;4871:132;;;;3752:14:12;;3745:22;3727:41;;3715:2;3700:18;4871:132:8;3587:187:12;5281:107:8;5353:15;;:27;;;-1:-1:-1;;;5353:27:8;;;;5326:7;;-1:-1:-1;;;;;5353:15:8;;:25;;:27;;;;;;;;;;;;;;:15;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5346:34;;5281:107;:::o;3789:338::-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:4;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;;;;;;;;;3873:21:8::1;3913::::0;3905:54:::1;;;::::0;-1:-1:-1;;;3905:54:8;;4531:2:12;3905:54:8::1;::::0;::::1;4513:21:12::0;4570:2;4550:18;;;4543:30;-1:-1:-1;;;4589:18:12;;;4582:50;4649:18;;3905:54:8::1;4329:344:12::0;3905:54:8::1;3971:11;3987:3;-1:-1:-1::0;;;;;3987:8:8::1;4003:17;3987:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3970:56;;;4045:6;4037:15;;;::::0;::::1;;4070:49;::::0;;-1:-1:-1;;;;;5108:32:12;;5090:51;;5172:2;5157:18;;5150:34;;;4103:15:8::1;5200:18:12::0;;;5193:34;;;;4070:49:8::1;::::0;5078:2:12;5063:18;4070:49:8::1;;;;;;;;3837:290;;3789:338:::0;:::o;1668:101:0:-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:4;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;2638:220:8:-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:4;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;2738:10:8::1;::::0;;2759:24;;;;2801:49:::1;::::0;;5412:25:12;;;5468:2;5453:18;;5446:34;;;2801:49:8::1;::::0;5385:18:12;2801:49:8::1;;;;;;;;2699:159;2638:220:::0;:::o;4135:377::-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:4;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;4245:42:8::1;::::0;-1:-1:-1;;;4245:42:8;;4281:4:::1;4245:42;::::0;::::1;1490:51:12::0;4220:22:8::1;::::0;-1:-1:-1;;;;;4245:27:8;::::1;::::0;::::1;::::0;1463:18:12;;4245:42:8::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4220:67;;4326:1;4306:17;:21;4298:54;;;::::0;-1:-1:-1;;;4298:54:8;;4531:2:12;4298:54:8::1;::::0;::::1;4513:21:12::0;4570:2;4550:18;;;4543:30;-1:-1:-1;;;4589:18:12;;;4582:50;4649:18;;4298:54:8::1;4329:344:12::0;4298:54:8::1;4363:50;::::0;-1:-1:-1;;;4363:50:8;;-1:-1:-1;;;;;5683:32:12;;;4363:50:8::1;::::0;::::1;5665:51:12::0;5732:18;;;5725:34;;;4363:26:8;::::1;::::0;::::1;::::0;5638:18:12;;4363:50:8::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;4439:65:8::1;::::0;;-1:-1:-1;;;;;6339:15:12;;;6321:34;;6391:15;;6386:2;6371:18;;6364:43;6423:18;;;6416:34;;;4488:15:8::1;6481:2:12::0;6466:18;;6459:34;4439:65:8::1;::::0;6270:3:12;6255:19;4439:65:8::1;6052:447:12::0;2137:288:8;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:4;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;2244:15:8::1;::::0;;-1:-1:-1;;;;;2271:26:8;;::::1;-1:-1:-1::0;;;;;;2271:26:8;::::1;::::0;::::1;::::0;;;2366:51:::1;::::0;;2244:15;;;::::1;6716:34:12::0;;;6781:2;6766:18;;6759:43;;;;2271:26:8;;2366:51:::1;::::0;6651:18:12;2366:51:8::1;6504:304:12::0;4520:343:8;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:4;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;4620:31:8::1;::::0;-1:-1:-1;;;4620:31:8;;::::1;::::0;::::1;160:25:12::0;;;4663:4:8::1;::::0;-1:-1:-1;;;;;4620:21:8;::::1;::::0;::::1;::::0;133:18:12;;4620:31:8::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;4620:48:8::1;;4612:98;;;::::0;-1:-1:-1;;;4612:98:8;;7271:2:12;4612:98:8::1;::::0;::::1;7253:21:12::0;7310:2;7290:18;;;7283:30;7349:34;7329:18;;;7322:62;-1:-1:-1;;;7400:18:12;;;7393:35;7445:19;;4612:98:8::1;7069:401:12::0;4612:98:8::1;4723:60;::::0;-1:-1:-1;;;4723:60:8;;4762:4:::1;4723:60;::::0;::::1;7715:34:12::0;-1:-1:-1;;;;;7785:15:12;;;7765:18;;;7758:43;7817:18;;;7810:34;;;4723:30:8;::::1;::::0;::::1;::::0;7650:18:12;;4723:60:8::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;4809:46:8::1;::::0;;-1:-1:-1;;;;;6339:15:12;;;6321:34;;6391:15;;6386:2;6371:18;;6364:43;6423:18;;;6416:34;;;4839:15:8::1;6481:2:12::0;6466:18;;6459:34;4809:46:8::1;::::0;-1:-1:-1;6270:3:12;6255:19;;-1:-1:-1;4809:46:8::1;6052:447:12::0;5162:111:8;5236:15;;:29;;;-1:-1:-1;;;5236:29:8;;;;5209:7;;-1:-1:-1;;;;;5236:15:8;;:27;;:29;;;;;;;;;;;;;;:15;:29;;;;;;;;;;;;;;1918:198:0;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:4;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;8057:2:12;1998:73:0::1;::::0;::::1;8039:21:12::0;8096:2;8076:18;;;8069:30;8135:34;8115:18;;;8108:62;-1:-1:-1;;;8186:18:12;;;8179:36;8232:19;;1998:73:0::1;7855:402:12::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;2866:915:8:-;1744:1:1;2325:7;;:19;2317:63;;;;-1:-1:-1;;;2317:63:1;;8464:2:12;2317:63:1;;;8446:21:12;8503:2;8483:18;;;8476:30;8542:33;8522:18;;;8515:61;8593:18;;2317:63:1;8262:355:12;2317:63:1;1744:1;2455:7;:18;2996:6:8;2988:50:::1;;;::::0;-1:-1:-1;;;2988:50:8;;8824:2:12;2988:50:8::1;::::0;::::1;8806:21:12::0;8863:2;8843:18;;;8836:30;-1:-1:-1;;;8882:18:12;;;8875:51;8943:18;;2988:50:8::1;8622:345:12::0;2988:50:8::1;3077:6;3057:16;;:26;3049:78;;;::::0;-1:-1:-1;;;3049:78:8;;9174:2:12;3049:78:8::1;::::0;::::1;9156:21:12::0;9213:2;9193:18;;;9186:30;9252:34;9232:18;;;9225:62;-1:-1:-1;;;9303:18:12;;;9296:37;9350:19;;3049:78:8::1;8972:403:12::0;3049:78:8::1;3175:14;:12;:14::i;:::-;3165:7;3146:16;:14;:16::i;:::-;:26;;;;:::i;:::-;:43;3138:67;;;::::0;-1:-1:-1;;;3138:67:8;;9847:2:12;3138:67:8::1;::::0;::::1;9829:21:12::0;9886:2;9866:18;;;9859:30;-1:-1:-1;;;9905:18:12;;;9898:41;9956:18;;3138:67:8::1;9645:335:12::0;3138:67:8::1;3237:10;4943:4:::0;4967:20;;;:13;:20;;;;;;;;:28;;;;;;;;;;;3224:40:::1;3216:76;;;::::0;-1:-1:-1;;;3216:76:8;;10187:2:12;3216:76:8::1;::::0;::::1;10169:21:12::0;10226:2;10206:18;;;10199:30;10265:25;10245:18;;;10238:53;10308:18;;3216:76:8::1;9985:347:12::0;3216:76:8::1;3311:15;::::0;:39:::1;::::0;-1:-1:-1;;;3311:39:8;;3344:4:::1;3311:39;::::0;::::1;1490:51:12::0;-1:-1:-1;;;;;3311:15:8;;::::1;::::0;:24:::1;::::0;1463:18:12;;3311:39:8::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3303:82;;;::::0;-1:-1:-1;;;3303:82:8;;10539:2:12;3303:82:8::1;::::0;::::1;10521:21:12::0;10578:2;10558:18;;;10551:30;10617:32;10597:18;;;10590:60;10667:18;;3303:82:8::1;10337:354:12::0;3303:82:8::1;3404:96;3423:6;;3404:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;;3431:10:8::1;::::0;3453:45:::1;::::0;-1:-1:-1;;3470:10:8::1;10901:2:12::0;10897:15;10893:53;3453:45:8::1;::::0;::::1;10881:66:12::0;10963:12;;;10956:28;;;11000:12;;;10993:28;;;3431:10:8;;-1:-1:-1;11037:12:12;;;-1:-1:-1;3453:45:8::1;;;;;;;;;;;;3443:56;;;;;;3404:18;:96::i;:::-;3396:146;;;::::0;-1:-1:-1;;;3396:146:8;;11262:2:12;3396:146:8::1;::::0;::::1;11244:21:12::0;11301:2;11281:18;;;11274:30;11340:34;11320:18;;;11313:62;-1:-1:-1;;;11391:18:12;;;11384:35;11436:19;;3396:146:8::1;11060:401:12::0;3396:146:8::1;3569:10;3555:25;::::0;;;:13:::1;:25;::::0;;;;;;;:33;;;;;;;;:40;;-1:-1:-1;;3555:40:8::1;3591:4;3555:40;::::0;;3606:29;;;:17:::1;:29:::0;;;;;:37;;;;;;;;:48;;3647:7;;3555:25;3606:48:::1;::::0;3647:7;;3606:48:::1;:::i;:::-;::::0;;;-1:-1:-1;;3667:15:8::1;::::0;:44:::1;::::0;-1:-1:-1;;;3667:44:8;;3692:10:::1;3667:44;::::0;::::1;5665:51:12::0;5732:18;;;5725:34;;;-1:-1:-1;;;;;3667:15:8;;::::1;::::0;:24:::1;::::0;5638:18:12;;3667:44:8::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;3729:44:8::1;::::0;;5412:25:12;;;3757:15:8::1;5468:2:12::0;5453:18;;5446:34;3736:10:8::1;::::0;-1:-1:-1;3729:44:8::1;::::0;-1:-1:-1;5385:18:12;3729:44:8::1;;;;;;;-1:-1:-1::0;;1701:1:1;2628:22;;-1:-1:-1;;2866:915:8:o;2433:197::-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:4;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;2518:16:8::1;::::0;;2545:25;;;;2588:34:::1;::::0;;5412:25:12;;;5468:2;5453:18;;5446:34;;;2588::8::1;::::0;5385:18:12;2588:34:8::1;5238:248:12::0;2270:187:0;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;1154:184:5:-;1275:4;1327;1298:25;1311:5;1318:4;1298:12;:25::i;:::-;:33;;1154:184;-1:-1:-1;;;;1154:184:5:o;1689:662::-;1772:7;1814:4;1772:7;1828:488;1852:5;:12;1848:1;:16;1828:488;;;1885:20;1908:5;1914:1;1908:8;;;;;;;;:::i;:::-;;;;;;;1885:31;;1950:12;1934;:28;1930:376;;2425:13;2473:15;;;2508:4;2501:15;;;2554:4;2538:21;;2060:57;;1930:376;;;2425:13;2473:15;;;2508:4;2501:15;;;2554:4;2538:21;;2234:57;;1930:376;-1:-1:-1;1866:3:5;;;;:::i;:::-;;;;1828:488;;;-1:-1:-1;2332:12:5;1689:662;-1:-1:-1;;;1689:662:5:o;378:131:12:-;-1:-1:-1;;;;;453:31:12;;443:42;;433:70;;499:1;496;489:12;514:247;573:6;626:2;614:9;605:7;601:23;597:32;594:52;;;642:1;639;632:12;594:52;681:9;668:23;700:31;725:5;700:31;:::i;:::-;750:5;514:247;-1:-1:-1;;;514:247:12:o;766:180::-;825:6;878:2;866:9;857:7;853:23;849:32;846:52;;;894:1;891;884:12;846:52;-1:-1:-1;917:23:12;;766:180;-1:-1:-1;766:180:12:o;951:388::-;1019:6;1027;1080:2;1068:9;1059:7;1055:23;1051:32;1048:52;;;1096:1;1093;1086:12;1048:52;1135:9;1122:23;1154:31;1179:5;1154:31;:::i;:::-;1204:5;-1:-1:-1;1261:2:12;1246:18;;1233:32;1274:33;1233:32;1274:33;:::i;:::-;1326:7;1316:17;;;951:388;;;;;:::o;1820:315::-;1888:6;1896;1949:2;1937:9;1928:7;1924:23;1920:32;1917:52;;;1965:1;1962;1955:12;1917:52;2004:9;1991:23;2023:31;2048:5;2023:31;:::i;:::-;2073:5;2125:2;2110:18;;;;2097:32;;-1:-1:-1;;;1820:315:12:o;2140:456::-;2217:6;2225;2233;2286:2;2274:9;2265:7;2261:23;2257:32;2254:52;;;2302:1;2299;2292:12;2254:52;2341:9;2328:23;2360:31;2385:5;2360:31;:::i;:::-;2410:5;-1:-1:-1;2467:2:12;2452:18;;2439:32;2480:33;2439:32;2480:33;:::i;:::-;2140:456;;2532:7;;-1:-1:-1;;;2586:2:12;2571:18;;;;2558:32;;2140:456::o;2825:757::-;2929:6;2937;2945;2953;3006:2;2994:9;2985:7;2981:23;2977:32;2974:52;;;3022:1;3019;3012:12;2974:52;3062:9;3049:23;3091:18;3132:2;3124:6;3121:14;3118:34;;;3148:1;3145;3138:12;3118:34;3186:6;3175:9;3171:22;3161:32;;3231:7;3224:4;3220:2;3216:13;3212:27;3202:55;;3253:1;3250;3243:12;3202:55;3293:2;3280:16;3319:2;3311:6;3308:14;3305:34;;;3335:1;3332;3325:12;3305:34;3390:7;3383:4;3373:6;3370:1;3366:14;3362:2;3358:23;3354:34;3351:47;3348:67;;;3411:1;3408;3401:12;3348:67;3442:4;3434:13;;;;3466:6;;-1:-1:-1;3504:20:12;;;3491:34;;3572:2;3557:18;3544:32;;-1:-1:-1;2825:757:12;;-1:-1:-1;;;;2825:757:12:o;3779:184::-;3849:6;3902:2;3890:9;3881:7;3877:23;3873:32;3870:52;;;3918:1;3915;3908:12;3870:52;-1:-1:-1;3941:16:12;;3779:184;-1:-1:-1;3779:184:12:o;3968:356::-;4170:2;4152:21;;;4189:18;;;4182:30;4248:34;4243:2;4228:18;;4221:62;4315:2;4300:18;;3968:356::o;5770:277::-;5837:6;5890:2;5878:9;5869:7;5865:23;5861:32;5858:52;;;5906:1;5903;5896:12;5858:52;5938:9;5932:16;5991:5;5984:13;5977:21;5970:5;5967:32;5957:60;;6013:1;6010;6003:12;6813:251;6883:6;6936:2;6924:9;6915:7;6911:23;6907:32;6904:52;;;6952:1;6949;6942:12;6904:52;6984:9;6978:16;7003:31;7028:5;7003:31;:::i;9380:127::-;9441:10;9436:3;9432:20;9429:1;9422:31;9472:4;9469:1;9462:15;9496:4;9493:1;9486:15;9512:128;9552:3;9583:1;9579:6;9576:1;9573:13;9570:39;;;9589:18;;:::i;:::-;-1:-1:-1;9625:9:12;;9512:128::o;11719:127::-;11780:10;11775:3;11771:20;11768:1;11761:31;11811:4;11808:1;11801:15;11835:4;11832:1;11825:15;11851:135;11890:3;11911:17;;;11908:43;;11931:18;;:::i;:::-;-1:-1:-1;11978:1:12;11967:13;;11851:135::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1004400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DEFAULT()": "208",
								"NAGA_HOLDER_MINT_ROUND()": "230",
								"SPECIAL_MINT_ROUND()": "207",
								"WHITELIST_MINT_ROUND()": "250",
								"WITHDRAW_ROLE()": "295",
								"allowlistMint(bytes32[],uint256,bytes32)": "infinite",
								"currentMintRound()": "2306",
								"getMaxSupply()": "infinite",
								"getTotalSupply()": "infinite",
								"isUserMinted(address,bytes32)": "2774",
								"merkleRoot()": "2352",
								"nagaKidContract()": "2426",
								"owner()": "2431",
								"renounceOwnership()": "28159",
								"setMerkleRoot(bytes32)": "27982",
								"setNagaKidContract(address)": "28208",
								"setRound(bytes32)": "28036",
								"transferOwnership(address)": "infinite",
								"userMintedAmount(address,bytes32)": "2642",
								"withdraw(address)": "infinite",
								"withdrawCurrency(address,address)": "infinite",
								"withdrawNFT(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 395,
									"end": 5393,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 395,
									"end": 5393,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 395,
									"end": 5393,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "CODESIZE",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 1965,
									"end": 2129,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "tag",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 921,
									"end": 953,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 921,
									"end": 953,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 2046,
									"end": 2082,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "14"
								},
								{
									"begin": 2065,
									"end": 2081,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 2046,
									"end": 2064,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "15"
								},
								{
									"begin": 2046,
									"end": 2082,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 2046,
									"end": 2082,
									"name": "tag",
									"source": 8,
									"value": "14"
								},
								{
									"begin": 2046,
									"end": 2082,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 2093,
									"end": 2119,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "16"
								},
								{
									"begin": 2107,
									"end": 2118,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2093,
									"end": 2106,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "17"
								},
								{
									"begin": 2093,
									"end": 2119,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 2093,
									"end": 2119,
									"name": "tag",
									"source": 8,
									"value": "16"
								},
								{
									"begin": 2093,
									"end": 2119,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1965,
									"end": 2129,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 395,
									"end": 5393,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 395,
									"end": 5393,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "tag",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2333,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 2137,
									"end": 2425,
									"name": "tag",
									"source": 8,
									"value": "15"
								},
								{
									"begin": 2137,
									"end": 2425,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1082,
									"end": 1089,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 1248,
									"end": 1271,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "25"
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 588,
									"end": 590,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 570,
									"end": 591,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 570,
									"end": 591,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 570,
									"end": 591,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 607,
									"end": 625,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 607,
									"end": 625,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 607,
									"end": 625,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 600,
									"end": 630,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP4",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP2",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP2",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 646,
									"end": 664,
									"name": "PUSH",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 646,
									"end": 664,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 646,
									"end": 664,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 639,
									"end": 701,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 718,
									"end": 736,
									"name": "PUSH",
									"source": 12,
									"value": "64"
								},
								{
									"begin": 718,
									"end": 736,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "tag",
									"source": 0,
									"value": "26"
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "tag",
									"source": 0,
									"value": "25"
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2244,
									"end": 2259,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 2244,
									"end": 2259,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2244,
									"end": 2259,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2271,
									"end": 2297,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 2271,
									"end": 2297,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2271,
									"end": 2297,
									"modifierDepth": 1,
									"name": "AND",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2271,
									"end": 2297,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 2271,
									"end": 2297,
									"modifierDepth": 1,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 2271,
									"end": 2297,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2271,
									"end": 2297,
									"modifierDepth": 1,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 2271,
									"end": 2297,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2271,
									"end": 2297,
									"name": "SWAP4",
									"source": 8
								},
								{
									"begin": 2271,
									"end": 2297,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 2366,
									"end": 2417,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 2366,
									"end": 2417,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2366,
									"end": 2417,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2244,
									"end": 2259,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 2244,
									"end": 2259,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2244,
									"end": 2259,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 2244,
									"end": 2259,
									"modifierDepth": 1,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 959,
									"end": 993,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 959,
									"end": 993,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 959,
									"end": 993,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1024,
									"end": 1026,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1009,
									"end": 1027,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1009,
									"end": 1027,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1002,
									"end": 1045,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 1002,
									"end": 1045,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1002,
									"end": 1045,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 1002,
									"end": 1045,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2271,
									"end": 2297,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 2271,
									"end": 2297,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 2366,
									"end": 2417,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "ABDF056C85A221FCB31D0366C4475B6B2C613DF2EEEA951A9FCB3E1A8595D973"
								},
								{
									"begin": 2366,
									"end": 2417,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 894,
									"end": 912,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2366,
									"end": 2417,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 2366,
									"end": 2417,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2366,
									"end": 2417,
									"modifierDepth": 1,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2366,
									"end": 2417,
									"modifierDepth": 1,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 2366,
									"end": 2417,
									"modifierDepth": 1,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 2366,
									"end": 2417,
									"modifierDepth": 1,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2366,
									"end": 2417,
									"modifierDepth": 1,
									"name": "LOG1",
									"source": 8
								},
								{
									"begin": 2201,
									"end": 2425,
									"modifierDepth": 1,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2201,
									"end": 2425,
									"modifierDepth": 1,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2137,
									"end": 2425,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2137,
									"end": 2425,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 2638,
									"end": 2858,
									"name": "tag",
									"source": 8,
									"value": "17"
								},
								{
									"begin": 2638,
									"end": 2858,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1082,
									"end": 1089,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 1248,
									"end": 1271,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "34"
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 588,
									"end": 590,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 570,
									"end": 591,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 570,
									"end": 591,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 570,
									"end": 591,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 607,
									"end": 625,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 607,
									"end": 625,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 607,
									"end": 625,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 600,
									"end": 630,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP4",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP2",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP2",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 646,
									"end": 664,
									"name": "PUSH",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 646,
									"end": 664,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 646,
									"end": 664,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 639,
									"end": 701,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 718,
									"end": 736,
									"name": "PUSH",
									"source": 12,
									"value": "64"
								},
								{
									"begin": 718,
									"end": 736,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "26"
								},
								{
									"begin": 386,
									"end": 742,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "tag",
									"source": 0,
									"value": "34"
								},
								{
									"begin": 1240,
									"end": 1308,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2738,
									"end": 2748,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 2738,
									"end": 2748,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2738,
									"end": 2748,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 2759,
									"end": 2783,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2759,
									"end": 2783,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 2759,
									"end": 2783,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2759,
									"end": 2783,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 2801,
									"end": 2850,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 2801,
									"end": 2850,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2801,
									"end": 2850,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1230,
									"end": 1255,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1230,
									"end": 1255,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1230,
									"end": 1255,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1286,
									"end": 1288,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1271,
									"end": 1289,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1271,
									"end": 1289,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1264,
									"end": 1298,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 1264,
									"end": 1298,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1264,
									"end": 1298,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2801,
									"end": 2850,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "123D88BA82600DFC3F219F8885C691B0FF020CAA535666874B3F5174973757FE"
								},
								{
									"begin": 2801,
									"end": 2850,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1203,
									"end": 1221,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2801,
									"end": 2850,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 2801,
									"end": 2850,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2801,
									"end": 2850,
									"modifierDepth": 1,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2801,
									"end": 2850,
									"modifierDepth": 1,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 2801,
									"end": 2850,
									"modifierDepth": 1,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 2801,
									"end": 2850,
									"modifierDepth": 1,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2801,
									"end": 2850,
									"modifierDepth": 1,
									"name": "LOG1",
									"source": 8
								},
								{
									"begin": 2699,
									"end": 2858,
									"modifierDepth": 1,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2638,
									"end": 2858,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2638,
									"end": 2858,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 14,
									"end": 381,
									"name": "tag",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 381,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 109,
									"end": 115,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 117,
									"end": 123,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 170,
									"end": 172,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 158,
									"end": 167,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 149,
									"end": 156,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 145,
									"end": 168,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 141,
									"end": 173,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 138,
									"end": 190,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 138,
									"end": 190,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 138,
									"end": 190,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 186,
									"end": 187,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 183,
									"end": 184,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 176,
									"end": 188,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 138,
									"end": 190,
									"name": "tag",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 138,
									"end": 190,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 212,
									"end": 228,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 212,
									"end": 228,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 257,
									"end": 288,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 257,
									"end": 288,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 247,
									"end": 289,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 247,
									"end": 289,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 237,
									"end": 307,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 237,
									"end": 307,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 303,
									"end": 304,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 300,
									"end": 301,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 293,
									"end": 305,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 237,
									"end": 307,
									"name": "tag",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 237,
									"end": 307,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 371,
									"end": 373,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 356,
									"end": 374,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 356,
									"end": 374,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 356,
									"end": 374,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 356,
									"end": 374,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 350,
									"end": 375,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 326,
									"end": 331,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 326,
									"end": 331,
									"name": "SWAP5",
									"source": 12
								},
								{
									"begin": 350,
									"end": 375,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 350,
									"end": 375,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 381,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1056,
									"end": 1304,
									"name": "tag",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1056,
									"end": 1304,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 395,
									"end": 5393,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 395,
									"end": 5393,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 395,
									"end": 5393,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 395,
									"end": 5393,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 395,
									"end": 5393,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 395,
									"end": 5393,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 395,
									"end": 5393,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220398c536463b06c0f8de6fa02a095ab49a69424f2ff49f5622179369a6832592e64736f6c634300080f0033",
									".code": [
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "B5ABAFA1"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "EF5FE79F"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "EF5FE79F"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "F2FDE38B"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "F500CDFC"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "F6B48E55"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "FF05FE4A"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "FFDC6129"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "tag",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "B5ABAFA1"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "BFF863EC"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "C4E41B22"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "DF4E5881"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "E02023A1"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "tag",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "5B94BBC3"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "5B94BBC3"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "715018A6"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "7CB64759"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "8407ECC4"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "8DA5CB5B"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "9E6C8855"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "tag",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "A25DEA9"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "24C37A85"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "2EB4A7AB"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "4C0F38C2"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "51CFF8D9"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "tag",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 395,
											"end": 5393,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "tag",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "tag",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 959,
											"end": 1025,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "tag",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 160,
											"end": 185,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "tag",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 925,
											"end": 1025,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 611,
											"end": 695,
											"name": "tag",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 611,
											"end": 695,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 611,
											"end": 695,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 611,
											"end": 695,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 611,
											"end": 695,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 611,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 611,
											"end": 695,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 611,
											"end": 695,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 611,
											"end": 695,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 611,
											"end": 695,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 611,
											"end": 695,
											"name": "tag",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 611,
											"end": 695,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 611,
											"end": 695,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 611,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 660,
											"end": 695,
											"name": "PUSH",
											"source": 8,
											"value": "B3C595E55271590809F54E2F4FC3A582754F45B104DD3C41666E2AD310493DB3"
										},
										{
											"begin": 611,
											"end": 695,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 611,
											"end": 695,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "tag",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "tag",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1189,
											"end": 1214,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "tag",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "tag",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 5281,
											"end": 5388,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "tag",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "tag",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 3789,
											"end": 4127,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "tag",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 3789,
											"end": 4127,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "tag",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 772,
											"end": 848,
											"name": "tag",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 772,
											"end": 848,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 772,
											"end": 848,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 772,
											"end": 848,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 772,
											"end": 848,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 772,
											"end": 848,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 772,
											"end": 848,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 772,
											"end": 848,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 772,
											"end": 848,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 772,
											"end": 848,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 772,
											"end": 848,
											"name": "tag",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 772,
											"end": 848,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 772,
											"end": 848,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 772,
											"end": 848,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 817,
											"end": 848,
											"name": "PUSH",
											"source": 8,
											"value": "5C8C0CE107274AD0569BD760C3D2406C1ED72C697935F3F965BD096C5CDEDEE4"
										},
										{
											"begin": 772,
											"end": 848,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 772,
											"end": 848,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 1668,
											"end": 1769,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "tag",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "tag",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2638,
											"end": 2858,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "tag",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 2638,
											"end": 2858,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "tag",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "tag",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 4135,
											"end": 4512,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "tag",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "66"
										},
										{
											"begin": 4135,
											"end": 4512,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1082,
											"end": 1089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1508,
											"end": 1540,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1508,
											"end": 1540,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1508,
											"end": 1540,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1490,
											"end": 1541,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1490,
											"end": 1541,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1478,
											"end": 1480,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1344,
											"end": 1547,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "tag",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "tag",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 2137,
											"end": 2425,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "tag",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 2137,
											"end": 2425,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "tag",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "tag",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 5011,
											"end": 5154,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "tag",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5087,
											"end": 5094,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5131,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5138,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5114,
											"end": 5146,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5154,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "tag",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "tag",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "85"
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "86"
										},
										{
											"begin": 4520,
											"end": 4863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "tag",
											"source": 8,
											"value": "85"
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "87"
										},
										{
											"begin": 4520,
											"end": 4863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "tag",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "tag",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 5162,
											"end": 5273,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "tag",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "92"
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "tag",
											"source": 8,
											"value": "92"
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1113,
											"end": 1144,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "tag",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "tag",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 1078,
											"end": 1104,
											"name": "PUSH",
											"source": 8,
											"value": "5D8E12C39142FF96D79D04D15D1BA1269E4FE57BB9D26F43523628B34BA108EC"
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1104,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "tag",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "101"
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "tag",
											"source": 8,
											"value": "101"
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1151,
											"end": 1182,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1918,
											"end": 2116,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 1918,
											"end": 2116,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 454,
											"end": 534,
											"name": "tag",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 454,
											"end": 534,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 454,
											"end": 534,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 454,
											"end": 534,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 454,
											"end": 534,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 454,
											"end": 534,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 454,
											"end": 534,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 454,
											"end": 534,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 454,
											"end": 534,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 454,
											"end": 534,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 454,
											"end": 534,
											"name": "tag",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 454,
											"end": 534,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 454,
											"end": 534,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 454,
											"end": 534,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 501,
											"end": 534,
											"name": "PUSH",
											"source": 8,
											"value": "68E7D51FDB912CB107DDA2E59B053D87FCCA666DD0EF5339CD3474CCB5276BBA"
										},
										{
											"begin": 454,
											"end": 534,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 454,
											"end": 534,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2866,
											"end": 3781,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 2866,
											"end": 3781,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2866,
											"end": 3781,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 2866,
											"end": 3781,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "114"
										},
										{
											"begin": 2866,
											"end": 3781,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 2866,
											"end": 3781,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2866,
											"end": 3781,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "115"
										},
										{
											"begin": 2866,
											"end": 3781,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2866,
											"end": 3781,
											"name": "tag",
											"source": 8,
											"value": "114"
										},
										{
											"begin": 2866,
											"end": 3781,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2866,
											"end": 3781,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 2866,
											"end": 3781,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "tag",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "117"
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "tag",
											"source": 8,
											"value": "117"
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "119"
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2433,
											"end": 2630,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "tag",
											"source": 8,
											"value": "119"
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 2433,
											"end": 2630,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "tag",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "121"
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "tag",
											"source": 8,
											"value": "121"
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 4871,
											"end": 5003,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "tag",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4943,
											"end": 4947,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4980,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "tag",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3752,
											"end": 3766,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3752,
											"end": 3766,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3745,
											"end": 3767,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3727,
											"end": 3768,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3727,
											"end": 3768,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3715,
											"end": 3717,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3700,
											"end": 3718,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4871,
											"end": 5003,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 3587,
											"end": 3774,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "tag",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5368,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 5353,
											"end": 5368,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D5ABEB01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5326,
											"end": 5333,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5326,
											"end": 5333,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5353,
											"end": 5368,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5368,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5378,
											"name": "PUSH",
											"source": 8,
											"value": "D5ABEB01"
										},
										{
											"begin": 5353,
											"end": 5378,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5368,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "129"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "tag",
											"source": 8,
											"value": "129"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "130"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "131"
										},
										{
											"begin": 5353,
											"end": 5380,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "tag",
											"source": 8,
											"value": "130"
										},
										{
											"begin": 5353,
											"end": 5380,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5346,
											"end": 5380,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5346,
											"end": 5380,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5281,
											"end": 5388,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5281,
											"end": 5388,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "tag",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1082,
											"end": 1089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1240,
											"end": 1308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3873,
											"end": 3894,
											"modifierDepth": 1,
											"name": "SELFBALANCE",
											"source": 8
										},
										{
											"begin": 3913,
											"end": 3934,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3905,
											"end": 3959,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 3905,
											"end": 3959,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3905,
											"end": 3959,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3905,
											"end": 3959,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3905,
											"end": 3959,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3905,
											"end": 3959,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4531,
											"end": 4533,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3905,
											"end": 3959,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3905,
											"end": 3959,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3905,
											"end": 3959,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4513,
											"end": 4534,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4570,
											"end": 4572,
											"name": "PUSH",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 4550,
											"end": 4568,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 4550,
											"end": 4568,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4550,
											"end": 4568,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4543,
											"end": 4573,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E73756666696369656E742042616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4589,
											"end": 4607,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 4589,
											"end": 4607,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4589,
											"end": 4607,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4582,
											"end": 4632,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4667,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 4649,
											"end": 4667,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3905,
											"end": 3959,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 4329,
											"end": 4673,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3905,
											"end": 3959,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 3905,
											"end": 3959,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3971,
											"end": 3982,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3987,
											"end": 3990,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3987,
											"end": 3995,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4003,
											"end": 4020,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "3F"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4026,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3970,
											"end": 4026,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3970,
											"end": 4026,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3970,
											"end": 4026,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4045,
											"end": 4051,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4037,
											"end": 4052,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 4037,
											"end": 4052,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4037,
											"end": 4052,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4037,
											"end": 4052,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4037,
											"end": 4052,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4037,
											"end": 4052,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 4037,
											"end": 4052,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4070,
											"end": 4119,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4070,
											"end": 4119,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4070,
											"end": 4119,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5108,
											"end": 5140,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5108,
											"end": 5140,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5090,
											"end": 5141,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5090,
											"end": 5141,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5172,
											"end": 5174,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5157,
											"end": 5175,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5157,
											"end": 5175,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5150,
											"end": 5184,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5150,
											"end": 5184,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5150,
											"end": 5184,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4103,
											"end": 4118,
											"modifierDepth": 1,
											"name": "TIMESTAMP",
											"source": 8
										},
										{
											"begin": 5200,
											"end": 5218,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5200,
											"end": 5218,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5200,
											"end": 5218,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5193,
											"end": 5227,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5193,
											"end": 5227,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5193,
											"end": 5227,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5193,
											"end": 5227,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4070,
											"end": 4119,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "F279E6A1F5E320CCA91135676D9CB6E44CA8A08C0B88342BCDB1144F6511B568"
										},
										{
											"begin": 4070,
											"end": 4119,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5078,
											"end": 5080,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 5063,
											"end": 5081,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4070,
											"end": 4119,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 4070,
											"end": 4119,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4070,
											"end": 4119,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4070,
											"end": 4119,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4070,
											"end": 4119,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4070,
											"end": 4119,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4070,
											"end": 4119,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4070,
											"end": 4119,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4070,
											"end": 4119,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 8
										},
										{
											"begin": 3837,
											"end": 4127,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3837,
											"end": 4127,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3789,
											"end": 4127,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1082,
											"end": 1089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1240,
											"end": 1308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1732,
											"end": 1762,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1759,
											"end": 1760,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1732,
											"end": 1750,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 1732,
											"end": 1762,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1732,
											"end": 1762,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1732,
											"end": 1762,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "tag",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1082,
											"end": 1089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1240,
											"end": 1308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2738,
											"end": 2748,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2738,
											"end": 2748,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2748,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2759,
											"end": 2783,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2759,
											"end": 2783,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2759,
											"end": 2783,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2759,
											"end": 2783,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 2801,
											"end": 2850,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2801,
											"end": 2850,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2801,
											"end": 2850,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5412,
											"end": 5437,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5412,
											"end": 5437,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5412,
											"end": 5437,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5468,
											"end": 5470,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5453,
											"end": 5471,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5453,
											"end": 5471,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5446,
											"end": 5480,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5446,
											"end": 5480,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5446,
											"end": 5480,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2801,
											"end": 2850,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "123D88BA82600DFC3F219F8885C691B0FF020CAA535666874B3F5174973757FE"
										},
										{
											"begin": 2801,
											"end": 2850,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5385,
											"end": 5403,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2801,
											"end": 2850,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 2801,
											"end": 2850,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2801,
											"end": 2850,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2801,
											"end": 2850,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2801,
											"end": 2850,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2801,
											"end": 2850,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2801,
											"end": 2850,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2801,
											"end": 2850,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2801,
											"end": 2850,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 8
										},
										{
											"begin": 2699,
											"end": 2858,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2638,
											"end": 2858,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2638,
											"end": 2858,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "tag",
											"source": 8,
											"value": "66"
										},
										{
											"begin": 4135,
											"end": 4512,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1082,
											"end": 1089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1240,
											"end": 1308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4245,
											"end": 4287,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4245,
											"end": 4287,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4281,
											"end": 4285,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4245,
											"end": 4287,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1490,
											"end": 1541,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4220,
											"end": 4242,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4220,
											"end": 4242,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4245,
											"end": 4272,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4272,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4272,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4272,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "70A08231"
										},
										{
											"begin": 4245,
											"end": 4272,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4245,
											"end": 4287,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "131"
										},
										{
											"begin": 4245,
											"end": 4287,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 4245,
											"end": 4287,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4220,
											"end": 4287,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4220,
											"end": 4287,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4326,
											"end": 4327,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4306,
											"end": 4323,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4306,
											"end": 4327,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 4298,
											"end": 4352,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 4298,
											"end": 4352,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4298,
											"end": 4352,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4298,
											"end": 4352,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4298,
											"end": 4352,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4298,
											"end": 4352,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4531,
											"end": 4533,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4298,
											"end": 4352,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4298,
											"end": 4352,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4298,
											"end": 4352,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4513,
											"end": 4534,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4570,
											"end": 4572,
											"name": "PUSH",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 4550,
											"end": 4568,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 4550,
											"end": 4568,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4550,
											"end": 4568,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4543,
											"end": 4573,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E73756666696369656E742042616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4589,
											"end": 4607,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 4589,
											"end": 4607,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4589,
											"end": 4607,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4582,
											"end": 4632,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4667,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 4649,
											"end": 4667,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4298,
											"end": 4352,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 4329,
											"end": 4673,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4298,
											"end": 4352,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 4298,
											"end": 4352,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4363,
											"end": 4413,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4363,
											"end": 4413,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5683,
											"end": 5715,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5683,
											"end": 5715,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5683,
											"end": 5715,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4363,
											"end": 4413,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5665,
											"end": 5716,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5725,
											"end": 5759,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5725,
											"end": 5759,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5725,
											"end": 5759,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4363,
											"end": 4389,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4389,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4389,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4389,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "A9059CBB"
										},
										{
											"begin": 4363,
											"end": 4389,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5638,
											"end": 5656,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 5638,
											"end": 5656,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "182"
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4363,
											"end": 4413,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "182"
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "183"
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 4363,
											"end": 4413,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "183"
										},
										{
											"begin": 4363,
											"end": 4413,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4439,
											"end": 4504,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4439,
											"end": 4504,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4439,
											"end": 4504,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6339,
											"end": 6354,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6339,
											"end": 6354,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6339,
											"end": 6354,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6321,
											"end": 6355,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6321,
											"end": 6355,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6391,
											"end": 6406,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6391,
											"end": 6406,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6388,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6371,
											"end": 6389,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6371,
											"end": 6389,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6364,
											"end": 6407,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6423,
											"end": 6441,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6423,
											"end": 6441,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6423,
											"end": 6441,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6416,
											"end": 6450,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6416,
											"end": 6450,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6416,
											"end": 6450,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4488,
											"end": 4503,
											"modifierDepth": 1,
											"name": "TIMESTAMP",
											"source": 8
										},
										{
											"begin": 6481,
											"end": 6483,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 6466,
											"end": 6484,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6466,
											"end": 6484,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6459,
											"end": 6493,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4439,
											"end": 4504,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B818A975F91276DF8BA59329BECBC23C793DF0D503C19AC296C3C372A1FA0461"
										},
										{
											"begin": 4439,
											"end": 4504,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6270,
											"end": 6273,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 6255,
											"end": 6274,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4439,
											"end": 4504,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 6052,
											"end": 6499,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "tag",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 2137,
											"end": 2425,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1082,
											"end": 1089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1240,
											"end": 1308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2259,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 2244,
											"end": 2259,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2244,
											"end": 2259,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2271,
											"end": 2297,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2271,
											"end": 2297,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2271,
											"end": 2297,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2271,
											"end": 2297,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2271,
											"end": 2297,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2271,
											"end": 2297,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2271,
											"end": 2297,
											"modifierDepth": 1,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 2271,
											"end": 2297,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2271,
											"end": 2297,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2271,
											"end": 2297,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 2366,
											"end": 2417,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2366,
											"end": 2417,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2366,
											"end": 2417,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2244,
											"end": 2259,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2244,
											"end": 2259,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2244,
											"end": 2259,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2244,
											"end": 2259,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6716,
											"end": 6750,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6716,
											"end": 6750,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6716,
											"end": 6750,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6781,
											"end": 6783,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6766,
											"end": 6784,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6766,
											"end": 6784,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6759,
											"end": 6802,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6759,
											"end": 6802,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6759,
											"end": 6802,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6759,
											"end": 6802,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2271,
											"end": 2297,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2271,
											"end": 2297,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2366,
											"end": 2417,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "ABDF056C85A221FCB31D0366C4475B6B2C613DF2EEEA951A9FCB3E1A8595D973"
										},
										{
											"begin": 2366,
											"end": 2417,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6651,
											"end": 6669,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2366,
											"end": 2417,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 6504,
											"end": 6808,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "tag",
											"source": 8,
											"value": "87"
										},
										{
											"begin": 4520,
											"end": 4863,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1082,
											"end": 1089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1240,
											"end": 1308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4620,
											"end": 4651,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "31A9108F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4620,
											"end": 4651,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4620,
											"end": 4651,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 160,
											"end": 185,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4663,
											"end": 4667,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 4663,
											"end": 4667,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4620,
											"end": 4641,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4641,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4641,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4641,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "6352211E"
										},
										{
											"begin": 4620,
											"end": 4641,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 133,
											"end": 151,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4620,
											"end": 4651,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 4620,
											"end": 4651,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 4620,
											"end": 4651,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4620,
											"end": 4668,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4620,
											"end": 4668,
											"modifierDepth": 1,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 4612,
											"end": 4710,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "208"
										},
										{
											"begin": 4612,
											"end": 4710,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4612,
											"end": 4710,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4612,
											"end": 4710,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4612,
											"end": 4710,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4612,
											"end": 4710,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7271,
											"end": 7273,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4612,
											"end": 4710,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4612,
											"end": 4710,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4612,
											"end": 4710,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7253,
											"end": 7274,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7310,
											"end": 7312,
											"name": "PUSH",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 7290,
											"end": 7308,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 7290,
											"end": 7308,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7290,
											"end": 7308,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7283,
											"end": 7313,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7349,
											"end": 7383,
											"name": "PUSH",
											"source": 12,
											"value": "5468697320746F6B656E4964206973206E6F74206F776E656420627920636F6E"
										},
										{
											"begin": 7329,
											"end": 7347,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 7329,
											"end": 7347,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7329,
											"end": 7347,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7322,
											"end": 7384,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1D1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "DA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7400,
											"end": 7418,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 7400,
											"end": 7418,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7400,
											"end": 7418,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7393,
											"end": 7428,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7445,
											"end": 7464,
											"name": "PUSH",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 7445,
											"end": 7464,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4612,
											"end": 4710,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 7069,
											"end": 7470,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4612,
											"end": 4710,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "208"
										},
										{
											"begin": 4612,
											"end": 4710,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4723,
											"end": 4783,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "21421707"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4723,
											"end": 4783,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4762,
											"end": 4766,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4723,
											"end": 4783,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7715,
											"end": 7749,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7785,
											"end": 7800,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7785,
											"end": 7800,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7785,
											"end": 7800,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7765,
											"end": 7783,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 7765,
											"end": 7783,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7765,
											"end": 7783,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7758,
											"end": 7801,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7817,
											"end": 7835,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 7817,
											"end": 7835,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7817,
											"end": 7835,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7810,
											"end": 7844,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7810,
											"end": 7844,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7810,
											"end": 7844,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4723,
											"end": 4753,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4753,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4753,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4753,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "42842E0E"
										},
										{
											"begin": 4723,
											"end": 4753,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7650,
											"end": 7668,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 7650,
											"end": 7668,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "EXTCODESIZE",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4723,
											"end": 4783,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4723,
											"end": 4783,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 4723,
											"end": 4783,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4809,
											"end": 4855,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4809,
											"end": 4855,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4809,
											"end": 4855,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6339,
											"end": 6354,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6339,
											"end": 6354,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 6339,
											"end": 6354,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6321,
											"end": 6355,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6321,
											"end": 6355,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6391,
											"end": 6406,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6391,
											"end": 6406,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6388,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6371,
											"end": 6389,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6371,
											"end": 6389,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6364,
											"end": 6407,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6423,
											"end": 6441,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6423,
											"end": 6441,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6423,
											"end": 6441,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6416,
											"end": 6450,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6416,
											"end": 6450,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6416,
											"end": 6450,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4839,
											"end": 4854,
											"modifierDepth": 1,
											"name": "TIMESTAMP",
											"source": 8
										},
										{
											"begin": 6481,
											"end": 6483,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 6466,
											"end": 6484,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6466,
											"end": 6484,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6459,
											"end": 6493,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4809,
											"end": 4855,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "127A8D3F57942833F6930572BCE52AD882683E36EEB5830D199D3FA4BFA9467"
										},
										{
											"begin": 4809,
											"end": 4855,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6270,
											"end": 6273,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 6255,
											"end": 6274,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6255,
											"end": 6274,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4809,
											"end": 4855,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 6052,
											"end": 6499,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "tag",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 5162,
											"end": 5273,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5251,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 5236,
											"end": 5251,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "18160DDD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5209,
											"end": 5216,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5209,
											"end": 5216,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5236,
											"end": 5251,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5251,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5263,
											"name": "PUSH",
											"source": 8,
											"value": "18160DDD"
										},
										{
											"begin": 5236,
											"end": 5263,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5251,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "129"
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5236,
											"end": 5265,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1082,
											"end": 1089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1240,
											"end": 1308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "227"
										},
										{
											"begin": 1998,
											"end": 2071,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8057,
											"end": 8059,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1998,
											"end": 2071,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8039,
											"end": 8060,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8096,
											"end": 8098,
											"name": "PUSH",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 8076,
											"end": 8094,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 8076,
											"end": 8094,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8076,
											"end": 8094,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8069,
											"end": 8099,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8135,
											"end": 8169,
											"name": "PUSH",
											"source": 12,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 8115,
											"end": 8133,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 8115,
											"end": 8133,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8115,
											"end": 8133,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8108,
											"end": 8170,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8186,
											"end": 8204,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 8186,
											"end": 8204,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8186,
											"end": 8204,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8179,
											"end": 8215,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8232,
											"end": 8251,
											"name": "PUSH",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 8232,
											"end": 8251,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1998,
											"end": 2071,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 7855,
											"end": 8257,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1998,
											"end": 2071,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "227"
										},
										{
											"begin": 1998,
											"end": 2071,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2109,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 2100,
											"end": 2108,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2099,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 2081,
											"end": 2109,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2109,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 2081,
											"end": 2109,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2866,
											"end": 3781,
											"name": "tag",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 2866,
											"end": 3781,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "232"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8464,
											"end": 8466,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8446,
											"end": 8467,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8503,
											"end": 8505,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 8483,
											"end": 8501,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 8483,
											"end": 8501,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8483,
											"end": 8501,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8476,
											"end": 8506,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8542,
											"end": 8575,
											"name": "PUSH",
											"source": 12,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 8522,
											"end": 8540,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 8522,
											"end": 8540,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8522,
											"end": 8540,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8515,
											"end": 8576,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8593,
											"end": 8611,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 8593,
											"end": 8611,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 8262,
											"end": 8617,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "232"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2996,
											"end": 3002,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2988,
											"end": 3038,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "236"
										},
										{
											"begin": 2988,
											"end": 3038,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2988,
											"end": 3038,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2988,
											"end": 3038,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2988,
											"end": 3038,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2988,
											"end": 3038,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8824,
											"end": 8826,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2988,
											"end": 3038,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2988,
											"end": 3038,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2988,
											"end": 3038,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8806,
											"end": 8827,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8863,
											"end": 8865,
											"name": "PUSH",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 8843,
											"end": 8861,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 8843,
											"end": 8861,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8843,
											"end": 8861,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8836,
											"end": 8866,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "26B4B73A1034B9903737BA1030B8383937BB32B217"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "59"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8882,
											"end": 8900,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 8882,
											"end": 8900,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8882,
											"end": 8900,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8875,
											"end": 8926,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8943,
											"end": 8961,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 8943,
											"end": 8961,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2988,
											"end": 3038,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 8622,
											"end": 8967,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2988,
											"end": 3038,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "236"
										},
										{
											"begin": 2988,
											"end": 3038,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3083,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3057,
											"end": 3073,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 3057,
											"end": 3073,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3057,
											"end": 3083,
											"modifierDepth": 1,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3127,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "239"
										},
										{
											"begin": 3049,
											"end": 3127,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3127,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3049,
											"end": 3127,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3049,
											"end": 3127,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3127,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9174,
											"end": 9176,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3049,
											"end": 3127,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3049,
											"end": 3127,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3127,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9156,
											"end": 9177,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9213,
											"end": 9215,
											"name": "PUSH",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 9193,
											"end": 9211,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 9193,
											"end": 9211,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9193,
											"end": 9211,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9186,
											"end": 9216,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9252,
											"end": 9286,
											"name": "PUSH",
											"source": 12,
											"value": "436F6E747261637420617265206E6F7420696E2074686973206D696E74696E67"
										},
										{
											"begin": 9232,
											"end": 9250,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 9232,
											"end": 9250,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9232,
											"end": 9250,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9225,
											"end": 9287,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "103937BAB73217"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9303,
											"end": 9321,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 9303,
											"end": 9321,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9303,
											"end": 9321,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9296,
											"end": 9333,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9350,
											"end": 9369,
											"name": "PUSH",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 9350,
											"end": 9369,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3049,
											"end": 3127,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 8972,
											"end": 9375,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3049,
											"end": 3127,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "239"
										},
										{
											"begin": 3049,
											"end": 3127,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3175,
											"end": 3189,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "242"
										},
										{
											"begin": 3175,
											"end": 3187,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 3175,
											"end": 3189,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3175,
											"end": 3189,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "242"
										},
										{
											"begin": 3175,
											"end": 3189,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3165,
											"end": 3172,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3146,
											"end": 3162,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 3146,
											"end": 3160,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 3146,
											"end": 3162,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3146,
											"end": 3162,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 3146,
											"end": 3162,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3146,
											"end": 3172,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 3146,
											"end": 3172,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3146,
											"end": 3172,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3146,
											"end": 3172,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 3146,
											"end": 3172,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3146,
											"end": 3172,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 3146,
											"end": 3172,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3146,
											"end": 3189,
											"modifierDepth": 1,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 3138,
											"end": 3205,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 3138,
											"end": 3205,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3138,
											"end": 3205,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3138,
											"end": 3205,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3138,
											"end": 3205,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3138,
											"end": 3205,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9847,
											"end": 9849,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3138,
											"end": 3205,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3138,
											"end": 3205,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3138,
											"end": 3205,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9829,
											"end": 9850,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9886,
											"end": 9888,
											"name": "PUSH",
											"source": 12,
											"value": "B"
										},
										{
											"begin": 9866,
											"end": 9884,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 9866,
											"end": 9884,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9866,
											"end": 9884,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9859,
											"end": 9889,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4F76657220737570706C79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9905,
											"end": 9923,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 9905,
											"end": 9923,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9905,
											"end": 9923,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9898,
											"end": 9939,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9956,
											"end": 9974,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 9956,
											"end": 9974,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3138,
											"end": 3205,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 9645,
											"end": 9980,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3138,
											"end": 3205,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 3138,
											"end": 3205,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3237,
											"end": 3247,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 4943,
											"end": 4947,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4980,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4987,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 4967,
											"end": 4995,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3224,
											"end": 3264,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3216,
											"end": 3292,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "250"
										},
										{
											"begin": 3216,
											"end": 3292,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3216,
											"end": 3292,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3216,
											"end": 3292,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3216,
											"end": 3292,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3216,
											"end": 3292,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10187,
											"end": 10189,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3216,
											"end": 3292,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3216,
											"end": 3292,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3216,
											"end": 3292,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10169,
											"end": 10190,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10226,
											"end": 10228,
											"name": "PUSH",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 10206,
											"end": 10224,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 10206,
											"end": 10224,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10206,
											"end": 10224,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10199,
											"end": 10229,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10265,
											"end": 10290,
											"name": "PUSH",
											"source": 12,
											"value": "596F752061726520616C7265616479206D696E7465642E000000000000000000"
										},
										{
											"begin": 10245,
											"end": 10263,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 10245,
											"end": 10263,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10245,
											"end": 10263,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10238,
											"end": 10291,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10308,
											"end": 10326,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 10308,
											"end": 10326,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3216,
											"end": 3292,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 9985,
											"end": 10332,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3216,
											"end": 3292,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "250"
										},
										{
											"begin": 3216,
											"end": 3292,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3326,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3311,
											"end": 3326,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3311,
											"end": 3350,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "55138F0D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3311,
											"end": 3350,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3344,
											"end": 3348,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3311,
											"end": 3350,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1490,
											"end": 1541,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3311,
											"end": 3326,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3326,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3326,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3326,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3335,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "AA271E1A"
										},
										{
											"begin": 3311,
											"end": 3335,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "255"
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3311,
											"end": 3350,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "255"
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "256"
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 3311,
											"end": 3350,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "256"
										},
										{
											"begin": 3311,
											"end": 3350,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3303,
											"end": 3385,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "257"
										},
										{
											"begin": 3303,
											"end": 3385,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3303,
											"end": 3385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3303,
											"end": 3385,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3303,
											"end": 3385,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3303,
											"end": 3385,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10539,
											"end": 10541,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3303,
											"end": 3385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3303,
											"end": 3385,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3303,
											"end": 3385,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10521,
											"end": 10542,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10578,
											"end": 10580,
											"name": "PUSH",
											"source": 12,
											"value": "1E"
										},
										{
											"begin": 10558,
											"end": 10576,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 10558,
											"end": 10576,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10558,
											"end": 10576,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10551,
											"end": 10581,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10617,
											"end": 10649,
											"name": "PUSH",
											"source": 12,
											"value": "436F6E7472616374204D696E74206973206E6F7420617070726F7665642E0000"
										},
										{
											"begin": 10597,
											"end": 10615,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 10597,
											"end": 10615,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10597,
											"end": 10615,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10590,
											"end": 10650,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10667,
											"end": 10685,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 10667,
											"end": 10685,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3303,
											"end": 3385,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 10337,
											"end": 10691,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3303,
											"end": 3385,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "257"
										},
										{
											"begin": 3303,
											"end": 3385,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "260"
										},
										{
											"begin": 3423,
											"end": 3429,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3423,
											"end": 3429,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "CALLDATACOPY",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3404,
											"end": 3500,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3431,
											"end": 3441,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3431,
											"end": 3441,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3453,
											"end": 3498,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3470,
											"end": 3480,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 10901,
											"end": 10903,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 10897,
											"end": 10912,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 10893,
											"end": 10946,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3453,
											"end": 3498,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10881,
											"end": 10947,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10963,
											"end": 10975,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 10963,
											"end": 10975,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10963,
											"end": 10975,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10956,
											"end": 10984,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 10956,
											"end": 10984,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10956,
											"end": 10984,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11000,
											"end": 11012,
											"name": "PUSH",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 11000,
											"end": 11012,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11000,
											"end": 11012,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10993,
											"end": 11021,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 10993,
											"end": 11021,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10993,
											"end": 11021,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3431,
											"end": 3441,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3431,
											"end": 3441,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11037,
											"end": 11049,
											"name": "PUSH",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 11037,
											"end": 11049,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11037,
											"end": 11049,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3453,
											"end": 3498,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3443,
											"end": 3499,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3443,
											"end": 3499,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3443,
											"end": 3499,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3443,
											"end": 3499,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3443,
											"end": 3499,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3443,
											"end": 3499,
											"modifierDepth": 1,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3422,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "263"
										},
										{
											"begin": 3404,
											"end": 3500,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "260"
										},
										{
											"begin": 3404,
											"end": 3500,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3396,
											"end": 3542,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "264"
										},
										{
											"begin": 3396,
											"end": 3542,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3396,
											"end": 3542,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3396,
											"end": 3542,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3396,
											"end": 3542,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3396,
											"end": 3542,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11262,
											"end": 11264,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3396,
											"end": 3542,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3396,
											"end": 3542,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3396,
											"end": 3542,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11244,
											"end": 11265,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11301,
											"end": 11303,
											"name": "PUSH",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 11281,
											"end": 11299,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 11281,
											"end": 11299,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11281,
											"end": 11299,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11274,
											"end": 11304,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11340,
											"end": 11374,
											"name": "PUSH",
											"source": 12,
											"value": "556E617574686F72697A65642057686974656C6973744D696E74205468697320"
										},
										{
											"begin": 11320,
											"end": 11338,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 11320,
											"end": 11338,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11320,
											"end": 11338,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11313,
											"end": 11375,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2AB9B2B917"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11391,
											"end": 11409,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 11391,
											"end": 11409,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11391,
											"end": 11409,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11384,
											"end": 11419,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11436,
											"end": 11455,
											"name": "PUSH",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 11436,
											"end": 11455,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3396,
											"end": 3542,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 11060,
											"end": 11461,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3396,
											"end": 3542,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "264"
										},
										{
											"begin": 3396,
											"end": 3542,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3569,
											"end": 3579,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3580,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3555,
											"end": 3580,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3580,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3580,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3568,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 3555,
											"end": 3580,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3555,
											"end": 3580,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3580,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3580,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3580,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3555,
											"end": 3580,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3580,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3580,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3588,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3588,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3588,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3588,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3588,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3588,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3588,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3588,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3595,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3595,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3555,
											"end": 3595,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3591,
											"end": 3595,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 3555,
											"end": 3595,
											"modifierDepth": 1,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3595,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3595,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3635,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3635,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3635,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3623,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 3606,
											"end": 3635,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3635,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3635,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3635,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3635,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3654,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3654,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3647,
											"end": 3654,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3647,
											"end": 3654,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3580,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3654,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "267"
										},
										{
											"begin": 3606,
											"end": 3654,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3647,
											"end": 3654,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3647,
											"end": 3654,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3654,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 3606,
											"end": 3654,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3654,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "267"
										},
										{
											"begin": 3606,
											"end": 3654,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3654,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3654,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3606,
											"end": 3654,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3667,
											"end": 3682,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3667,
											"end": 3682,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3667,
											"end": 3711,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "28512065"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3667,
											"end": 3711,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3692,
											"end": 3702,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3667,
											"end": 3711,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5665,
											"end": 5716,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5732,
											"end": 5750,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5725,
											"end": 5759,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5725,
											"end": 5759,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5725,
											"end": 5759,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3667,
											"end": 3682,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3682,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3682,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3682,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3691,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "A1448194"
										},
										{
											"begin": 3667,
											"end": 3691,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5638,
											"end": 5656,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 5638,
											"end": 5656,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "EXTCODESIZE",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "269"
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3667,
											"end": 3711,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "269"
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3667,
											"end": 3711,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 3667,
											"end": 3711,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3729,
											"end": 3773,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3729,
											"end": 3773,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3729,
											"end": 3773,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5412,
											"end": 5437,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5412,
											"end": 5437,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5412,
											"end": 5437,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3757,
											"end": 3772,
											"modifierDepth": 1,
											"name": "TIMESTAMP",
											"source": 8
										},
										{
											"begin": 5468,
											"end": 5470,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5453,
											"end": 5471,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5453,
											"end": 5471,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5446,
											"end": 5480,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3736,
											"end": 3746,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 3736,
											"end": 3746,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3729,
											"end": 3773,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "25B428DFDE728CCFADDAD7E29E4AC23C24ED7FD1A6E3E3F91894A9A073F5DFFF"
										},
										{
											"begin": 3729,
											"end": 3773,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5385,
											"end": 5403,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3729,
											"end": 3773,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3729,
											"end": 3773,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3729,
											"end": 3773,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3729,
											"end": 3773,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3729,
											"end": 3773,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3729,
											"end": 3773,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3729,
											"end": 3773,
											"modifierDepth": 1,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2866,
											"end": 3781,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "tag",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 2433,
											"end": 2630,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1082,
											"end": 1089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "277"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1240,
											"end": 1308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "277"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2518,
											"end": 2534,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 2518,
											"end": 2534,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2518,
											"end": 2534,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2545,
											"end": 2570,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2545,
											"end": 2570,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2545,
											"end": 2570,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2545,
											"end": 2570,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 2588,
											"end": 2622,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2588,
											"end": 2622,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2588,
											"end": 2622,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5412,
											"end": 5437,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5412,
											"end": 5437,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5412,
											"end": 5437,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5468,
											"end": 5470,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5453,
											"end": 5471,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5453,
											"end": 5471,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5446,
											"end": 5480,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5446,
											"end": 5480,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5446,
											"end": 5480,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2588,
											"end": 2622,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "521EC96875CA228CD2FC1DBD4C927A34328C9CE1A83BCB8C1F633F012C90D785"
										},
										{
											"begin": 2588,
											"end": 2622,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5385,
											"end": 5403,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2588,
											"end": 2622,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 5238,
											"end": 5486,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "tag",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2333,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "tag",
											"source": 5,
											"value": "263"
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1275,
											"end": 1279,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1327,
											"end": 1331,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "285"
										},
										{
											"begin": 1311,
											"end": 1316,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1318,
											"end": 1322,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1298,
											"end": 1310,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "286"
										},
										{
											"begin": 1298,
											"end": 1323,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "tag",
											"source": 5,
											"value": "285"
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1298,
											"end": 1331,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1298,
											"end": 1331,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1154,
											"end": 1338,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "tag",
											"source": 5,
											"value": "286"
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1772,
											"end": 1779,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1814,
											"end": 1818,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1772,
											"end": 1779,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "tag",
											"source": 5,
											"value": "288"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1852,
											"end": 1857,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1852,
											"end": 1864,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1848,
											"end": 1849,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1848,
											"end": 1864,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "289"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1885,
											"end": 1905,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1908,
											"end": 1913,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1914,
											"end": 1915,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "292"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "292"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "293"
										},
										{
											"begin": 1908,
											"end": 1916,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "tag",
											"source": 5,
											"value": "292"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1885,
											"end": 1916,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1885,
											"end": 1916,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1950,
											"end": 1962,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1934,
											"end": 1946,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1934,
											"end": 1962,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "294"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2425,
											"end": 2438,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2508,
											"end": 2512,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2558,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2060,
											"end": 2117,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2060,
											"end": 2117,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "297"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "tag",
											"source": 5,
											"value": "294"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2425,
											"end": 2438,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2508,
											"end": 2512,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2558,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2234,
											"end": 2291,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2234,
											"end": 2291,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "tag",
											"source": 5,
											"value": "297"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "299"
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "300"
										},
										{
											"begin": 1866,
											"end": 1869,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "tag",
											"source": 5,
											"value": "299"
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "288"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "tag",
											"source": 5,
											"value": "289"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2332,
											"end": 2344,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1689,
											"end": 2351,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 378,
											"end": 509,
											"name": "tag",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 378,
											"end": 509,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 453,
											"end": 484,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 453,
											"end": 484,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 443,
											"end": 485,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 443,
											"end": 485,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 433,
											"end": 503,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "230"
										},
										{
											"begin": 433,
											"end": 503,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 499,
											"end": 500,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 496,
											"end": 497,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 489,
											"end": 501,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 514,
											"end": 761,
											"name": "tag",
											"source": 12,
											"value": "48"
										},
										{
											"begin": 514,
											"end": 761,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 573,
											"end": 579,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 626,
											"end": 628,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 614,
											"end": 623,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 605,
											"end": 612,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 601,
											"end": 624,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 597,
											"end": 629,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 594,
											"end": 646,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 594,
											"end": 646,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "310"
										},
										{
											"begin": 594,
											"end": 646,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 642,
											"end": 643,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 639,
											"end": 640,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 632,
											"end": 644,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 594,
											"end": 646,
											"name": "tag",
											"source": 12,
											"value": "310"
										},
										{
											"begin": 594,
											"end": 646,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 681,
											"end": 690,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 668,
											"end": 691,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 700,
											"end": 731,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "311"
										},
										{
											"begin": 725,
											"end": 730,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 700,
											"end": 731,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 700,
											"end": 731,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 700,
											"end": 731,
											"name": "tag",
											"source": 12,
											"value": "311"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 750,
											"end": 755,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 514,
											"end": 761,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 514,
											"end": 761,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 766,
											"end": 946,
											"name": "tag",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 766,
											"end": 946,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 825,
											"end": 831,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 878,
											"end": 880,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 866,
											"end": 875,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 857,
											"end": 864,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 853,
											"end": 876,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 849,
											"end": 881,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 846,
											"end": 898,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 846,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 846,
											"end": 898,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 894,
											"end": 895,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 891,
											"end": 892,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 884,
											"end": 896,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 846,
											"end": 898,
											"name": "tag",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 846,
											"end": 898,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 917,
											"end": 940,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 917,
											"end": 940,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 766,
											"end": 946,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 766,
											"end": 946,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 951,
											"end": 1339,
											"name": "tag",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 951,
											"end": 1339,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1019,
											"end": 1025,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1027,
											"end": 1033,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1080,
											"end": 1082,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1068,
											"end": 1077,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1059,
											"end": 1066,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1055,
											"end": 1078,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1051,
											"end": 1083,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 1048,
											"end": 1100,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1048,
											"end": 1100,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "315"
										},
										{
											"begin": 1048,
											"end": 1100,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1096,
											"end": 1097,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1093,
											"end": 1094,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1086,
											"end": 1098,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1048,
											"end": 1100,
											"name": "tag",
											"source": 12,
											"value": "315"
										},
										{
											"begin": 1048,
											"end": 1100,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1135,
											"end": 1144,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1122,
											"end": 1145,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "316"
										},
										{
											"begin": 1179,
											"end": 1184,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 1154,
											"end": 1185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1185,
											"name": "tag",
											"source": 12,
											"value": "316"
										},
										{
											"begin": 1154,
											"end": 1185,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1204,
											"end": 1209,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1261,
											"end": 1263,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1246,
											"end": 1264,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1246,
											"end": 1264,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1233,
											"end": 1265,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1274,
											"end": 1307,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "317"
										},
										{
											"begin": 1233,
											"end": 1265,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1274,
											"end": 1307,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 1274,
											"end": 1307,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1274,
											"end": 1307,
											"name": "tag",
											"source": 12,
											"value": "317"
										},
										{
											"begin": 1274,
											"end": 1307,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1326,
											"end": 1333,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1316,
											"end": 1333,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1316,
											"end": 1333,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1316,
											"end": 1333,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 951,
											"end": 1339,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 951,
											"end": 1339,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 951,
											"end": 1339,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 951,
											"end": 1339,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 951,
											"end": 1339,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 951,
											"end": 1339,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1820,
											"end": 2135,
											"name": "tag",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 1820,
											"end": 2135,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1888,
											"end": 1894,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1896,
											"end": 1902,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1949,
											"end": 1951,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1937,
											"end": 1946,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1924,
											"end": 1947,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1920,
											"end": 1952,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 1917,
											"end": 1969,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1917,
											"end": 1969,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "323"
										},
										{
											"begin": 1917,
											"end": 1969,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1965,
											"end": 1966,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1962,
											"end": 1963,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1955,
											"end": 1967,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1917,
											"end": 1969,
											"name": "tag",
											"source": 12,
											"value": "323"
										},
										{
											"begin": 1917,
											"end": 1969,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2004,
											"end": 2013,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1991,
											"end": 2014,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 2023,
											"end": 2054,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "324"
										},
										{
											"begin": 2048,
											"end": 2053,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2023,
											"end": 2054,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 2023,
											"end": 2054,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2023,
											"end": 2054,
											"name": "tag",
											"source": 12,
											"value": "324"
										},
										{
											"begin": 2023,
											"end": 2054,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2073,
											"end": 2078,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 2125,
											"end": 2127,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2110,
											"end": 2128,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2110,
											"end": 2128,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2110,
											"end": 2128,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2110,
											"end": 2128,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2097,
											"end": 2129,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 2097,
											"end": 2129,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1820,
											"end": 2135,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2140,
											"end": 2596,
											"name": "tag",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 2140,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2217,
											"end": 2223,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2225,
											"end": 2231,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2233,
											"end": 2239,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2286,
											"end": 2288,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2274,
											"end": 2283,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2265,
											"end": 2272,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2261,
											"end": 2284,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2257,
											"end": 2289,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2254,
											"end": 2306,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2254,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "326"
										},
										{
											"begin": 2254,
											"end": 2306,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2302,
											"end": 2303,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2299,
											"end": 2300,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2292,
											"end": 2304,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2254,
											"end": 2306,
											"name": "tag",
											"source": 12,
											"value": "326"
										},
										{
											"begin": 2254,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2341,
											"end": 2350,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2328,
											"end": 2351,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 2360,
											"end": 2391,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "327"
										},
										{
											"begin": 2385,
											"end": 2390,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2360,
											"end": 2391,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 2360,
											"end": 2391,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2360,
											"end": 2391,
											"name": "tag",
											"source": 12,
											"value": "327"
										},
										{
											"begin": 2360,
											"end": 2391,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2410,
											"end": 2415,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2467,
											"end": 2469,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2452,
											"end": 2470,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2452,
											"end": 2470,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2439,
											"end": 2471,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 2480,
											"end": 2513,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "328"
										},
										{
											"begin": 2439,
											"end": 2471,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2480,
											"end": 2513,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 2480,
											"end": 2513,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2480,
											"end": 2513,
											"name": "tag",
											"source": 12,
											"value": "328"
										},
										{
											"begin": 2480,
											"end": 2513,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2140,
											"end": 2596,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2140,
											"end": 2596,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 2532,
											"end": 2539,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2532,
											"end": 2539,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2586,
											"end": 2588,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2571,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2571,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2571,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2571,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2558,
											"end": 2590,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 2558,
											"end": 2590,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2140,
											"end": 2596,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2825,
											"end": 3582,
											"name": "tag",
											"source": 12,
											"value": "115"
										},
										{
											"begin": 2825,
											"end": 3582,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2929,
											"end": 2935,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2937,
											"end": 2943,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2945,
											"end": 2951,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2953,
											"end": 2959,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3006,
											"end": 3008,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2994,
											"end": 3003,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2985,
											"end": 2992,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 2981,
											"end": 3004,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2977,
											"end": 3009,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2974,
											"end": 3026,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2974,
											"end": 3026,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 2974,
											"end": 3026,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3022,
											"end": 3023,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3019,
											"end": 3020,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3012,
											"end": 3024,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2974,
											"end": 3026,
											"name": "tag",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 2974,
											"end": 3026,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3062,
											"end": 3071,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 3049,
											"end": 3072,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3091,
											"end": 3109,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3132,
											"end": 3134,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3124,
											"end": 3130,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3121,
											"end": 3135,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 3118,
											"end": 3152,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3118,
											"end": 3152,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "332"
										},
										{
											"begin": 3118,
											"end": 3152,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3148,
											"end": 3149,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3145,
											"end": 3146,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3138,
											"end": 3150,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3118,
											"end": 3152,
											"name": "tag",
											"source": 12,
											"value": "332"
										},
										{
											"begin": 3118,
											"end": 3152,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3186,
											"end": 3192,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3175,
											"end": 3184,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 3171,
											"end": 3193,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3161,
											"end": 3193,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3161,
											"end": 3193,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3231,
											"end": 3238,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 3224,
											"end": 3228,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 3220,
											"end": 3222,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3216,
											"end": 3229,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3212,
											"end": 3239,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 3202,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "333"
										},
										{
											"begin": 3202,
											"end": 3257,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3253,
											"end": 3254,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3250,
											"end": 3251,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3243,
											"end": 3255,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3202,
											"end": 3257,
											"name": "tag",
											"source": 12,
											"value": "333"
										},
										{
											"begin": 3202,
											"end": 3257,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3293,
											"end": 3295,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3280,
											"end": 3296,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3319,
											"end": 3321,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3311,
											"end": 3317,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3308,
											"end": 3322,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 3305,
											"end": 3339,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3305,
											"end": 3339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "334"
										},
										{
											"begin": 3305,
											"end": 3339,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3335,
											"end": 3336,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3332,
											"end": 3333,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3325,
											"end": 3337,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3305,
											"end": 3339,
											"name": "tag",
											"source": 12,
											"value": "334"
										},
										{
											"begin": 3305,
											"end": 3339,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3390,
											"end": 3397,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 3383,
											"end": 3387,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3373,
											"end": 3379,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3370,
											"end": 3371,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 3366,
											"end": 3380,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 3362,
											"end": 3364,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3358,
											"end": 3381,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3354,
											"end": 3388,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3351,
											"end": 3398,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 3348,
											"end": 3415,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3348,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "335"
										},
										{
											"begin": 3348,
											"end": 3415,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3411,
											"end": 3412,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3408,
											"end": 3409,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3401,
											"end": 3413,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3348,
											"end": 3415,
											"name": "tag",
											"source": 12,
											"value": "335"
										},
										{
											"begin": 3348,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3442,
											"end": 3446,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3434,
											"end": 3447,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3434,
											"end": 3447,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3434,
											"end": 3447,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3434,
											"end": 3447,
											"name": "SWAP10",
											"source": 12
										},
										{
											"begin": 3466,
											"end": 3472,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3466,
											"end": 3472,
											"name": "SWAP9",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3491,
											"end": 3525,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3491,
											"end": 3525,
											"name": "SWAP7",
											"source": 12
										},
										{
											"begin": 3572,
											"end": 3574,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3557,
											"end": 3575,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3544,
											"end": 3576,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3544,
											"end": 3576,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2825,
											"end": 3582,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2825,
											"end": 3582,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2825,
											"end": 3582,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3779,
											"end": 3963,
											"name": "tag",
											"source": 12,
											"value": "131"
										},
										{
											"begin": 3779,
											"end": 3963,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3849,
											"end": 3855,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3902,
											"end": 3904,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3890,
											"end": 3899,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3881,
											"end": 3888,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 3877,
											"end": 3900,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3873,
											"end": 3905,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 3870,
											"end": 3922,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3870,
											"end": 3922,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "338"
										},
										{
											"begin": 3870,
											"end": 3922,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3918,
											"end": 3919,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3915,
											"end": 3916,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3908,
											"end": 3920,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3870,
											"end": 3922,
											"name": "tag",
											"source": 12,
											"value": "338"
										},
										{
											"begin": 3870,
											"end": 3922,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3941,
											"end": 3957,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3957,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3779,
											"end": 3963,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3779,
											"end": 3963,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3968,
											"end": 4324,
											"name": "tag",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 3968,
											"end": 4324,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4170,
											"end": 4172,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4152,
											"end": 4173,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4152,
											"end": 4173,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4152,
											"end": 4173,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4189,
											"end": 4207,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4189,
											"end": 4207,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4189,
											"end": 4207,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4182,
											"end": 4212,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4248,
											"end": 4282,
											"name": "PUSH",
											"source": 12,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 4243,
											"end": 4245,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4228,
											"end": 4246,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4228,
											"end": 4246,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4221,
											"end": 4283,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4315,
											"end": 4317,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 4300,
											"end": 4318,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4300,
											"end": 4318,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3968,
											"end": 4324,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5770,
											"end": 6047,
											"name": "tag",
											"source": 12,
											"value": "184"
										},
										{
											"begin": 5770,
											"end": 6047,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5837,
											"end": 5843,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5890,
											"end": 5892,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5878,
											"end": 5887,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5869,
											"end": 5876,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5865,
											"end": 5888,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5861,
											"end": 5893,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 5858,
											"end": 5910,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5858,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "346"
										},
										{
											"begin": 5858,
											"end": 5910,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5906,
											"end": 5907,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5903,
											"end": 5904,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5896,
											"end": 5908,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5858,
											"end": 5910,
											"name": "tag",
											"source": 12,
											"value": "346"
										},
										{
											"begin": 5858,
											"end": 5910,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5938,
											"end": 5947,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5932,
											"end": 5948,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5991,
											"end": 5996,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5984,
											"end": 5997,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5977,
											"end": 5998,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5970,
											"end": 5975,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5967,
											"end": 5999,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 5957,
											"end": 6017,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "311"
										},
										{
											"begin": 5957,
											"end": 6017,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6013,
											"end": 6014,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6010,
											"end": 6011,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6003,
											"end": 6015,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6813,
											"end": 7064,
											"name": "tag",
											"source": 12,
											"value": "207"
										},
										{
											"begin": 6813,
											"end": 7064,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6883,
											"end": 6889,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6936,
											"end": 6938,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6924,
											"end": 6933,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6915,
											"end": 6922,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6911,
											"end": 6934,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6907,
											"end": 6939,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 6904,
											"end": 6956,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6904,
											"end": 6956,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "351"
										},
										{
											"begin": 6904,
											"end": 6956,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6952,
											"end": 6953,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6949,
											"end": 6950,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6942,
											"end": 6954,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6904,
											"end": 6956,
											"name": "tag",
											"source": 12,
											"value": "351"
										},
										{
											"begin": 6904,
											"end": 6956,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6984,
											"end": 6993,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6978,
											"end": 6994,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7003,
											"end": 7034,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "311"
										},
										{
											"begin": 7028,
											"end": 7033,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7003,
											"end": 7034,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 7003,
											"end": 7034,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9380,
											"end": 9507,
											"name": "tag",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 9380,
											"end": 9507,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9441,
											"end": 9451,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 9436,
											"end": 9439,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 9432,
											"end": 9452,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 9429,
											"end": 9430,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9422,
											"end": 9453,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9472,
											"end": 9476,
											"name": "PUSH",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 9469,
											"end": 9470,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9462,
											"end": 9477,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9496,
											"end": 9500,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 9493,
											"end": 9494,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9486,
											"end": 9501,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9512,
											"end": 9640,
											"name": "tag",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 9512,
											"end": 9640,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9552,
											"end": 9555,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9583,
											"end": 9584,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9579,
											"end": 9585,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 9576,
											"end": 9577,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9573,
											"end": 9586,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 9570,
											"end": 9609,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9570,
											"end": 9609,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "362"
										},
										{
											"begin": 9570,
											"end": 9609,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9589,
											"end": 9607,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "362"
										},
										{
											"begin": 9589,
											"end": 9607,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 9589,
											"end": 9607,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9589,
											"end": 9607,
											"name": "tag",
											"source": 12,
											"value": "362"
										},
										{
											"begin": 9589,
											"end": 9607,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9625,
											"end": 9634,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9625,
											"end": 9634,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9512,
											"end": 9640,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11719,
											"end": 11846,
											"name": "tag",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 11719,
											"end": 11846,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11780,
											"end": 11790,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 11775,
											"end": 11778,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 11771,
											"end": 11791,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 11768,
											"end": 11769,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11761,
											"end": 11792,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11811,
											"end": 11815,
											"name": "PUSH",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 11808,
											"end": 11809,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 11801,
											"end": 11816,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11835,
											"end": 11839,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 11832,
											"end": 11833,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11825,
											"end": 11840,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 11851,
											"end": 11986,
											"name": "tag",
											"source": 12,
											"value": "300"
										},
										{
											"begin": 11851,
											"end": 11986,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11890,
											"end": 11893,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11911,
											"end": 11928,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 11911,
											"end": 11928,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11911,
											"end": 11928,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11908,
											"end": 11951,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "372"
										},
										{
											"begin": 11908,
											"end": 11951,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11931,
											"end": 11949,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "372"
										},
										{
											"begin": 11931,
											"end": 11949,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 11931,
											"end": 11949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11931,
											"end": 11949,
											"name": "tag",
											"source": 12,
											"value": "372"
										},
										{
											"begin": 11931,
											"end": 11949,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11978,
											"end": 11979,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 11967,
											"end": 11980,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11967,
											"end": 11980,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11851,
											"end": 11986,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										}
									]
								},
								"9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572"
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"ERC721A/INagaKid.sol",
								"ERC721A/MintNagaKids.sol",
								"erc721a/contracts/IERC721A.sol",
								"erc721a/contracts/extensions/IERC721ABurnable.sol",
								"erc721a/contracts/extensions/IERC721AQueryable.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DEFAULT()": "0a25dea9",
							"NAGA_HOLDER_MINT_ROUND()": "24c37a85",
							"SPECIAL_MINT_ROUND()": "5b94bbc3",
							"WHITELIST_MINT_ROUND()": "f500cdfc",
							"WITHDRAW_ROLE()": "e02023a1",
							"allowlistMint(bytes32[],uint256,bytes32)": "f6b48e55",
							"currentMintRound()": "ef5fe79f",
							"getMaxSupply()": "4c0f38c2",
							"getTotalSupply()": "c4e41b22",
							"isUserMinted(address,bytes32)": "ffdc6129",
							"merkleRoot()": "2eb4a7ab",
							"nagaKidContract()": "df4e5881",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"setMerkleRoot(bytes32)": "7cb64759",
							"setNagaKidContract(address)": "9e6c8855",
							"setRound(bytes32)": "ff05fe4a",
							"transferOwnership(address)": "f2fde38b",
							"userMintedAmount(address,bytes32)": "b5abafa1",
							"withdraw(address)": "51cff8d9",
							"withdrawCurrency(address,address)": "8407ecc4",
							"withdrawNFT(address,address,uint256)": "bff863ec"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract INagaKid\",\"name\":\"_nagaKidContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRootBefore\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRootAfter\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nagaKidBefore\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nagaKidAfter\",\"type\":\"address\"}],\"name\":\"NagaKidContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roundBefore\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roundAfter\",\"type\":\"bytes32\"}],\"name\":\"RoundChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceOFContract\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceOfContract\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawNFT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAGA_HOLDER_MINT_ROUND\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPECIAL_MINT_ROUND\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_MINT_ROUND\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_round\",\"type\":\"bytes32\"}],\"name\":\"allowlistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMintRound\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_round\",\"type\":\"bytes32\"}],\"name\":\"isUserMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nagaKidContract\",\"outputs\":[{\"internalType\":\"contract INagaKid\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INagaKid\",\"name\":\"_nagaKid\",\"type\":\"address\"}],\"name\":\"setNagaKidContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_round\",\"type\":\"bytes32\"}],\"name\":\"setRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_round\",\"type\":\"bytes32\"}],\"name\":\"userMintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"withdrawCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC721A/MintNagaKids.sol\":\"MintNagaKids\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1aa68fa19422863cc91d23b5896917dbe79175ed47b591148aaeb3e98cb49752\",\"dweb:/ipfs/QmeY64vTRbGhdXcytRKusfJsAfNF4aqr9e1SGBGdCYvW2j\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"ERC721A/INagaKid.sol\":{\"keccak256\":\"0x6d40b0cc478b970043e5567d209eda8b52325f1d271022e638f43e4aefb4e595\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c6f40836e74cc2739a624d11dd24565c4b63fcbe5a06481566e73c1512dfe63\",\"dweb:/ipfs/QmbJKRZNVHk55PV6fEjbE5kgNGLaTJzu8eAvwk2derkhnq\"]},\"ERC721A/MintNagaKids.sol\":{\"keccak256\":\"0x288944401e14951692b0d63c866b5b0722c1f407d5817e06d2b69081d674b9ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2bfa29c17890ad2b0cc80dff855afa7c081dfaf54ca49d6020d15f9ba662207\",\"dweb:/ipfs/QmdxuVaB93QL8fwPDyrGa1BS9D7CtVNPX8XzmSTi1v7gcv\"]},\"erc721a/contracts/IERC721A.sol\":{\"keccak256\":\"0x14469c33c8a3ba9a3627c02ec94dcd9f7f3d6d540f89ea37a358f625058eb309\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a86910ef1502c5c09f71c311d3a9f6d9004b01a3e585628de5240b4096e0d10\",\"dweb:/ipfs/QmQZNkC3oApQvLXgTHnJyQv1LjHokriTSDDupRyTijD1xY\"]},\"erc721a/contracts/extensions/IERC721ABurnable.sol\":{\"keccak256\":\"0xf190b7fd1dfc51d8d259d5dca23f4fa1734f7b090db4a39504ac98f13a5ba4a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f52952c16f9fb4d44fb1758010a805cf340e9d1d59a798c4ec0e41120092f71a\",\"dweb:/ipfs/Qmemym1BpEu1RP8X6GMasiCHuvcx4TgvS4zs8WMf6SeJPQ\"]},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"keccak256\":\"0x55e6863d273b676d65797fee7aac1b520848a0e31c0dd2e5a29887457043b7a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4a8477b7c9788e36787f79ef9b1580c46bdadc13da4c8ef85ce82d42a754743\",\"dweb:/ipfs/QmQvqKtF8YyJKqpEiNh1KkeC1Q5JmvEkQmP2ZCPYSW72BS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "ERC721A/MintNagaKids.sol:MintNagaKids",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 115,
								"contract": "ERC721A/MintNagaKids.sol:MintNagaKids",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 532,
								"contract": "ERC721A/MintNagaKids.sol:MintNagaKids",
								"label": "nagaKidContract",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(INagaKid)494"
							},
							{
								"astId": 534,
								"contract": "ERC721A/MintNagaKids.sol:MintNagaKids",
								"label": "currentMintRound",
								"offset": 0,
								"slot": "3",
								"type": "t_bytes32"
							},
							{
								"astId": 536,
								"contract": "ERC721A/MintNagaKids.sol:MintNagaKids",
								"label": "merkleRoot",
								"offset": 0,
								"slot": "4",
								"type": "t_bytes32"
							},
							{
								"astId": 542,
								"contract": "ERC721A/MintNagaKids.sol:MintNagaKids",
								"label": "_isUserMinted",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
							},
							{
								"astId": 548,
								"contract": "ERC721A/MintNagaKids.sol:MintNagaKids",
								"label": "_userMintedAmount",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(INagaKid)494": {
								"encoding": "inplace",
								"label": "contract INagaKid",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(bytes32 => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_bytes32,t_bool)"
							},
							"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(bytes32 => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_bytes32,t_uint256)"
							},
							"t_mapping(t_bytes32,t_bool)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_bytes32,t_uint256)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"erc721a/contracts/IERC721A.sol": {
				"IERC721A": {
					"abi": [
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintERC2309QuantityExceedsLimit",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintZeroQuantity",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnershipNotInitializedForExtraData",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "URIQueryForNonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "fromTokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "toTokenId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "ConsecutiveTransfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of an ERC721A compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"ConsecutiveTransfer(uint256,uint256,address,address)": {
								"details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the ERC2309 standard. See `_mintERC2309` for more details."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract. Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of an ERC721A compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the ERC2309 standard. See `_mintERC2309` for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract. Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"erc721a/contracts/IERC721A.sol\":\"IERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"erc721a/contracts/IERC721A.sol\":{\"keccak256\":\"0x14469c33c8a3ba9a3627c02ec94dcd9f7f3d6d540f89ea37a358f625058eb309\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a86910ef1502c5c09f71c311d3a9f6d9004b01a3e585628de5240b4096e0d10\",\"dweb:/ipfs/QmQZNkC3oApQvLXgTHnJyQv1LjHokriTSDDupRyTijD1xY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"ApprovalCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"ApprovalQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"ApproveToCaller()": [
								{
									"notice": "The caller cannot approve to their own address."
								}
							],
							"BalanceQueryForZeroAddress()": [
								{
									"notice": "Cannot query the balance for the zero address."
								}
							],
							"MintERC2309QuantityExceedsLimit()": [
								{
									"notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
								}
							],
							"MintToZeroAddress()": [
								{
									"notice": "Cannot mint to the zero address."
								}
							],
							"MintZeroQuantity()": [
								{
									"notice": "The quantity of tokens minted must be more than zero."
								}
							],
							"OwnerQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"OwnershipNotInitializedForExtraData()": [
								{
									"notice": "The `extraData` cannot be set on an unintialized ownership slot."
								}
							],
							"TransferCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"TransferFromIncorrectOwner()": [
								{
									"notice": "The token must be owned by `from`."
								}
							],
							"TransferToNonERC721ReceiverImplementer()": [
								{
									"notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
								}
							],
							"TransferToZeroAddress()": [
								{
									"notice": "Cannot transfer to the zero address."
								}
							],
							"URIQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							]
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"erc721a/contracts/extensions/IERC721ABurnable.sol": {
				"IERC721ABurnable": {
					"abi": [
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintERC2309QuantityExceedsLimit",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintZeroQuantity",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnershipNotInitializedForExtraData",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "URIQueryForNonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "fromTokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "toTokenId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "ConsecutiveTransfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of an ERC721ABurnable compliant contract.",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"details": "Burns `tokenId`. See {ERC721A-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract. Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of an ERC721ABurnable compliant contract.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721A-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract. Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"erc721a/contracts/extensions/IERC721ABurnable.sol\":\"IERC721ABurnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"erc721a/contracts/IERC721A.sol\":{\"keccak256\":\"0x14469c33c8a3ba9a3627c02ec94dcd9f7f3d6d540f89ea37a358f625058eb309\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a86910ef1502c5c09f71c311d3a9f6d9004b01a3e585628de5240b4096e0d10\",\"dweb:/ipfs/QmQZNkC3oApQvLXgTHnJyQv1LjHokriTSDDupRyTijD1xY\"]},\"erc721a/contracts/extensions/IERC721ABurnable.sol\":{\"keccak256\":\"0xf190b7fd1dfc51d8d259d5dca23f4fa1734f7b090db4a39504ac98f13a5ba4a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f52952c16f9fb4d44fb1758010a805cf340e9d1d59a798c4ec0e41120092f71a\",\"dweb:/ipfs/Qmemym1BpEu1RP8X6GMasiCHuvcx4TgvS4zs8WMf6SeJPQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"ApprovalCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"ApprovalQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"ApproveToCaller()": [
								{
									"notice": "The caller cannot approve to their own address."
								}
							],
							"BalanceQueryForZeroAddress()": [
								{
									"notice": "Cannot query the balance for the zero address."
								}
							],
							"MintERC2309QuantityExceedsLimit()": [
								{
									"notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
								}
							],
							"MintToZeroAddress()": [
								{
									"notice": "Cannot mint to the zero address."
								}
							],
							"MintZeroQuantity()": [
								{
									"notice": "The quantity of tokens minted must be more than zero."
								}
							],
							"OwnerQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"OwnershipNotInitializedForExtraData()": [
								{
									"notice": "The `extraData` cannot be set on an unintialized ownership slot."
								}
							],
							"TransferCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"TransferFromIncorrectOwner()": [
								{
									"notice": "The token must be owned by `from`."
								}
							],
							"TransferToNonERC721ReceiverImplementer()": [
								{
									"notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
								}
							],
							"TransferToZeroAddress()": [
								{
									"notice": "Cannot transfer to the zero address."
								}
							],
							"URIQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							]
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"erc721a/contracts/extensions/IERC721AQueryable.sol": {
				"IERC721AQueryable": {
					"abi": [
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidQueryRange",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintERC2309QuantityExceedsLimit",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintZeroQuantity",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnershipNotInitializedForExtraData",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "URIQueryForNonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "fromTokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "toTokenId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "ConsecutiveTransfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "explicitOwnershipOf",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "addr",
											"type": "address"
										},
										{
											"internalType": "uint64",
											"name": "startTimestamp",
											"type": "uint64"
										},
										{
											"internalType": "bool",
											"name": "burned",
											"type": "bool"
										},
										{
											"internalType": "uint24",
											"name": "extraData",
											"type": "uint24"
										}
									],
									"internalType": "struct IERC721A.TokenOwnership",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "tokenIds",
									"type": "uint256[]"
								}
							],
							"name": "explicitOwnershipsOf",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "addr",
											"type": "address"
										},
										{
											"internalType": "uint64",
											"name": "startTimestamp",
											"type": "uint64"
										},
										{
											"internalType": "bool",
											"name": "burned",
											"type": "bool"
										},
										{
											"internalType": "uint24",
											"name": "extraData",
											"type": "uint24"
										}
									],
									"internalType": "struct IERC721A.TokenOwnership[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "tokensOfOwner",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "start",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stop",
									"type": "uint256"
								}
							],
							"name": "tokensOfOwnerIn",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of an ERC721AQueryable compliant contract.",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"explicitOwnershipOf(uint256)": {
								"details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds:   - `addr` = `address(0)`   - `startTimestamp` = `0`   - `burned` = `false` If the `tokenId` is burned:   - `addr` = `<Address of owner before token was burned>`   - `startTimestamp` = `<Timestamp when token was burned>`   - `burned = `true` Otherwise:   - `addr` = `<Address of owner>`   - `startTimestamp` = `<Timestamp of start of ownership>`   - `burned = `false`"
							},
							"explicitOwnershipsOf(uint256[])": {
								"details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"tokensOfOwner(address)": {
								"details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(totalSupply) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K pfp collections should be fine)."
							},
							"tokensOfOwnerIn(address,uint256,uint256)": {
								"details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start` < `stop`"
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract. Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"explicitOwnershipOf(uint256)": "c23dc68f",
							"explicitOwnershipsOf(uint256[])": "5bbb2177",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"tokensOfOwner(address)": "8462151c",
							"tokensOfOwnerIn(address,uint256,uint256)": "99a2557a",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of an ERC721AQueryable compliant contract.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds:   - `addr` = `address(0)`   - `startTimestamp` = `0`   - `burned` = `false` If the `tokenId` is burned:   - `addr` = `<Address of owner before token was burned>`   - `startTimestamp` = `<Timestamp when token was burned>`   - `burned = `true` Otherwise:   - `addr` = `<Address of owner>`   - `startTimestamp` = `<Timestamp of start of ownership>`   - `burned = `false`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(totalSupply) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K pfp collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start` < `stop`\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract. Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"erc721a/contracts/extensions/IERC721AQueryable.sol\":\"IERC721AQueryable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"erc721a/contracts/IERC721A.sol\":{\"keccak256\":\"0x14469c33c8a3ba9a3627c02ec94dcd9f7f3d6d540f89ea37a358f625058eb309\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a86910ef1502c5c09f71c311d3a9f6d9004b01a3e585628de5240b4096e0d10\",\"dweb:/ipfs/QmQZNkC3oApQvLXgTHnJyQv1LjHokriTSDDupRyTijD1xY\"]},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"keccak256\":\"0x55e6863d273b676d65797fee7aac1b520848a0e31c0dd2e5a29887457043b7a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4a8477b7c9788e36787f79ef9b1580c46bdadc13da4c8ef85ce82d42a754743\",\"dweb:/ipfs/QmQvqKtF8YyJKqpEiNh1KkeC1Q5JmvEkQmP2ZCPYSW72BS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"ApprovalCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"ApprovalQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"ApproveToCaller()": [
								{
									"notice": "The caller cannot approve to their own address."
								}
							],
							"BalanceQueryForZeroAddress()": [
								{
									"notice": "Cannot query the balance for the zero address."
								}
							],
							"InvalidQueryRange()": [
								{
									"notice": "Invalid query range (`start` >= `stop`)."
								}
							],
							"MintERC2309QuantityExceedsLimit()": [
								{
									"notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
								}
							],
							"MintToZeroAddress()": [
								{
									"notice": "Cannot mint to the zero address."
								}
							],
							"MintZeroQuantity()": [
								{
									"notice": "The quantity of tokens minted must be more than zero."
								}
							],
							"OwnerQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"OwnershipNotInitializedForExtraData()": [
								{
									"notice": "The `extraData` cannot be set on an unintialized ownership slot."
								}
							],
							"TransferCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"TransferFromIncorrectOwner()": [
								{
									"notice": "The token must be owned by `from`."
								}
							],
							"TransferToNonERC721ReceiverImplementer()": [
								{
									"notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
								}
							],
							"TransferToZeroAddress()": [
								{
									"notice": "Cannot transfer to the zero address."
								}
							],
							"URIQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							]
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							360
						],
						"Ownable": [
							104
						]
					},
					"id": 105,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 361,
							"src": "112:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 360,
										"src": "668:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								360
							],
							"name": "Ownable",
							"nameLocation": "657:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "698:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 104,
									"src": "682:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "717:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "754:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "738:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "785:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "769:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:0"
									},
									"src": "711:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "911:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 350,
																"src": "940:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "921:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "921:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:0"
									},
									"scope": 104,
									"src": "897:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "1091:30:0",
										"statements": [
											{
												"expression": {
													"id": 29,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1108:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 28,
												"id": 30,
												"nodeType": "Return",
												"src": "1101:13:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 32,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1045:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:0"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "1082:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:0"
									},
									"scope": 104,
									"src": "1036:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1230:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 36,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 32,
																	"src": "1248:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 38,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 350,
																	"src": "1259:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 35,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:0"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:0"
											}
										]
									},
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nameLocation": "1218:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:0"
									},
									"src": "1209:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1722:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 55,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 53,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 52,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "1732:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 50,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 49,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1712:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1677:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:0"
									},
									"scope": 104,
									"src": "1668:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "1988:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 69,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "2006:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 72,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 70,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 68,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 77,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 79,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "2100:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 78,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2081:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 66,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 65,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1927:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1953:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "1945:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 104,
									"src": "1918:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2333:124:0",
										"statements": [
											{
												"assignments": [
													90
												],
												"declarations": [
													{
														"constant": false,
														"id": 90,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2351:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "2343:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 89,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 92,
												"initialValue": {
													"id": 91,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2362:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:0"
											},
											{
												"expression": {
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 93,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2378:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 94,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "2387:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 98,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "2431:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 99,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2441:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 97,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2410:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "2405:45:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2279:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2306:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2298:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:0"
									},
									"scope": 104,
									"src": "2270:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "639:1820:0",
							"usedErrors": []
						}
					],
					"src": "87:2373:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							144
						]
					},
					"id": 145,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 144,
							"linearizedBaseContracts": [
								144
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 110,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1661:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 108,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 109,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 113,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1708:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 111,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 112,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 115,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1752:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 114,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "1796:39:1",
										"statements": [
											{
												"expression": {
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 118,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "1806:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 119,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "1816:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 121,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:1"
											}
										]
									},
									"id": 123,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:1"
									},
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:1"
									},
									"scope": 144,
									"src": "1782:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 142,
										"nodeType": "Block",
										"src": "2236:421:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 127,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 115,
																"src": "2325:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 128,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "2336:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 126,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 132,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:1"
											},
											{
												"expression": {
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 133,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2455:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 134,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 113,
														"src": "2465:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:1"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:1"
											},
											{
												"expression": {
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 138,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2628:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 139,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "2638:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:1"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 143,
									"name": "nonReentrant",
									"nameLocation": "2221:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:1"
									},
									"src": "2212:445:1",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 145,
							"src": "873:1786:1",
							"usedErrors": []
						}
					],
					"src": "97:2563:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							222
						]
					},
					"id": 223,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 146,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 147,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 222,
							"linearizedBaseContracts": [
								222
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 156,
									"name": "Transfer",
									"nameLocation": "394:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "403:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "425:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 154,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "445:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:2"
									},
									"src": "388:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 165,
									"name": "Approval",
									"nameLocation": "625:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "634:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "657:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "682:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:2"
									},
									"src": "619:78:2"
								},
								{
									"documentation": {
										"id": 166,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:2"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "820:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 168,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:2"
									},
									"scope": 222,
									"src": "774:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 179,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "931:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:2"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "971:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:2"
									},
									"scope": 222,
									"src": "912:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 180,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1211:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1223:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:2"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1257:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 186,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:2"
									},
									"scope": 222,
									"src": "1193:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 199,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "1557:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "1572:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:2"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "1612:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 196,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:2"
									},
									"scope": 222,
									"src": "1538:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 209,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "2291:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "2308:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:2"
									},
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "2342:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 206,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:2"
									},
									"scope": 222,
									"src": "2274:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 210,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 221,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2677:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 211,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2699:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2719:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 215,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:2"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2758:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 218,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:2"
									},
									"scope": 222,
									"src": "2646:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 223,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							465
						],
						"IERC721": [
							338
						]
					},
					"id": 339,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 224,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 225,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 339,
							"sourceUnit": 466,
							"src": "133:47:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 227,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 465,
										"src": "271:7:3"
									},
									"id": 228,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:3"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 226,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:3",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 338,
							"linearizedBaseContracts": [
								338,
								465
							],
							"name": "IERC721",
							"nameLocation": "260:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 229,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:3",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 237,
									"name": "Transfer",
									"nameLocation": "384:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 231,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "393:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 230,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 233,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "415:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 232,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "435:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:3"
									},
									"src": "378:82:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:3",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 246,
									"name": "Approval",
									"nameLocation": "571:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "580:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "603:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 244,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "629:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 243,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:3"
									},
									"src": "565:89:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 247,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:3",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 255,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 249,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "803:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 248,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 251,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "826:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 250,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 253,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "852:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 252,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:3"
									},
									"src": "782:85:3"
								},
								{
									"documentation": {
										"id": 256,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:3",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 263,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "973:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:3"
									},
									"returnParameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "1011:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:3"
									},
									"scope": 338,
									"src": "954:74:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:3",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 271,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "1187:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:3"
									},
									"returnParameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "1227:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 268,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:3"
									},
									"scope": 338,
									"src": "1170:72:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:3",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 283,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "1844:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "1866:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "1886:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 277,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 280,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "1911:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 279,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:3"
									},
									"returnParameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:3"
									},
									"scope": 338,
									"src": "1809:137:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 284,
										"nodeType": "StructuredDocumentation",
										"src": "1952:690:3",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 293,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2656:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2690:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "2682:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2682:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2712:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "2704:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 287,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2704:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2732:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "2724:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2672:73:3"
									},
									"returnParameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2754:0:3"
									},
									"scope": 338,
									"src": "2647:108:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 294,
										"nodeType": "StructuredDocumentation",
										"src": "2761:504:3",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 303,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3279:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3309:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "3301:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3301:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3331:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "3323:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 297,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3323:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3351:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "3343:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3343:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3291:73:3"
									},
									"returnParameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3373:0:3"
									},
									"scope": 338,
									"src": "3270:104:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 304,
										"nodeType": "StructuredDocumentation",
										"src": "3380:452:3",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 311,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3846:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3862:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 311,
												"src": "3854:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3854:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3874:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 311,
												"src": "3866:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3866:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3853:29:3"
									},
									"returnParameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3891:0:3"
									},
									"scope": 338,
									"src": "3837:55:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 312,
										"nodeType": "StructuredDocumentation",
										"src": "3898:309:3",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 319,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4221:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4247:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "4239:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 313,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4239:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4262:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "4257:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 315,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4257:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4238:34:3"
									},
									"returnParameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4281:0:3"
									},
									"scope": 338,
									"src": "4212:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "4288:139:3",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 327,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4441:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4461:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "4453:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 321,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4453:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4452:17:3"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4501:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "4493:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 324,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4493:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4492:18:3"
									},
									"scope": 338,
									"src": "4432:79:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 328,
										"nodeType": "StructuredDocumentation",
										"src": "4517:138:3",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 337,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4669:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4694:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "4686:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 329,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4686:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4709:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "4701:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 331,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4701:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4685:33:3"
									},
									"returnParameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "4742:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 334,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4742:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4741:6:3"
									},
									"scope": 338,
									"src": "4660:88:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 339,
							"src": "250:4500:3",
							"usedErrors": []
						}
					],
					"src": "108:4643:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							360
						]
					},
					"id": 361,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 340,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 341,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 360,
							"linearizedBaseContracts": [
								360
							],
							"name": "Context",
							"nameLocation": "626:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 349,
										"nodeType": "Block",
										"src": "702:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 346,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 345,
												"id": 348,
												"nodeType": "Return",
												"src": "712:17:4"
											}
										]
									},
									"id": 350,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:4"
									},
									"returnParameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "693:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 343,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:4"
									},
									"scope": 360,
									"src": "640:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 358,
										"nodeType": "Block",
										"src": "809:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 355,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 354,
												"id": 357,
												"nodeType": "Return",
												"src": "819:15:4"
											}
										]
									},
									"id": 359,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:4"
									},
									"returnParameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "793:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 352,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:4"
									},
									"scope": 360,
									"src": "742:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 361,
							"src": "608:235:4",
							"usedErrors": []
						}
					],
					"src": "86:758:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
					"exportedSymbols": {
						"MerkleProof": [
							453
						]
					},
					"id": 454,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 362,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleProof",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 363,
								"nodeType": "StructuredDocumentation",
								"src": "143:656:5",
								"text": " @dev These functions deal with verification of Merkle Trees proofs.\n The proofs can be generated using the JavaScript library\n https://github.com/miguelmota/merkletreejs[merkletreejs].\n Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value."
							},
							"fullyImplemented": true,
							"id": 453,
							"linearizedBaseContracts": [
								453
							],
							"name": "MerkleProof",
							"nameLocation": "808:11:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 383,
										"nodeType": "Block",
										"src": "1281:57:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 377,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 367,
																"src": "1311:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 378,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 371,
																"src": "1318:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 376,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "1298:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32) pure returns (bytes32)"
															}
														},
														"id": 379,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1298:25:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 380,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 369,
														"src": "1327:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1298:33:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 375,
												"id": 382,
												"nodeType": "Return",
												"src": "1291:40:5"
											}
										]
									},
									"documentation": {
										"id": 364,
										"nodeType": "StructuredDocumentation",
										"src": "826:323:5",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."
									},
									"id": 384,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "1163:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1196:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "1179:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 365,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1179:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 366,
													"nodeType": "ArrayTypeName",
													"src": "1179:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "1219:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "1211:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 368,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1241:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "1233:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 370,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1169:82:5"
									},
									"returnParameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "1275:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 373,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1275:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1274:6:5"
									},
									"scope": 453,
									"src": "1154:184:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 440,
										"nodeType": "Block",
										"src": "1781:570:5",
										"statements": [
											{
												"assignments": [
													396
												],
												"declarations": [
													{
														"constant": false,
														"id": 396,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "1799:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 440,
														"src": "1791:20:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 395,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1791:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 398,
												"initialValue": {
													"id": 397,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 390,
													"src": "1814:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1791:27:5"
											},
											{
												"body": {
													"id": 436,
													"nodeType": "Block",
													"src": "1871:445:5",
													"statements": [
														{
															"assignments": [
																411
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 411,
																	"mutability": "mutable",
																	"name": "proofElement",
																	"nameLocation": "1893:12:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 436,
																	"src": "1885:20:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 410,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "1885:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 415,
															"initialValue": {
																"baseExpression": {
																	"id": 412,
																	"name": "proof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "1908:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	}
																},
																"id": 414,
																"indexExpression": {
																	"id": 413,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 400,
																	"src": "1914:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1908:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1885:31:5"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 418,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 416,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 396,
																	"src": "1934:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 417,
																	"name": "proofElement",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 411,
																	"src": "1950:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "1934:28:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 434,
																"nodeType": "Block",
																"src": "2138:168:5",
																"statements": [
																	{
																		"expression": {
																			"id": 432,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 427,
																				"name": "computedHash",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 396,
																				"src": "2234:12:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"id": 429,
																						"name": "proofElement",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 411,
																						"src": "2264:12:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 430,
																						"name": "computedHash",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 396,
																						"src": "2278:12:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 428,
																					"name": "_efficientHash",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 452,
																					"src": "2249:14:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																						"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																					}
																				},
																				"id": 431,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2249:42:5",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "2234:57:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 433,
																		"nodeType": "ExpressionStatement",
																		"src": "2234:57:5"
																	}
																]
															},
															"id": 435,
															"nodeType": "IfStatement",
															"src": "1930:376:5",
															"trueBody": {
																"id": 426,
																"nodeType": "Block",
																"src": "1964:168:5",
																"statements": [
																	{
																		"expression": {
																			"id": 424,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 419,
																				"name": "computedHash",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 396,
																				"src": "2060:12:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"id": 421,
																						"name": "computedHash",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 396,
																						"src": "2090:12:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 422,
																						"name": "proofElement",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 411,
																						"src": "2104:12:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 420,
																					"name": "_efficientHash",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 452,
																					"src": "2075:14:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																						"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																					}
																				},
																				"id": 423,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2075:42:5",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "2060:57:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 425,
																		"nodeType": "ExpressionStatement",
																		"src": "2060:57:5"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 403,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 400,
														"src": "1848:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 404,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "1852:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 405,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1852:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1848:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 437,
												"initializationExpression": {
													"assignments": [
														400
													],
													"declarations": [
														{
															"constant": false,
															"id": 400,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1841:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 437,
															"src": "1833:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 399,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1833:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 402,
													"initialValue": {
														"hexValue": "30",
														"id": 401,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1845:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1833:13:5"
												},
												"loopExpression": {
													"expression": {
														"id": 408,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1866:3:5",
														"subExpression": {
															"id": 407,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 400,
															"src": "1866:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 409,
													"nodeType": "ExpressionStatement",
													"src": "1866:3:5"
												},
												"nodeType": "ForStatement",
												"src": "1828:488:5"
											},
											{
												"expression": {
													"id": 438,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 396,
													"src": "2332:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 394,
												"id": 439,
												"nodeType": "Return",
												"src": "2325:19:5"
											}
										]
									},
									"documentation": {
										"id": 385,
										"nodeType": "StructuredDocumentation",
										"src": "1344:340:5",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"
									},
									"id": 441,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "1698:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1728:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "1711:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 386,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1711:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 387,
													"nodeType": "ArrayTypeName",
													"src": "1711:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1743:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "1735:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 389,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1735:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1710:38:5"
									},
									"returnParameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "1772:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 392,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1772:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1771:9:5"
									},
									"scope": 453,
									"src": "1689:662:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 451,
										"nodeType": "Block",
										"src": "2440:135:5",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2459:110:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2480:4:5",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "2486:1:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2473:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2473:15:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2473:15:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2508:4:5",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "2514:1:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2501:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2501:15:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2501:15:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2529:30:5",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2548:4:5",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2554:4:5",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "2538:9:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2538:21:5"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2529:5:5"
																}
															]
														}
													]
												},
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 443,
														"isOffset": false,
														"isSlot": false,
														"src": "2486:1:5",
														"valueSize": 1
													},
													{
														"declaration": 445,
														"isOffset": false,
														"isSlot": false,
														"src": "2514:1:5",
														"valueSize": 1
													},
													{
														"declaration": 448,
														"isOffset": false,
														"isSlot": false,
														"src": "2529:5:5",
														"valueSize": 1
													}
												],
												"id": 450,
												"nodeType": "InlineAssembly",
												"src": "2450:119:5"
											}
										]
									},
									"id": 452,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_efficientHash",
									"nameLocation": "2366:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 443,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2389:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "2381:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 442,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2381:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2400:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "2392:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 444,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2392:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2380:22:5"
									},
									"returnParameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2433:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "2425:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 447,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2424:15:5"
									},
									"scope": 453,
									"src": "2357:218:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 454,
							"src": "800:1777:5",
							"usedErrors": []
						}
					],
					"src": "118:2460:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							465
						]
					},
					"id": 466,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 455,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 456,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:6",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 465,
							"linearizedBaseContracts": [
								465
							],
							"name": "IERC165",
							"nameLocation": "415:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 457,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:6",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 464,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 459,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "801:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 458,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:6"
									},
									"returnParameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "844:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 461,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:6"
									},
									"scope": 465,
									"src": "774:76:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 466,
							"src": "405:447:6",
							"usedErrors": []
						}
					],
					"src": "100:753:6"
				},
				"id": 6
			},
			"ERC721A/INagaKid.sol": {
				"ast": {
					"absolutePath": "ERC721A/INagaKid.sol",
					"exportedSymbols": {
						"IERC721A": [
							1202
						],
						"IERC721ABurnable": [
							1215
						],
						"IERC721AQueryable": [
							1267
						],
						"INagaKid": [
							494
						]
					},
					"id": 495,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 467,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".15"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:7"
						},
						{
							"absolutePath": "erc721a/contracts/IERC721A.sol",
							"file": "erc721a/contracts/IERC721A.sol",
							"id": 468,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 495,
							"sourceUnit": 1203,
							"src": "61:40:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "erc721a/contracts/extensions/IERC721ABurnable.sol",
							"file": "erc721a/contracts/extensions/IERC721ABurnable.sol",
							"id": 469,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 495,
							"sourceUnit": 1216,
							"src": "103:59:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "erc721a/contracts/extensions/IERC721AQueryable.sol",
							"file": "erc721a/contracts/extensions/IERC721AQueryable.sol",
							"id": 470,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 495,
							"sourceUnit": 1268,
							"src": "164:60:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 471,
										"name": "IERC721A",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1202,
										"src": "252:8:7"
									},
									"id": 472,
									"nodeType": "InheritanceSpecifier",
									"src": "252:8:7"
								},
								{
									"baseName": {
										"id": 473,
										"name": "IERC721AQueryable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1267,
										"src": "261:17:7"
									},
									"id": 474,
									"nodeType": "InheritanceSpecifier",
									"src": "261:17:7"
								}
							],
							"canonicalName": "INagaKid",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 494,
							"linearizedBaseContracts": [
								494,
								1267,
								1202
							],
							"name": "INagaKid",
							"nameLocation": "240:8:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "d5abeb01",
									"id": 479,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxSupply",
									"nameLocation": "297:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "306:2:7"
									},
									"returnParameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "332:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "332:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "331:9:7"
									},
									"scope": 494,
									"src": "288:53:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "aa271e1a",
									"id": 486,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isMinter",
									"nameLocation": "356:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "minter",
												"nameLocation": "373:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 486,
												"src": "365:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 480,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "365:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "364:16:7"
									},
									"returnParameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 486,
												"src": "403:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 483,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "403:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:6:7"
									},
									"scope": 494,
									"src": "347:62:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "a1448194",
									"id": 493,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeMint",
									"nameLocation": "424:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "433:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 487,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "433:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "449:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "444:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 489,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "444:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "432:24:7"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "465:0:7"
									},
									"scope": 494,
									"src": "415:51:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 495,
							"src": "230:245:7",
							"usedErrors": [
								999,
								1002,
								1005,
								1008,
								1011,
								1014,
								1017,
								1020,
								1023,
								1026,
								1029,
								1032,
								1035,
								1038,
								1224
							]
						}
					],
					"src": "33:444:7"
				},
				"id": 7
			},
			"ERC721A/MintNagaKids.sol": {
				"ast": {
					"absolutePath": "ERC721A/MintNagaKids.sol",
					"exportedSymbols": {
						"Context": [
							360
						],
						"IERC165": [
							465
						],
						"IERC20": [
							222
						],
						"IERC721": [
							338
						],
						"IERC721A": [
							1202
						],
						"IERC721ABurnable": [
							1215
						],
						"IERC721AQueryable": [
							1267
						],
						"INagaKid": [
							494
						],
						"MerkleProof": [
							453
						],
						"MintNagaKids": [
							993
						],
						"Ownable": [
							104
						],
						"ReentrancyGuard": [
							144
						]
					},
					"id": 994,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 496,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".15"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 497,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 994,
							"sourceUnit": 223,
							"src": "61:56:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 498,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 994,
							"sourceUnit": 339,
							"src": "119:58:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"id": 499,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 994,
							"sourceUnit": 454,
							"src": "179:68:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 500,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 994,
							"sourceUnit": 145,
							"src": "249:62:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 501,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 994,
							"sourceUnit": 105,
							"src": "313:52:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "ERC721A/INagaKid.sol",
							"file": "./INagaKid.sol",
							"id": 502,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 994,
							"sourceUnit": 495,
							"src": "367:24:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 503,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 104,
										"src": "420:7:8"
									},
									"id": 504,
									"nodeType": "InheritanceSpecifier",
									"src": "420:7:8"
								},
								{
									"baseName": {
										"id": 505,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 144,
										"src": "429:15:8"
									},
									"id": 506,
									"nodeType": "InheritanceSpecifier",
									"src": "429:15:8"
								}
							],
							"canonicalName": "MintNagaKids",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 993,
							"linearizedBaseContracts": [
								993,
								144,
								104,
								360
							],
							"name": "MintNagaKids",
							"nameLocation": "404:12:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"functionSelector": "f500cdfc",
									"id": 511,
									"mutability": "constant",
									"name": "WHITELIST_MINT_ROUND",
									"nameLocation": "478:20:8",
									"nodeType": "VariableDeclaration",
									"scope": 993,
									"src": "454:80:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 507,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "454:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "57484954454c4953545f4d494e545f524f554e44",
												"id": 509,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "511:22:8",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_68e7d51fdb912cb107dda2e59b053d87fcca666dd0ef5339cd3474ccb5276bba",
													"typeString": "literal_string \"WHITELIST_MINT_ROUND\""
												},
												"value": "WHITELIST_MINT_ROUND"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_68e7d51fdb912cb107dda2e59b053d87fcca666dd0ef5339cd3474ccb5276bba",
													"typeString": "literal_string \"WHITELIST_MINT_ROUND\""
												}
											],
											"id": 508,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "501:9:8",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 510,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "501:33:8",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "24c37a85",
									"id": 516,
									"mutability": "constant",
									"name": "NAGA_HOLDER_MINT_ROUND",
									"nameLocation": "635:22:8",
									"nodeType": "VariableDeclaration",
									"scope": 993,
									"src": "611:84:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 512,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "611:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "4e4147415f484f4c4445525f4d494e545f524f554e44",
												"id": 514,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "670:24:8",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_b3c595e55271590809f54e2f4fc3a582754f45b104dd3c41666e2ad310493db3",
													"typeString": "literal_string \"NAGA_HOLDER_MINT_ROUND\""
												},
												"value": "NAGA_HOLDER_MINT_ROUND"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_b3c595e55271590809f54e2f4fc3a582754f45b104dd3c41666e2ad310493db3",
													"typeString": "literal_string \"NAGA_HOLDER_MINT_ROUND\""
												}
											],
											"id": 513,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "660:9:8",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 515,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "660:35:8",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "5b94bbc3",
									"id": 521,
									"mutability": "constant",
									"name": "SPECIAL_MINT_ROUND",
									"nameLocation": "796:18:8",
									"nodeType": "VariableDeclaration",
									"scope": 993,
									"src": "772:76:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 517,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "772:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5350454349414c5f4d494e545f524f554e44",
												"id": 519,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "827:20:8",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_5c8c0ce107274ad0569bd760c3d2406c1ed72c697935f3f965bd096c5cdedee4",
													"typeString": "literal_string \"SPECIAL_MINT_ROUND\""
												},
												"value": "SPECIAL_MINT_ROUND"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_5c8c0ce107274ad0569bd760c3d2406c1ed72c697935f3f965bd096c5cdedee4",
													"typeString": "literal_string \"SPECIAL_MINT_ROUND\""
												}
											],
											"id": 518,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "817:9:8",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 520,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "817:31:8",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "0a25dea9",
									"id": 524,
									"mutability": "constant",
									"name": "DEFAULT",
									"nameLocation": "949:7:8",
									"nodeType": "VariableDeclaration",
									"scope": 993,
									"src": "925:100:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 522,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "925:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030",
										"id": 523,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "959:66:8",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0x0000000000000000000000000000000000000000000000000000000000000000"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "e02023a1",
									"id": 529,
									"mutability": "constant",
									"name": "WITHDRAW_ROLE",
									"nameLocation": "1062:13:8",
									"nodeType": "VariableDeclaration",
									"scope": 993,
									"src": "1038:66:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 525,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1038:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "57495448445241575f524f4c45",
												"id": 527,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1088:15:8",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec",
													"typeString": "literal_string \"WITHDRAW_ROLE\""
												},
												"value": "WITHDRAW_ROLE"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec",
													"typeString": "literal_string \"WITHDRAW_ROLE\""
												}
											],
											"id": 526,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1078:9:8",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 528,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1078:26:8",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "df4e5881",
									"id": 532,
									"mutability": "mutable",
									"name": "nagaKidContract",
									"nameLocation": "1129:15:8",
									"nodeType": "VariableDeclaration",
									"scope": 993,
									"src": "1113:31:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_INagaKid_$494",
										"typeString": "contract INagaKid"
									},
									"typeName": {
										"id": 531,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 530,
											"name": "INagaKid",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 494,
											"src": "1113:8:8"
										},
										"referencedDeclaration": 494,
										"src": "1113:8:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_INagaKid_$494",
											"typeString": "contract INagaKid"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "ef5fe79f",
									"id": 534,
									"mutability": "mutable",
									"name": "currentMintRound",
									"nameLocation": "1166:16:8",
									"nodeType": "VariableDeclaration",
									"scope": 993,
									"src": "1151:31:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 533,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1151:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2eb4a7ab",
									"id": 536,
									"mutability": "mutable",
									"name": "merkleRoot",
									"nameLocation": "1204:10:8",
									"nodeType": "VariableDeclaration",
									"scope": 993,
									"src": "1189:25:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 535,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1189:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 542,
									"mutability": "mutable",
									"name": "_isUserMinted",
									"nameLocation": "1277:13:8",
									"nodeType": "VariableDeclaration",
									"scope": 993,
									"src": "1223:67:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(bytes32 => bool))"
									},
									"typeName": {
										"id": 541,
										"keyType": {
											"id": 537,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1231:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1223:44:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(bytes32 => bool))"
										},
										"valueType": {
											"id": 540,
											"keyType": {
												"id": 538,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1250:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"nodeType": "Mapping",
											"src": "1242:24:8",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
												"typeString": "mapping(bytes32 => bool)"
											},
											"valueType": {
												"id": 539,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1261:4:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 548,
									"mutability": "mutable",
									"name": "_userMintedAmount",
									"nameLocation": "1354:17:8",
									"nodeType": "VariableDeclaration",
									"scope": 993,
									"src": "1297:74:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(bytes32 => uint256))"
									},
									"typeName": {
										"id": 547,
										"keyType": {
											"id": 543,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1305:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1297:47:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(bytes32 => uint256))"
										},
										"valueType": {
											"id": 546,
											"keyType": {
												"id": 544,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1324:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"nodeType": "Mapping",
											"src": "1316:27:8",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
												"typeString": "mapping(bytes32 => uint256)"
											},
											"valueType": {
												"id": 545,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1335:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"eventSelector": "25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff",
									"id": 556,
									"name": "Minted",
									"nameLocation": "1401:6:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 550,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1424:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1408:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 549,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1408:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 552,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1438:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1430:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 551,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1430:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 554,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "1454:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1446:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 553,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1446:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1407:57:8"
									},
									"src": "1395:70:8"
								},
								{
									"anonymous": false,
									"eventSelector": "abdf056c85a221fcb31d0366c4475b6b2c613df2eeea951a9fcb3e1a8595d973",
									"id": 562,
									"name": "NagaKidContractChanged",
									"nameLocation": "1477:22:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"indexed": false,
												"mutability": "mutable",
												"name": "nagaKidBefore",
												"nameLocation": "1508:13:8",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "1500:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1500:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"indexed": false,
												"mutability": "mutable",
												"name": "nagaKidAfter",
												"nameLocation": "1531:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "1523:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 559,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1523:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1499:45:8"
									},
									"src": "1471:74:8"
								},
								{
									"anonymous": false,
									"eventSelector": "123d88ba82600dfc3f219f8885c691b0ff020caa535666874b3f5174973757fe",
									"id": 568,
									"name": "MerkleRootChanged",
									"nameLocation": "1557:17:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 564,
												"indexed": false,
												"mutability": "mutable",
												"name": "merkleRootBefore",
												"nameLocation": "1583:16:8",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1575:24:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 563,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1575:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 566,
												"indexed": false,
												"mutability": "mutable",
												"name": "merkleRootAfter",
												"nameLocation": "1609:15:8",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1601:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 565,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1601:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1574:51:8"
									},
									"src": "1551:75:8"
								},
								{
									"anonymous": false,
									"eventSelector": "521ec96875ca228cd2fc1dbd4c927a34328c9ce1a83bcb8c1f633f012c90d785",
									"id": 574,
									"name": "RoundChanged",
									"nameLocation": "1638:12:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 570,
												"indexed": false,
												"mutability": "mutable",
												"name": "roundBefore",
												"nameLocation": "1659:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "1651:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 569,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1651:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 572,
												"indexed": false,
												"mutability": "mutable",
												"name": "roundAfter",
												"nameLocation": "1680:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "1672:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 571,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1672:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1650:41:8"
									},
									"src": "1632:60:8"
								},
								{
									"anonymous": false,
									"eventSelector": "f279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568",
									"id": 582,
									"name": "Withdraw",
									"nameLocation": "1704:8:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"indexed": false,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1721:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "1713:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 575,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1713:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 578,
												"indexed": false,
												"mutability": "mutable",
												"name": "balanceOFContract",
												"nameLocation": "1733:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "1725:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 577,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1725:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 580,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "1761:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "1753:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1753:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1712:59:8"
									},
									"src": "1698:74:8"
								},
								{
									"anonymous": false,
									"eventSelector": "b818a975f91276df8ba59329becbc23c793df0d503c19ac296c3c372a1fa0461",
									"id": 592,
									"name": "WithdrawCurrency",
									"nameLocation": "1784:16:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 584,
												"indexed": false,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1809:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "1801:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 583,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1801:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 586,
												"indexed": false,
												"mutability": "mutable",
												"name": "currency",
												"nameLocation": "1820:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "1812:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 585,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1812:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 588,
												"indexed": false,
												"mutability": "mutable",
												"name": "balanceOfContract",
												"nameLocation": "1837:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "1829:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 587,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1829:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "1863:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "1855:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 589,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1855:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1800:73:8"
									},
									"src": "1778:96:8"
								},
								{
									"anonymous": false,
									"eventSelector": "0127a8d3f57942833f6930572bce52ad882683e36eeb5830d199d3fa4bfa9467",
									"id": 602,
									"name": "WithdrawNFT",
									"nameLocation": "1886:11:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"indexed": false,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1906:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "1898:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 593,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1898:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 596,
												"indexed": false,
												"mutability": "mutable",
												"name": "NFT",
												"nameLocation": "1917:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "1909:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 595,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1909:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 598,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1929:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "1921:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 597,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1921:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 600,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "1946:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "1938:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1938:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1897:59:8"
									},
									"src": "1880:77:8"
								},
								{
									"body": {
										"id": 618,
										"nodeType": "Block",
										"src": "2025:104:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 611,
															"name": "_nagaKidContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 605,
															"src": "2065:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INagaKid_$494",
																"typeString": "contract INagaKid"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_INagaKid_$494",
																"typeString": "contract INagaKid"
															}
														],
														"id": 610,
														"name": "setNagaKidContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 651,
														"src": "2046:18:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_INagaKid_$494_$returns$__$",
															"typeString": "function (contract INagaKid)"
														}
													},
													"id": 612,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2046:36:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 613,
												"nodeType": "ExpressionStatement",
												"src": "2046:36:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 615,
															"name": "_merkleRoot",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 607,
															"src": "2107:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 614,
														"name": "setMerkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 693,
														"src": "2093:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32)"
														}
													},
													"id": 616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2093:26:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 617,
												"nodeType": "ExpressionStatement",
												"src": "2093:26:8"
											}
										]
									},
									"id": 619,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "_nagaKidContract",
												"nameLocation": "1986:16:8",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "1977:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_INagaKid_$494",
													"typeString": "contract INagaKid"
												},
												"typeName": {
													"id": 604,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 603,
														"name": "INagaKid",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 494,
														"src": "1977:8:8"
													},
													"referencedDeclaration": 494,
													"src": "1977:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_INagaKid_$494",
														"typeString": "contract INagaKid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "_merkleRoot",
												"nameLocation": "2012:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "2004:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 606,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2004:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1976:48:8"
									},
									"returnParameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2025:0:8"
									},
									"scope": 993,
									"src": "1965:164:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 650,
										"nodeType": "Block",
										"src": "2201:224:8",
										"statements": [
											{
												"assignments": [
													628
												],
												"declarations": [
													{
														"constant": false,
														"id": 628,
														"mutability": "mutable",
														"name": "nagaKidBefore",
														"nameLocation": "2220:13:8",
														"nodeType": "VariableDeclaration",
														"scope": 650,
														"src": "2212:21:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 627,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2212:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 633,
												"initialValue": {
													"arguments": [
														{
															"id": 631,
															"name": "nagaKidContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "2244:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INagaKid_$494",
																"typeString": "contract INagaKid"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_INagaKid_$494",
																"typeString": "contract INagaKid"
															}
														],
														"id": 630,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2236:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 629,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2236:7:8",
															"typeDescriptions": {}
														}
													},
													"id": 632,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2236:24:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2212:48:8"
											},
											{
												"expression": {
													"id": 636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 634,
														"name": "nagaKidContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 532,
														"src": "2271:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_INagaKid_$494",
															"typeString": "contract INagaKid"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 635,
														"name": "_nagaKid",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 622,
														"src": "2289:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_INagaKid_$494",
															"typeString": "contract INagaKid"
														}
													},
													"src": "2271:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_INagaKid_$494",
														"typeString": "contract INagaKid"
													}
												},
												"id": 637,
												"nodeType": "ExpressionStatement",
												"src": "2271:26:8"
											},
											{
												"assignments": [
													639
												],
												"declarations": [
													{
														"constant": false,
														"id": 639,
														"mutability": "mutable",
														"name": "nagaKidAfter",
														"nameLocation": "2316:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 650,
														"src": "2308:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 638,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2308:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 644,
												"initialValue": {
													"arguments": [
														{
															"id": 642,
															"name": "_nagaKid",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 622,
															"src": "2339:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INagaKid_$494",
																"typeString": "contract INagaKid"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_INagaKid_$494",
																"typeString": "contract INagaKid"
															}
														],
														"id": 641,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2331:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 640,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2331:7:8",
															"typeDescriptions": {}
														}
													},
													"id": 643,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2331:17:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2308:40:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 646,
															"name": "nagaKidBefore",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 628,
															"src": "2389:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 647,
															"name": "nagaKidAfter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 639,
															"src": "2404:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 645,
														"name": "NagaKidContractChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 562,
														"src": "2366:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2366:51:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 649,
												"nodeType": "EmitStatement",
												"src": "2361:56:8"
											}
										]
									},
									"functionSelector": "9e6c8855",
									"id": 651,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 625,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 624,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "2191:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "2191:9:8"
										}
									],
									"name": "setNagaKidContract",
									"nameLocation": "2146:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 623,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 622,
												"mutability": "mutable",
												"name": "_nagaKid",
												"nameLocation": "2174:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "2165:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_INagaKid_$494",
													"typeString": "contract INagaKid"
												},
												"typeName": {
													"id": 621,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 620,
														"name": "INagaKid",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 494,
														"src": "2165:8:8"
													},
													"referencedDeclaration": 494,
													"src": "2165:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_INagaKid_$494",
														"typeString": "contract INagaKid"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2164:19:8"
									},
									"returnParameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2201:0:8"
									},
									"scope": 993,
									"src": "2137:288:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 671,
										"nodeType": "Block",
										"src": "2484:146:8",
										"statements": [
											{
												"assignments": [
													659
												],
												"declarations": [
													{
														"constant": false,
														"id": 659,
														"mutability": "mutable",
														"name": "_roundBefore",
														"nameLocation": "2503:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 671,
														"src": "2495:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 658,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2495:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 661,
												"initialValue": {
													"id": 660,
													"name": "currentMintRound",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 534,
													"src": "2518:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2495:39:8"
											},
											{
												"expression": {
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 662,
														"name": "currentMintRound",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "2545:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 663,
														"name": "_round",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 653,
														"src": "2564:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2545:25:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 665,
												"nodeType": "ExpressionStatement",
												"src": "2545:25:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 667,
															"name": "_roundBefore",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 659,
															"src": "2601:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 668,
															"name": "_round",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 653,
															"src": "2615:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 666,
														"name": "RoundChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 574,
														"src": "2588:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32,bytes32)"
														}
													},
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2588:34:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 670,
												"nodeType": "EmitStatement",
												"src": "2583:39:8"
											}
										]
									},
									"functionSelector": "ff05fe4a",
									"id": 672,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 656,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 655,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "2474:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "2474:9:8"
										}
									],
									"name": "setRound",
									"nameLocation": "2442:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "_round",
												"nameLocation": "2459:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "2451:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 652,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2451:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2450:16:8"
									},
									"returnParameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2484:0:8"
									},
									"scope": 993,
									"src": "2433:197:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 692,
										"nodeType": "Block",
										"src": "2699:159:8",
										"statements": [
											{
												"assignments": [
													680
												],
												"declarations": [
													{
														"constant": false,
														"id": 680,
														"mutability": "mutable",
														"name": "_merkleRootBefore",
														"nameLocation": "2718:17:8",
														"nodeType": "VariableDeclaration",
														"scope": 692,
														"src": "2710:25:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 679,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2710:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 682,
												"initialValue": {
													"id": 681,
													"name": "merkleRoot",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 536,
													"src": "2738:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2710:38:8"
											},
											{
												"expression": {
													"id": 685,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 683,
														"name": "merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 536,
														"src": "2759:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 684,
														"name": "_merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 674,
														"src": "2772:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2759:24:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 686,
												"nodeType": "ExpressionStatement",
												"src": "2759:24:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 688,
															"name": "_merkleRootBefore",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 680,
															"src": "2819:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 689,
															"name": "_merkleRoot",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 674,
															"src": "2838:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 687,
														"name": "MerkleRootChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 568,
														"src": "2801:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32,bytes32)"
														}
													},
													"id": 690,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2801:49:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 691,
												"nodeType": "EmitStatement",
												"src": "2796:54:8"
											}
										]
									},
									"functionSelector": "7cb64759",
									"id": 693,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 677,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 676,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "2689:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "2689:9:8"
										}
									],
									"name": "setMerkleRoot",
									"nameLocation": "2647:13:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "_merkleRoot",
												"nameLocation": "2669:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 693,
												"src": "2661:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 673,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2661:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2660:21:8"
									},
									"returnParameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2699:0:8"
									},
									"scope": 993,
									"src": "2638:220:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 804,
										"nodeType": "Block",
										"src": "2977:804:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 708,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 706,
																"name": "_round",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 700,
																"src": "2996:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 707,
																"name": "DEFAULT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 524,
																"src": "3006:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "2996:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d696e74206973206e6f7420617070726f7665642e",
															"id": 709,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3014:23:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eb4251b4ffd06c77b74f4c850691212ca55278808f7b03c1ff056c93470ea2ae",
																"typeString": "literal_string \"Mint is not approved.\""
															},
															"value": "Mint is not approved."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eb4251b4ffd06c77b74f4c850691212ca55278808f7b03c1ff056c93470ea2ae",
																"typeString": "literal_string \"Mint is not approved.\""
															}
														],
														"id": 705,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2988:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2988:50:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 711,
												"nodeType": "ExpressionStatement",
												"src": "2988:50:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 715,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 713,
																"name": "currentMintRound",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "3057:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 714,
																"name": "_round",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 700,
																"src": "3077:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "3057:26:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f6e747261637420617265206e6f7420696e2074686973206d696e74696e6720726f756e642e",
															"id": 716,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3085:41:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_01b030b8b5a56a7c757eaa200dd58c9c7b611dc637845adcfee0eed19fdd1265",
																"typeString": "literal_string \"Contract are not in this minting round.\""
															},
															"value": "Contract are not in this minting round."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_01b030b8b5a56a7c757eaa200dd58c9c7b611dc637845adcfee0eed19fdd1265",
																"typeString": "literal_string \"Contract are not in this minting round.\""
															}
														],
														"id": 712,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3049:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 717,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3049:78:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 718,
												"nodeType": "ExpressionStatement",
												"src": "3049:78:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 726,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 723,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 720,
																		"name": "getTotalSupply",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 982,
																		"src": "3146:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																			"typeString": "function () view returns (uint256)"
																		}
																	},
																	"id": 721,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3146:16:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 722,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 698,
																	"src": "3165:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3146:26:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 724,
																	"name": "getMaxSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 992,
																	"src": "3175:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 725,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3175:14:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3146:43:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f76657220737570706c79",
															"id": 727,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3191:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6",
																"typeString": "literal_string \"Over supply\""
															},
															"value": "Over supply"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6",
																"typeString": "literal_string \"Over supply\""
															}
														],
														"id": 719,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3138:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3138:67:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 729,
												"nodeType": "ExpressionStatement",
												"src": "3138:67:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 737,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 732,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3237:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 733,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3237:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 734,
																		"name": "_round",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 700,
																		"src": "3248:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 731,
																	"name": "isUserMinted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 956,
																	"src": "3224:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes32_$returns$_t_bool_$",
																		"typeString": "function (address,bytes32) view returns (bool)"
																	}
																},
																"id": 735,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3224:31:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 736,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3259:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "3224:40:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f752061726520616c7265616479206d696e7465642e",
															"id": 738,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3266:25:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0c7f4d12e145bf6262f68ff2a7f1cb7b6f85bd1339b4c00b13a6687d963b9dc8",
																"typeString": "literal_string \"You are already minted.\""
															},
															"value": "You are already minted."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0c7f4d12e145bf6262f68ff2a7f1cb7b6f85bd1339b4c00b13a6687d963b9dc8",
																"typeString": "literal_string \"You are already minted.\""
															}
														],
														"id": 730,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3216:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 739,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3216:76:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 740,
												"nodeType": "ExpressionStatement",
												"src": "3216:76:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 746,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3344:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_MintNagaKids_$993",
																				"typeString": "contract MintNagaKids"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_MintNagaKids_$993",
																				"typeString": "contract MintNagaKids"
																			}
																		],
																		"id": 745,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3336:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 744,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3336:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 747,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3336:13:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 742,
																	"name": "nagaKidContract",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 532,
																	"src": "3311:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_INagaKid_$494",
																		"typeString": "contract INagaKid"
																	}
																},
																"id": 743,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "isMinter",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 486,
																"src": "3311:24:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view external returns (bool)"
																}
															},
															"id": 748,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3311:39:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f6e7472616374204d696e74206973206e6f7420617070726f7665642e",
															"id": 749,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3352:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2c2411020c41eae6dcfcf8c36dfeed2ad5167769d337d3eba6c16ddf45224e79",
																"typeString": "literal_string \"Contract Mint is not approved.\""
															},
															"value": "Contract Mint is not approved."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2c2411020c41eae6dcfcf8c36dfeed2ad5167769d337d3eba6c16ddf45224e79",
																"typeString": "literal_string \"Contract Mint is not approved.\""
															}
														],
														"id": 741,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3303:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3303:82:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 751,
												"nodeType": "ExpressionStatement",
												"src": "3303:82:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 755,
																	"name": "_proof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 696,
																	"src": "3423:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																		"typeString": "bytes32[] calldata"
																	}
																},
																{
																	"id": 756,
																	"name": "merkleRoot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "3431:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 760,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "3470:3:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 761,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "3470:10:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 762,
																					"name": "_amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 698,
																					"src": "3482:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 763,
																					"name": "_round",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 700,
																					"src": "3491:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"expression": {
																					"id": 758,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "3453:3:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 759,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "encodePacked",
																				"nodeType": "MemberAccess",
																				"src": "3453:16:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																					"typeString": "function () pure returns (bytes memory)"
																				}
																			},
																			"id": 764,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3453:45:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 757,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967288,
																		"src": "3443:9:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 765,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3443:56:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																		"typeString": "bytes32[] calldata"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 753,
																	"name": "MerkleProof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "3404:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_MerkleProof_$453_$",
																		"typeString": "type(library MerkleProof)"
																	}
																},
																"id": 754,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "verify",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 384,
																"src": "3404:18:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
																	"typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
																}
															},
															"id": 766,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3404:96:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556e617574686f72697a65642057686974656c6973744d696e74205468697320557365722e",
															"id": 767,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3502:39:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d90203a2446623747bbba855df65d033d63eb4b6a185c4640964fa4010f07517",
																"typeString": "literal_string \"Unauthorized WhitelistMint This User.\""
															},
															"value": "Unauthorized WhitelistMint This User."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d90203a2446623747bbba855df65d033d63eb4b6a185c4640964fa4010f07517",
																"typeString": "literal_string \"Unauthorized WhitelistMint This User.\""
															}
														],
														"id": 752,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3396:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 768,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3396:146:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 769,
												"nodeType": "ExpressionStatement",
												"src": "3396:146:8"
											},
											{
												"expression": {
													"id": 777,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 770,
																"name": "_isUserMinted",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 542,
																"src": "3555:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(bytes32 => bool))"
																}
															},
															"id": 774,
															"indexExpression": {
																"expression": {
																	"id": 771,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3569:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 772,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3569:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3555:25:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
																"typeString": "mapping(bytes32 => bool)"
															}
														},
														"id": 775,
														"indexExpression": {
															"id": 773,
															"name": "_round",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 700,
															"src": "3581:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3555:33:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 776,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3591:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3555:40:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 778,
												"nodeType": "ExpressionStatement",
												"src": "3555:40:8"
											},
											{
												"expression": {
													"id": 786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 779,
																"name": "_userMintedAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 548,
																"src": "3606:17:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(bytes32 => uint256))"
																}
															},
															"id": 783,
															"indexExpression": {
																"expression": {
																	"id": 780,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3624:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 781,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3624:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3606:29:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 784,
														"indexExpression": {
															"id": 782,
															"name": "_round",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 700,
															"src": "3636:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3606:37:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 785,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 698,
														"src": "3647:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3606:48:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 787,
												"nodeType": "ExpressionStatement",
												"src": "3606:48:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 791,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3692:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 792,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3692:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 793,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 698,
															"src": "3703:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 788,
															"name": "nagaKidContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "3667:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INagaKid_$494",
																"typeString": "contract INagaKid"
															}
														},
														"id": 790,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeMint",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 493,
														"src": "3667:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256) external"
														}
													},
													"id": 794,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3667:44:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 795,
												"nodeType": "ExpressionStatement",
												"src": "3667:44:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 797,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3736:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 798,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3736:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 799,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 698,
															"src": "3748:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 800,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3757:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 801,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "3757:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 796,
														"name": "Minted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 556,
														"src": "3729:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 802,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3729:44:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 803,
												"nodeType": "EmitStatement",
												"src": "3724:49:8"
											}
										]
									},
									"functionSelector": "f6b48e55",
									"id": 805,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 703,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 702,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "2964:12:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "2964:12:8"
										}
									],
									"name": "allowlistMint",
									"nameLocation": "2875:13:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 696,
												"mutability": "mutable",
												"name": "_proof",
												"nameLocation": "2908:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 805,
												"src": "2889:25:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 694,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2889:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 695,
													"nodeType": "ArrayTypeName",
													"src": "2889:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "2924:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 805,
												"src": "2916:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 697,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2916:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 700,
												"mutability": "mutable",
												"name": "_round",
												"nameLocation": "2941:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 805,
												"src": "2933:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 699,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2933:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2888:60:8"
									},
									"returnParameters": {
										"id": 704,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2977:0:8"
									},
									"scope": 993,
									"src": "2866:915:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 847,
										"nodeType": "Block",
										"src": "3837:290:8",
										"statements": [
											{
												"assignments": [
													813
												],
												"declarations": [
													{
														"constant": false,
														"id": 813,
														"mutability": "mutable",
														"name": "balanceOFContract",
														"nameLocation": "3853:17:8",
														"nodeType": "VariableDeclaration",
														"scope": 847,
														"src": "3848:22:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 812,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3848:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 819,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 816,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3881:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_MintNagaKids_$993",
																	"typeString": "contract MintNagaKids"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_MintNagaKids_$993",
																	"typeString": "contract MintNagaKids"
																}
															],
															"id": 815,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3873:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 814,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3873:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 817,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3873:13:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "3873:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3848:46:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 823,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 821,
																"name": "balanceOFContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 813,
																"src": "3913:17:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 822,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3933:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3913:21:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e742042616c616e6365",
															"id": 824,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3936:22:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b80e76e4c9dd95c0a6a7ab97569124291f4757bb9e5ff42d1e95905b42144c82",
																"typeString": "literal_string \"Insufficient Balance\""
															},
															"value": "Insufficient Balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b80e76e4c9dd95c0a6a7ab97569124291f4757bb9e5ff42d1e95905b42144c82",
																"typeString": "literal_string \"Insufficient Balance\""
															}
														],
														"id": 820,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3905:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3905:54:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 826,
												"nodeType": "ExpressionStatement",
												"src": "3905:54:8"
											},
											{
												"assignments": [
													828,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 828,
														"mutability": "mutable",
														"name": "status",
														"nameLocation": "3976:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 847,
														"src": "3971:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 827,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3971:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 835,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 833,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4023:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 829,
																"name": "_to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 807,
																"src": "3987:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 830,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3987:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 832,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 831,
																"name": "balanceOFContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 813,
																"src": "4003:17:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3987:35:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 834,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3987:39:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3970:56:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 837,
															"name": "status",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 828,
															"src": "4045:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 836,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4037:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 838,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:15:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 839,
												"nodeType": "ExpressionStatement",
												"src": "4037:15:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 841,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 807,
															"src": "4079:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 842,
															"name": "balanceOFContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 813,
															"src": "4084:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 843,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "4103:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 844,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "4103:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 840,
														"name": "Withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 582,
														"src": "4070:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4070:49:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 846,
												"nodeType": "EmitStatement",
												"src": "4065:54:8"
											}
										]
									},
									"functionSelector": "51cff8d9",
									"id": 848,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 810,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 809,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "3827:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "3827:9:8"
										}
									],
									"name": "withdraw",
									"nameLocation": "3798:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 808,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 807,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "3815:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "3807:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 806,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3807:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3806:13:8"
									},
									"returnParameters": {
										"id": 811,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3837:0:8"
									},
									"scope": 993,
									"src": "3789:338:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 892,
										"nodeType": "Block",
										"src": "4209:303:8",
										"statements": [
											{
												"assignments": [
													858
												],
												"declarations": [
													{
														"constant": false,
														"id": 858,
														"mutability": "mutable",
														"name": "balanceOfContract",
														"nameLocation": "4225:17:8",
														"nodeType": "VariableDeclaration",
														"scope": 892,
														"src": "4220:22:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 857,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "4220:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 868,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 865,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4281:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_MintNagaKids_$993",
																		"typeString": "contract MintNagaKids"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_MintNagaKids_$993",
																		"typeString": "contract MintNagaKids"
																	}
																],
																"id": 864,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4273:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 863,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4273:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 866,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4273:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 860,
																	"name": "_currency",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 852,
																	"src": "4252:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 859,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 222,
																"src": "4245:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 861,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4245:17:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														"id": 862,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 179,
														"src": "4245:27:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 867,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4245:42:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4220:67:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 872,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 870,
																"name": "balanceOfContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 858,
																"src": "4306:17:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 871,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4326:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4306:21:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e742042616c616e6365",
															"id": 873,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4329:22:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b80e76e4c9dd95c0a6a7ab97569124291f4757bb9e5ff42d1e95905b42144c82",
																"typeString": "literal_string \"Insufficient Balance\""
															},
															"value": "Insufficient Balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b80e76e4c9dd95c0a6a7ab97569124291f4757bb9e5ff42d1e95905b42144c82",
																"typeString": "literal_string \"Insufficient Balance\""
															}
														],
														"id": 869,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4298:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4298:54:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 875,
												"nodeType": "ExpressionStatement",
												"src": "4298:54:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 880,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 850,
															"src": "4390:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 881,
															"name": "balanceOfContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "4395:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 877,
																	"name": "_currency",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 852,
																	"src": "4370:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 876,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 222,
																"src": "4363:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 878,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4363:17:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														"id": 879,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 189,
														"src": "4363:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 882,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4363:50:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 883,
												"nodeType": "ExpressionStatement",
												"src": "4363:50:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 885,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 850,
															"src": "4456:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 886,
															"name": "_currency",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 852,
															"src": "4460:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 887,
															"name": "balanceOfContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "4470:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 888,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "4488:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 889,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "4488:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 884,
														"name": "WithdrawCurrency",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 592,
														"src": "4439:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4439:65:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 891,
												"nodeType": "EmitStatement",
												"src": "4434:70:8"
											}
										]
									},
									"functionSelector": "8407ecc4",
									"id": 893,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 855,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 854,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4199:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "4199:9:8"
										}
									],
									"name": "withdrawCurrency",
									"nameLocation": "4144:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "4169:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "4161:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 849,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4161:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "_currency",
												"nameLocation": "4181:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "4173:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 851,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4173:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4160:31:8"
									},
									"returnParameters": {
										"id": 856,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4209:0:8"
									},
									"scope": 993,
									"src": "4135:377:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 939,
										"nodeType": "Block",
										"src": "4601:262:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 915,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 909,
																		"name": "_tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 899,
																		"src": "4642:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 906,
																				"name": "_NFT",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 897,
																				"src": "4628:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 905,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 338,
																			"src": "4620:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$338_$",
																				"typeString": "type(contract IERC721)"
																			}
																		},
																		"id": 907,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4620:13:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC721_$338",
																			"typeString": "contract IERC721"
																		}
																	},
																	"id": 908,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "ownerOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 271,
																	"src": "4620:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view external returns (address)"
																	}
																},
																"id": 910,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4620:31:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 913,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "4663:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_MintNagaKids_$993",
																			"typeString": "contract MintNagaKids"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_MintNagaKids_$993",
																			"typeString": "contract MintNagaKids"
																		}
																	],
																	"id": 912,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4655:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 911,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4655:7:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 914,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4655:13:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4620:48:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5468697320746f6b656e4964206973206e6f74206f776e656420627920636f6e7472616374",
															"id": 916,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4670:39:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_95d28383fddc0a416793ce8ec2405e6075664f03c74a9f16892baa9d68c29a32",
																"typeString": "literal_string \"This tokenId is not owned by contract\""
															},
															"value": "This tokenId is not owned by contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_95d28383fddc0a416793ce8ec2405e6075664f03c74a9f16892baa9d68c29a32",
																"typeString": "literal_string \"This tokenId is not owned by contract\""
															}
														],
														"id": 904,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4612:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4612:98:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 918,
												"nodeType": "ExpressionStatement",
												"src": "4612:98:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 925,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4762:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_MintNagaKids_$993",
																		"typeString": "contract MintNagaKids"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_MintNagaKids_$993",
																		"typeString": "contract MintNagaKids"
																	}
																],
																"id": 924,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4754:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 923,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4754:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 926,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4754:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 927,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 895,
															"src": "4769:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 928,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 899,
															"src": "4774:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 920,
																	"name": "_NFT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 897,
																	"src": "4731:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 919,
																"name": "IERC721",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 338,
																"src": "4723:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721_$338_$",
																	"typeString": "type(contract IERC721)"
																}
															},
															"id": 921,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4723:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$338",
																"typeString": "contract IERC721"
															}
														},
														"id": 922,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 293,
														"src": "4723:30:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256) external"
														}
													},
													"id": 929,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4723:60:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 930,
												"nodeType": "ExpressionStatement",
												"src": "4723:60:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 932,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 895,
															"src": "4821:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 933,
															"name": "_NFT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 897,
															"src": "4825:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 934,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 899,
															"src": "4830:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 935,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "4839:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 936,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "4839:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 931,
														"name": "WithdrawNFT",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 602,
														"src": "4809:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 937,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4809:46:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 938,
												"nodeType": "EmitStatement",
												"src": "4804:51:8"
											}
										]
									},
									"functionSelector": "bff863ec",
									"id": 940,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 902,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 901,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4591:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "4591:9:8"
										}
									],
									"name": "withdrawNFT",
									"nameLocation": "4529:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "4549:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 940,
												"src": "4541:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 894,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4541:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "_NFT",
												"nameLocation": "4561:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 940,
												"src": "4553:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 896,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4553:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "4574:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 940,
												"src": "4566:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4566:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4540:43:8"
									},
									"returnParameters": {
										"id": 903,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4601:0:8"
									},
									"scope": 993,
									"src": "4520:343:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 955,
										"nodeType": "Block",
										"src": "4949:54:8",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 949,
															"name": "_isUserMinted",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 542,
															"src": "4967:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(bytes32 => bool))"
															}
														},
														"id": 951,
														"indexExpression": {
															"id": 950,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 942,
															"src": "4981:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4967:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
															"typeString": "mapping(bytes32 => bool)"
														}
													},
													"id": 953,
													"indexExpression": {
														"id": 952,
														"name": "_round",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 944,
														"src": "4988:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4967:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 948,
												"id": 954,
												"nodeType": "Return",
												"src": "4960:35:8"
											}
										]
									},
									"functionSelector": "ffdc6129",
									"id": 956,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isUserMinted",
									"nameLocation": "4880:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "4901:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "4893:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 941,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4893:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "_round",
												"nameLocation": "4915:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "4907:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 943,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4907:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4892:30:8"
									},
									"returnParameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "4943:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 946,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4943:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4942:6:8"
									},
									"scope": 993,
									"src": "4871:132:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 971,
										"nodeType": "Block",
										"src": "5096:58:8",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 965,
															"name": "_userMintedAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 548,
															"src": "5114:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(bytes32 => uint256))"
															}
														},
														"id": 967,
														"indexExpression": {
															"id": 966,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 958,
															"src": "5132:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5114:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
															"typeString": "mapping(bytes32 => uint256)"
														}
													},
													"id": 969,
													"indexExpression": {
														"id": 968,
														"name": "_round",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 960,
														"src": "5139:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5114:32:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 964,
												"id": 970,
												"nodeType": "Return",
												"src": "5107:39:8"
											}
										]
									},
									"functionSelector": "b5abafa1",
									"id": 972,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "userMintedAmount",
									"nameLocation": "5020:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 958,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "5045:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "5037:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 957,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5037:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "_round",
												"nameLocation": "5059:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "5051:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 959,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5036:30:8"
									},
									"returnParameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "5087:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 962,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5086:9:8"
									},
									"scope": 993,
									"src": "5011:143:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 981,
										"nodeType": "Block",
										"src": "5218:55:8",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 977,
															"name": "nagaKidContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "5236:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INagaKid_$494",
																"typeString": "contract INagaKid"
															}
														},
														"id": 978,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "totalSupply",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1053,
														"src": "5236:27:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
															"typeString": "function () view external returns (uint256)"
														}
													},
													"id": 979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5236:29:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 976,
												"id": 980,
												"nodeType": "Return",
												"src": "5229:36:8"
											}
										]
									},
									"functionSelector": "c4e41b22",
									"id": 982,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTotalSupply",
									"nameLocation": "5171:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 973,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5185:2:8"
									},
									"returnParameters": {
										"id": 976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 975,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "5209:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 974,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5209:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5208:9:8"
									},
									"scope": 993,
									"src": "5162:111:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 991,
										"nodeType": "Block",
										"src": "5335:53:8",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 987,
															"name": "nagaKidContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "5353:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INagaKid_$494",
																"typeString": "contract INagaKid"
															}
														},
														"id": 988,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "maxSupply",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 479,
														"src": "5353:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
															"typeString": "function () view external returns (uint256)"
														}
													},
													"id": 989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5353:27:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 986,
												"id": 990,
												"nodeType": "Return",
												"src": "5346:34:8"
											}
										]
									},
									"functionSelector": "4c0f38c2",
									"id": 992,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMaxSupply",
									"nameLocation": "5290:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5302:2:8"
									},
									"returnParameters": {
										"id": 986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "5326:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 984,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5326:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5325:9:8"
									},
									"scope": 993,
									"src": "5281:107:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 994,
							"src": "395:4998:8",
							"usedErrors": []
						}
					],
					"src": "33:5362:8"
				},
				"id": 8
			},
			"erc721a/contracts/IERC721A.sol": {
				"ast": {
					"absolutePath": "erc721a/contracts/IERC721A.sol",
					"exportedSymbols": {
						"IERC721A": [
							1202
						]
					},
					"id": 1203,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 995,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "84:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721A",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 996,
								"nodeType": "StructuredDocumentation",
								"src": "109:59:9",
								"text": " @dev Interface of an ERC721A compliant contract."
							},
							"fullyImplemented": false,
							"id": 1202,
							"linearizedBaseContracts": [
								1202
							],
							"name": "IERC721A",
							"nameLocation": "179:8:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 997,
										"nodeType": "StructuredDocumentation",
										"src": "194:76:9",
										"text": " The caller must own the token or be an approved operator."
									},
									"errorSelector": "cfb3b942",
									"id": 999,
									"name": "ApprovalCallerNotOwnerNorApproved",
									"nameLocation": "281:33:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 998,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "314:2:9"
									},
									"src": "275:42:9"
								},
								{
									"documentation": {
										"id": 1000,
										"nodeType": "StructuredDocumentation",
										"src": "323:44:9",
										"text": " The token does not exist."
									},
									"errorSelector": "cf4700e4",
									"id": 1002,
									"name": "ApprovalQueryForNonexistentToken",
									"nameLocation": "378:32:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "410:2:9"
									},
									"src": "372:41:9"
								},
								{
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "419:66:9",
										"text": " The caller cannot approve to their own address."
									},
									"errorSelector": "b06307db",
									"id": 1005,
									"name": "ApproveToCaller",
									"nameLocation": "496:15:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "511:2:9"
									},
									"src": "490:24:9"
								},
								{
									"documentation": {
										"id": 1006,
										"nodeType": "StructuredDocumentation",
										"src": "520:65:9",
										"text": " Cannot query the balance for the zero address."
									},
									"errorSelector": "8f4eb604",
									"id": 1008,
									"name": "BalanceQueryForZeroAddress",
									"nameLocation": "596:26:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "622:2:9"
									},
									"src": "590:35:9"
								},
								{
									"documentation": {
										"id": 1009,
										"nodeType": "StructuredDocumentation",
										"src": "631:51:9",
										"text": " Cannot mint to the zero address."
									},
									"errorSelector": "2e076300",
									"id": 1011,
									"name": "MintToZeroAddress",
									"nameLocation": "693:17:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "710:2:9"
									},
									"src": "687:26:9"
								},
								{
									"documentation": {
										"id": 1012,
										"nodeType": "StructuredDocumentation",
										"src": "719:72:9",
										"text": " The quantity of tokens minted must be more than zero."
									},
									"errorSelector": "b562e8dd",
									"id": 1014,
									"name": "MintZeroQuantity",
									"nameLocation": "802:16:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "818:2:9"
									},
									"src": "796:25:9"
								},
								{
									"documentation": {
										"id": 1015,
										"nodeType": "StructuredDocumentation",
										"src": "827:44:9",
										"text": " The token does not exist."
									},
									"errorSelector": "df2d9b42",
									"id": 1017,
									"name": "OwnerQueryForNonexistentToken",
									"nameLocation": "882:29:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1016,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:2:9"
									},
									"src": "876:38:9"
								},
								{
									"documentation": {
										"id": 1018,
										"nodeType": "StructuredDocumentation",
										"src": "920:76:9",
										"text": " The caller must own the token or be an approved operator."
									},
									"errorSelector": "59c896be",
									"id": 1020,
									"name": "TransferCallerNotOwnerNorApproved",
									"nameLocation": "1007:33:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:2:9"
									},
									"src": "1001:42:9"
								},
								{
									"documentation": {
										"id": 1021,
										"nodeType": "StructuredDocumentation",
										"src": "1049:53:9",
										"text": " The token must be owned by `from`."
									},
									"errorSelector": "a1148100",
									"id": 1023,
									"name": "TransferFromIncorrectOwner",
									"nameLocation": "1113:26:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1139:2:9"
									},
									"src": "1107:35:9"
								},
								{
									"documentation": {
										"id": 1024,
										"nodeType": "StructuredDocumentation",
										"src": "1148:109:9",
										"text": " Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
									},
									"errorSelector": "d1a57ed6",
									"id": 1026,
									"name": "TransferToNonERC721ReceiverImplementer",
									"nameLocation": "1268:38:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1306:2:9"
									},
									"src": "1262:47:9"
								},
								{
									"documentation": {
										"id": 1027,
										"nodeType": "StructuredDocumentation",
										"src": "1315:55:9",
										"text": " Cannot transfer to the zero address."
									},
									"errorSelector": "ea553b34",
									"id": 1029,
									"name": "TransferToZeroAddress",
									"nameLocation": "1381:21:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1028,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1402:2:9"
									},
									"src": "1375:30:9"
								},
								{
									"documentation": {
										"id": 1030,
										"nodeType": "StructuredDocumentation",
										"src": "1411:44:9",
										"text": " The token does not exist."
									},
									"errorSelector": "a14c4b50",
									"id": 1032,
									"name": "URIQueryForNonexistentToken",
									"nameLocation": "1466:27:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1493:2:9"
									},
									"src": "1460:36:9"
								},
								{
									"documentation": {
										"id": 1033,
										"nodeType": "StructuredDocumentation",
										"src": "1502:79:9",
										"text": " The `quantity` minted with ERC2309 exceeds the safety limit."
									},
									"errorSelector": "3db1f9af",
									"id": 1035,
									"name": "MintERC2309QuantityExceedsLimit",
									"nameLocation": "1592:31:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1623:2:9"
									},
									"src": "1586:40:9"
								},
								{
									"documentation": {
										"id": 1036,
										"nodeType": "StructuredDocumentation",
										"src": "1632:83:9",
										"text": " The `extraData` cannot be set on an unintialized ownership slot."
									},
									"errorSelector": "00d58153",
									"id": 1038,
									"name": "OwnershipNotInitializedForExtraData",
									"nameLocation": "1726:35:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1037,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1761:2:9"
									},
									"src": "1720:44:9"
								},
								{
									"canonicalName": "IERC721A.TokenOwnership",
									"id": 1047,
									"members": [
										{
											"constant": false,
											"id": 1040,
											"mutability": "mutable",
											"name": "addr",
											"nameLocation": "1847:4:9",
											"nodeType": "VariableDeclaration",
											"scope": 1047,
											"src": "1839:12:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1039,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1839:7:9",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1042,
											"mutability": "mutable",
											"name": "startTimestamp",
											"nameLocation": "1960:14:9",
											"nodeType": "VariableDeclaration",
											"scope": 1047,
											"src": "1953:21:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1041,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "1953:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1044,
											"mutability": "mutable",
											"name": "burned",
											"nameLocation": "2035:6:9",
											"nodeType": "VariableDeclaration",
											"scope": 1047,
											"src": "2030:11:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1043,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2030:4:9",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1046,
											"mutability": "mutable",
											"name": "extraData",
											"nameLocation": "2150:9:9",
											"nodeType": "VariableDeclaration",
											"scope": 1047,
											"src": "2143:16:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1045,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "2143:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TokenOwnership",
									"nameLocation": "1777:14:9",
									"nodeType": "StructDefinition",
									"scope": 1202,
									"src": "1770:396:9",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1048,
										"nodeType": "StructuredDocumentation",
										"src": "2172:193:9",
										"text": " @dev Returns the total amount of tokens stored by the contract.\n Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
									},
									"functionSelector": "18160ddd",
									"id": 1053,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2379:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2390:2:9"
									},
									"returnParameters": {
										"id": 1052,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1051,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1053,
												"src": "2416:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1050,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2416:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2415:9:9"
									},
									"scope": 1202,
									"src": "2370:55:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1054,
										"nodeType": "StructuredDocumentation",
										"src": "2534:340:9",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1061,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "2888:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1056,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2913:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1061,
												"src": "2906:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1055,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2906:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2905:20:9"
									},
									"returnParameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1061,
												"src": "2949:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1058,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2949:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2948:6:9"
									},
									"scope": 1202,
									"src": "2879:76:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1062,
										"nodeType": "StructuredDocumentation",
										"src": "3064:88:9",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 1070,
									"name": "Transfer",
									"nameLocation": "3163:8:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1069,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1064,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3188:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1070,
												"src": "3172:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1063,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3172:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1066,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3210:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1070,
												"src": "3194:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1065,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3194:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1068,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3230:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1070,
												"src": "3214:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1067,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3214:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3171:67:9"
									},
									"src": "3157:82:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1071,
										"nodeType": "StructuredDocumentation",
										"src": "3245:94:9",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 1079,
									"name": "Approval",
									"nameLocation": "3350:8:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1073,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3375:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "3359:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1072,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3359:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1075,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "3398:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "3382:24:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1074,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3382:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1077,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3424:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "3408:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1076,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3408:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3358:74:9"
									},
									"src": "3344:89:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1080,
										"nodeType": "StructuredDocumentation",
										"src": "3439:117:9",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 1088,
									"name": "ApprovalForAll",
									"nameLocation": "3567:14:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1082,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3598:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1088,
												"src": "3582:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1081,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3582:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1084,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3621:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1088,
												"src": "3605:24:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1083,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3605:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1086,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "3636:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1088,
												"src": "3631:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1085,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3631:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3581:64:9"
									},
									"src": "3561:85:9"
								},
								{
									"documentation": {
										"id": 1089,
										"nodeType": "StructuredDocumentation",
										"src": "3652:76:9",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 1096,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3742:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1091,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3760:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "3752:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1090,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3752:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3751:15:9"
									},
									"returnParameters": {
										"id": 1095,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "3798:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "3790:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1093,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3790:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3789:17:9"
									},
									"scope": 1202,
									"src": "3733:74:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1097,
										"nodeType": "StructuredDocumentation",
										"src": "3813:131:9",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 1104,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "3958:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3974:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "3966:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3966:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3965:17:9"
									},
									"returnParameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4014:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "4006:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4006:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:15:9"
									},
									"scope": 1202,
									"src": "3949:72:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1105,
										"nodeType": "StructuredDocumentation",
										"src": "4027:556:9",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 1116,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "4597:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4631:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1116,
												"src": "4623:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4623:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1109,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4653:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1116,
												"src": "4645:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4645:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1111,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4673:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1116,
												"src": "4665:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1110,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4665:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1113,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4705:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1116,
												"src": "4690:19:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1112,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4690:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4613:102:9"
									},
									"returnParameters": {
										"id": 1115,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4724:0:9"
									},
									"scope": 1202,
									"src": "4588:137:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1117,
										"nodeType": "StructuredDocumentation",
										"src": "4731:690:9",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 1126,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "5435:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5469:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "5461:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1118,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5461:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5491:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "5483:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5483:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5511:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "5503:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5503:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5451:73:9"
									},
									"returnParameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5533:0:9"
									},
									"scope": 1202,
									"src": "5426:108:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1127,
										"nodeType": "StructuredDocumentation",
										"src": "5540:504:9",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1136,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "6058:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1129,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6088:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1136,
												"src": "6080:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6080:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6110:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1136,
												"src": "6102:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6102:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6130:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1136,
												"src": "6122:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6122:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6070:73:9"
									},
									"returnParameters": {
										"id": 1135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6152:0:9"
									},
									"scope": 1202,
									"src": "6049:104:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1137,
										"nodeType": "StructuredDocumentation",
										"src": "6159:452:9",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1144,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "6625:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6641:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1144,
												"src": "6633:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6633:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1141,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6653:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1144,
												"src": "6645:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6645:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6632:29:9"
									},
									"returnParameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6670:0:9"
									},
									"scope": 1202,
									"src": "6616:55:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1145,
										"nodeType": "StructuredDocumentation",
										"src": "6677:309:9",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 1152,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "7000:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1147,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "7026:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "7018:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1146,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7018:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1149,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "7041:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "7036:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1148,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7036:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7017:34:9"
									},
									"returnParameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7060:0:9"
									},
									"scope": 1202,
									"src": "6991:70:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1153,
										"nodeType": "StructuredDocumentation",
										"src": "7067:139:9",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 1160,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "7220:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1155,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7240:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1160,
												"src": "7232:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7232:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7231:17:9"
									},
									"returnParameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "7280:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1160,
												"src": "7272:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7272:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7271:18:9"
									},
									"scope": 1202,
									"src": "7211:79:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1161,
										"nodeType": "StructuredDocumentation",
										"src": "7296:138:9",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 1170,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "7448:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1163,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "7473:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1170,
												"src": "7465:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7465:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1165,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "7488:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1170,
												"src": "7480:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1164,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7480:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7464:33:9"
									},
									"returnParameters": {
										"id": 1169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1168,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1170,
												"src": "7521:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1167,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7521:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7520:6:9"
									},
									"scope": 1202,
									"src": "7439:88:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1171,
										"nodeType": "StructuredDocumentation",
										"src": "7640:58:9",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 1176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "7712:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7716:2:9"
									},
									"returnParameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "7742:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1173,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7742:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7741:15:9"
									},
									"scope": 1202,
									"src": "7703:54:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1177,
										"nodeType": "StructuredDocumentation",
										"src": "7763:60:9",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 1182,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "7837:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1178,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7843:2:9"
									},
									"returnParameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1180,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "7869:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1179,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7869:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7868:15:9"
									},
									"scope": 1202,
									"src": "7828:56:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1183,
										"nodeType": "StructuredDocumentation",
										"src": "7890:90:9",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 1190,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "7994:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1185,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8011:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "8003:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8003:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8002:17:9"
									},
									"returnParameters": {
										"id": 1189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1188,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "8043:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1187,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8043:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8042:15:9"
									},
									"scope": 1202,
									"src": "7985:73:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1191,
										"nodeType": "StructuredDocumentation",
										"src": "8168:203:9",
										"text": " @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\n as defined in the ERC2309 standard. See `_mintERC2309` for more details."
									},
									"eventSelector": "deaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
									"id": 1201,
									"name": "ConsecutiveTransfer",
									"nameLocation": "8382:19:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1193,
												"indexed": true,
												"mutability": "mutable",
												"name": "fromTokenId",
												"nameLocation": "8418:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "8402:27:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8402:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1195,
												"indexed": false,
												"mutability": "mutable",
												"name": "toTokenId",
												"nameLocation": "8439:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "8431:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8431:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1197,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "8466:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "8450:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8450:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1199,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8488:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "8472:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1198,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8472:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8401:90:9"
									},
									"src": "8376:116:9"
								}
							],
							"scope": 1203,
							"src": "169:8325:9",
							"usedErrors": [
								999,
								1002,
								1005,
								1008,
								1011,
								1014,
								1017,
								1020,
								1023,
								1026,
								1029,
								1032,
								1035,
								1038
							]
						}
					],
					"src": "84:8411:9"
				},
				"id": 9
			},
			"erc721a/contracts/extensions/IERC721ABurnable.sol": {
				"ast": {
					"absolutePath": "erc721a/contracts/extensions/IERC721ABurnable.sol",
					"exportedSymbols": {
						"IERC721A": [
							1202
						],
						"IERC721ABurnable": [
							1215
						]
					},
					"id": 1216,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1204,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "84:23:10"
						},
						{
							"absolutePath": "erc721a/contracts/IERC721A.sol",
							"file": "../IERC721A.sol",
							"id": 1205,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1216,
							"sourceUnit": 1203,
							"src": "109:25:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1207,
										"name": "IERC721A",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1202,
										"src": "234:8:10"
									},
									"id": 1208,
									"nodeType": "InheritanceSpecifier",
									"src": "234:8:10"
								}
							],
							"canonicalName": "IERC721ABurnable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1206,
								"nodeType": "StructuredDocumentation",
								"src": "136:67:10",
								"text": " @dev Interface of an ERC721ABurnable compliant contract."
							},
							"fullyImplemented": false,
							"id": 1215,
							"linearizedBaseContracts": [
								1215,
								1202
							],
							"name": "IERC721ABurnable",
							"nameLocation": "214:16:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1209,
										"nodeType": "StructuredDocumentation",
										"src": "249:163:10",
										"text": " @dev Burns `tokenId`. See {ERC721A-_burn}.\n Requirements:\n - The caller must own `tokenId` or be an approved operator."
									},
									"functionSelector": "42966c68",
									"id": 1214,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "426:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1211,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "439:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1214,
												"src": "431:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "431:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "430:17:10"
									},
									"returnParameters": {
										"id": 1213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "456:0:10"
									},
									"scope": 1215,
									"src": "417:40:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1216,
							"src": "204:255:10",
							"usedErrors": [
								999,
								1002,
								1005,
								1008,
								1011,
								1014,
								1017,
								1020,
								1023,
								1026,
								1029,
								1032,
								1035,
								1038
							]
						}
					],
					"src": "84:376:10"
				},
				"id": 10
			},
			"erc721a/contracts/extensions/IERC721AQueryable.sol": {
				"ast": {
					"absolutePath": "erc721a/contracts/extensions/IERC721AQueryable.sol",
					"exportedSymbols": {
						"IERC721A": [
							1202
						],
						"IERC721AQueryable": [
							1267
						]
					},
					"id": 1268,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1217,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "84:23:11"
						},
						{
							"absolutePath": "erc721a/contracts/IERC721A.sol",
							"file": "../IERC721A.sol",
							"id": 1218,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1268,
							"sourceUnit": 1203,
							"src": "109:25:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1220,
										"name": "IERC721A",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1202,
										"src": "236:8:11"
									},
									"id": 1221,
									"nodeType": "InheritanceSpecifier",
									"src": "236:8:11"
								}
							],
							"canonicalName": "IERC721AQueryable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1219,
								"nodeType": "StructuredDocumentation",
								"src": "136:68:11",
								"text": " @dev Interface of an ERC721AQueryable compliant contract."
							},
							"fullyImplemented": false,
							"id": 1267,
							"linearizedBaseContracts": [
								1267,
								1202
							],
							"name": "IERC721AQueryable",
							"nameLocation": "215:17:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1222,
										"nodeType": "StructuredDocumentation",
										"src": "251:59:11",
										"text": " Invalid query range (`start` >= `stop`)."
									},
									"errorSelector": "32c1995a",
									"id": 1224,
									"name": "InvalidQueryRange",
									"nameLocation": "321:17:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1223,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "338:2:11"
									},
									"src": "315:26:11"
								},
								{
									"documentation": {
										"id": 1225,
										"nodeType": "StructuredDocumentation",
										"src": "347:599:11",
										"text": " @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n If the `tokenId` is out of bounds:\n   - `addr` = `address(0)`\n   - `startTimestamp` = `0`\n   - `burned` = `false`\n If the `tokenId` is burned:\n   - `addr` = `<Address of owner before token was burned>`\n   - `startTimestamp` = `<Timestamp when token was burned>`\n   - `burned = `true`\n Otherwise:\n   - `addr` = `<Address of owner>`\n   - `startTimestamp` = `<Timestamp of start of ownership>`\n   - `burned = `false`"
									},
									"functionSelector": "c23dc68f",
									"id": 1233,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "explicitOwnershipOf",
									"nameLocation": "960:19:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1227,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "988:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1233,
												"src": "980:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "980:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "979:17:11"
									},
									"returnParameters": {
										"id": 1232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1231,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1233,
												"src": "1020:21:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_TokenOwnership_$1047_memory_ptr",
													"typeString": "struct IERC721A.TokenOwnership"
												},
												"typeName": {
													"id": 1230,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1229,
														"name": "TokenOwnership",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1047,
														"src": "1020:14:11"
													},
													"referencedDeclaration": 1047,
													"src": "1020:14:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$1047_storage_ptr",
														"typeString": "struct IERC721A.TokenOwnership"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1019:23:11"
									},
									"scope": 1267,
									"src": "951:92:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1234,
										"nodeType": "StructuredDocumentation",
										"src": "1049:142:11",
										"text": " @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n See {ERC721AQueryable-explicitOwnershipOf}"
									},
									"functionSelector": "5bbb2177",
									"id": 1244,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "explicitOwnershipsOf",
									"nameLocation": "1205:20:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1237,
												"mutability": "mutable",
												"name": "tokenIds",
												"nameLocation": "1243:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "1226:25:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1235,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1226:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1236,
													"nodeType": "ArrayTypeName",
													"src": "1226:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1225:27:11"
									},
									"returnParameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "1276:23:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_TokenOwnership_$1047_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IERC721A.TokenOwnership[]"
												},
												"typeName": {
													"baseType": {
														"id": 1240,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1239,
															"name": "TokenOwnership",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1047,
															"src": "1276:14:11"
														},
														"referencedDeclaration": 1047,
														"src": "1276:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$1047_storage_ptr",
															"typeString": "struct IERC721A.TokenOwnership"
														}
													},
													"id": 1241,
													"nodeType": "ArrayTypeName",
													"src": "1276:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_TokenOwnership_$1047_storage_$dyn_storage_ptr",
														"typeString": "struct IERC721A.TokenOwnership[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1275:25:11"
									},
									"scope": 1267,
									"src": "1196:105:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1245,
										"nodeType": "StructuredDocumentation",
										"src": "1307:365:11",
										"text": " @dev Returns an array of token IDs owned by `owner`,\n in the range [`start`, `stop`)\n (i.e. `start <= tokenId < stop`).\n This function allows for tokens to be queried if the collection\n grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n Requirements:\n - `start` < `stop`"
									},
									"functionSelector": "99a2557a",
									"id": 1257,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokensOfOwnerIn",
									"nameLocation": "1686:15:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1247,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1719:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "1711:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1246,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1711:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "start",
												"nameLocation": "1742:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "1734:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1734:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1251,
												"mutability": "mutable",
												"name": "stop",
												"nameLocation": "1765:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "1757:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1250,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1757:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1701:74:11"
									},
									"returnParameters": {
										"id": 1256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1255,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "1799:16:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1253,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1799:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1254,
													"nodeType": "ArrayTypeName",
													"src": "1799:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1798:18:11"
									},
									"scope": 1267,
									"src": "1677:140:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1258,
										"nodeType": "StructuredDocumentation",
										"src": "1823:426:11",
										"text": " @dev Returns an array of token IDs owned by `owner`.\n This function scans the ownership mapping and is O(totalSupply) in complexity.\n It is meant to be called off-chain.\n See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n multiple smaller scans if the collection is large enough to cause\n an out-of-gas error (10K pfp collections should be fine)."
									},
									"functionSelector": "8462151c",
									"id": 1266,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokensOfOwner",
									"nameLocation": "2263:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2285:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1266,
												"src": "2277:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2277:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2276:15:11"
									},
									"returnParameters": {
										"id": 1265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1264,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1266,
												"src": "2315:16:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1262,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2315:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1263,
													"nodeType": "ArrayTypeName",
													"src": "2315:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2314:18:11"
									},
									"scope": 1267,
									"src": "2254:79:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1268,
							"src": "205:2130:11",
							"usedErrors": [
								999,
								1002,
								1005,
								1008,
								1011,
								1014,
								1017,
								1020,
								1023,
								1026,
								1029,
								1032,
								1035,
								1038,
								1224
							]
						}
					],
					"src": "84:2252:11"
				},
				"id": 11
			}
		}
	}
}