{
	"id": "bb463104600ef8600375c5a59c305b11",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.15",
	"solcLongVersion": "0.8.15+commit.e14f2714",
	"input": {
		"language": "Solidity",
		"sources": {
			"MintNagaKids.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\ncontract MintNagaKids is AccessControl, ReentrancyGuard {\r\n\r\n    IERC721Enumerable public nagaKidsContract;\r\n    bool public isFreeMintOpen;\r\n    bool public isWhitelistOpen;\r\n\r\n\r\n    constructor(IERC721Enumerable _nagaKids) {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        changeNagaKidsContract(_nagaKids);\r\n    }\r\n\r\n    function changeNagaKidsContract(IERC721Enumerable _nagaKids)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        nagaKidsContract = _nagaKids;\r\n    }\r\n\r\n    function changeWhitelistMintOpen(bool _isOpen)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        isWhitelistOpen = _isOpen;\r\n    }\r\n\r\n    function changeFreeMintOpen(bool _isOpen)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        isFreeMintOpen = _isOpen;\r\n    }\r\n\r\n    function whitelistMint() public payable nonReentrant {\r\n        require(isWhitelistOpen == true, \"Whitelist not open to mint.\");\r\n        require(getTotalSupply() < 1111, \"Over supply\");\r\n    }\r\n\r\n    function getTotalSupply() public view returns (uint256) {\r\n        return nagaKidsContract.totalSupply();\r\n    }\r\n\r\n    // function getMaxSupply() public view returns (uint256) {\r\n    //     return nagaKidsContract.maxSupply();\r\n    // }\r\n}\r\n"
			},
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"AccessControl": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.",
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://861c3abaa2b388a0228469080470d2254e8e91fd09aa0abda8b9ef3babf03ee5\",\"dweb:/ipfs/QmZFg88WPesuMo6GMtf3fi9NHQ5tENYLDZsFQSWgoq13TN\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 24,
								"contract": "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
								"label": "_roles",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControl.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)19_storage"
							},
							"t_struct(RoleData)19_storage": {
								"encoding": "inplace",
								"label": "struct AccessControl.RoleData",
								"members": [
									{
										"astId": 16,
										"contract": "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
										"label": "members",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 18,
										"contract": "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"IAccessControl": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "External interface of AccessControl declared to support ERC165 detection.",
						"events": {
							"RoleAdminChanged(bytes32,bytes32,bytes32)": {
								"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
							},
							"RoleGranted(bytes32,address,address)": {
								"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
							},
							"RoleRevoked(bytes32,address,address)": {
								"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
							}
						},
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 403,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220482475a97023f85002d88b36969440a2f71b0286ad4e8b89549651f5f3d8d2c164736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220482475a97023f85002d88b36969440a2f71b0286ad4e8b89549651f5f3d8d2c164736f6c634300080f0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE 0x24 PUSH22 0xA97023F85002D88B36969440A2F71B0286AD4E8B8954 SWAP7 MLOAD CREATE2 RETURN 0xD8 0xD2 0xC1 PUSH5 0x736F6C6343 STOP ADDMOD 0xF STOP CALLER ",
							"sourceMap": "146:1885:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;146:1885:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220482475a97023f85002d88b36969440a2f71b0286ad4e8b89549651f5f3d8d2c164736f6c634300080f0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE 0x24 PUSH22 0xA97023F85002D88B36969440A2F71B0286AD4E8B8954 SWAP7 MLOAD CREATE2 RETURN 0xD8 0xD2 0xC1 PUSH5 0x736F6C6343 STOP ADDMOD 0xF STOP CALLER ",
							"sourceMap": "146:1885:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220482475a97023f85002d88b36969440a2f71b0286ad4e8b89549651f5f3d8d2c164736f6c634300080f0033",
									".code": [
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/AccessControl.sol",
								"@openzeppelin/contracts/access/IAccessControl.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"MintNagaKids.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"MintNagaKids.sol": {
				"MintNagaKids": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract IERC721Enumerable",
									"name": "_nagaKids",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "_isOpen",
									"type": "bool"
								}
							],
							"name": "changeFreeMintOpen",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC721Enumerable",
									"name": "_nagaKids",
									"type": "address"
								}
							],
							"name": "changeNagaKidsContract",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "_isOpen",
									"type": "bool"
								}
							],
							"name": "changeWhitelistMintOpen",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTotalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isFreeMintOpen",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isWhitelistOpen",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nagaKidsContract",
							"outputs": [
								{
									"internalType": "contract IERC721Enumerable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "whitelistMint",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"MintNagaKids.sol\":268:1532  contract MintNagaKids is AccessControl, ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n    /* \"MintNagaKids.sol\":452:598  constructor(IERC721Enumerable _nagaKids) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  dup1\n  sstore\n    /* \"MintNagaKids.sol\":504:546  _grantRole(DEFAULT_ADMIN_ROLE, msg.sender) */\n  tag_8\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n  0x00\n    /* \"MintNagaKids.sol\":535:545  msg.sender */\n  caller\n    /* \"MintNagaKids.sol\":504:514  _grantRole */\n  tag_9\n    /* \"MintNagaKids.sol\":504:546  _grantRole(DEFAULT_ADMIN_ROLE, msg.sender) */\n  jump\t// in\ntag_8:\n    /* \"MintNagaKids.sol\":557:590  changeNagaKidsContract(_nagaKids) */\n  tag_10\n    /* \"MintNagaKids.sol\":580:589  _nagaKids */\n  dup2\n    /* \"MintNagaKids.sol\":557:579  changeNagaKidsContract */\n  tag_11\n    /* \"MintNagaKids.sol\":557:590  changeNagaKidsContract(_nagaKids) */\n  jump\t// in\ntag_10:\n    /* \"MintNagaKids.sol\":452:598  constructor(IERC721Enumerable _nagaKids) {... */\n  pop\n    /* \"MintNagaKids.sol\":268:1532  contract MintNagaKids is AccessControl, ReentrancyGuard {... */\n  jump(tag_69)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7244:7477  function _grantRole(bytes32 role, address account) internal virtual {... */\ntag_9:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2981:2985  bool */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n  dup3\n  dup2\n  mstore\n  0x20\n  dup2\n  dup2\n  mstore\n  0x40\n  dup1\n  dup4\n  keccak256\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3033  _roles[role].members[account] */\n  dup6\n  and\n  dup5\n  mstore\n  swap1\n  swap2\n  mstore\n  swap1\n  keccak256\n  sload\n  0xff\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7322:7471  if (!hasRole(role, account)) {... */\n  tag_16\n  jumpi\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7371  _roles */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7377  _roles[role] */\n  dup3\n  dup2\n  mstore\n  0x20\n  dup2\n  dup2\n  mstore\n  0x40\n  dup1\n  dup4\n  keccak256\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7394  _roles[role].members[account] */\n  dup6\n  and\n  dup5\n  mstore\n  swap1\n  swap2\n  mstore\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7401  _roles[role].members[account] = true */\n  dup1\n  sload\n  not(0xff)\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7397:7401  true */\n  0x01\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7401  _roles[role].members[account] = true */\n  or\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7447:7459  _msgSender() */\n  tag_17\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n  swap1\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  jump\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7447:7459  _msgSender() */\ntag_17:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7438:7445  account */\n  dup2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7432:7436  role */\n  dup4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n  0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7322:7471  if (!hasRole(role, account)) {... */\ntag_16:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7244:7477  function _grantRole(bytes32 role, address account) internal virtual {... */\n  pop\n  pop\n  jump\t// out\n    /* \"MintNagaKids.sol\":606:773  function changeNagaKidsContract(IERC721Enumerable _nagaKids)... */\ntag_11:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n  tag_20\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n  dup2\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n  tag_21\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n  jump\t// in\ntag_20:\n  pop\n    /* \"MintNagaKids.sol\":737:753  nagaKidsContract */\n  0x02\n    /* \"MintNagaKids.sol\":737:765  nagaKidsContract = _nagaKids */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"MintNagaKids.sol\":606:773  function changeNagaKidsContract(IERC721Enumerable _nagaKids)... */\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3334:3437  function _checkRole(bytes32 role) internal view virtual {... */\ntag_21:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3400:3430  _checkRole(role, _msgSender()) */\n  tag_26\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3411:3415  role */\n  dup2\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3400:3410  _checkRole */\n  tag_28\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3400:3430  _checkRole(role, _msgSender()) */\n  jump\t// in\ntag_26:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3334:3437  function _checkRole(bytes32 role) internal view virtual {... */\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3718:4210  function _checkRole(bytes32 role, address account) internal view virtual {... */\ntag_28:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2981:2985  bool */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n  dup3\n  dup2\n  mstore\n  0x20\n  dup2\n  dup2\n  mstore\n  0x40\n  dup1\n  dup4\n  keccak256\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3033  _roles[role].members[account] */\n  dup6\n  and\n  dup5\n  mstore\n  swap1\n  swap2\n  mstore\n  swap1\n  keccak256\n  sload\n  0xff\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3801:4204  if (!hasRole(role, account)) {... */\n  tag_16\n  jumpi\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n  tag_32\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4017:4024  account */\n  dup2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4027:4029  20 */\n  0x14\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4008  Strings.toHexString */\n  or(tag_0_90, shl(0x20, tag_33))\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n  0x20\n  shr\n  jump\t// in\ntag_32:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4101:4139  Strings.toHexString(uint256(role), 32) */\n  tag_34\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4129:4133  role */\n  dup4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4136:4138  32 */\n  0x20\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4101:4120  Strings.toHexString */\n  tag_0_90\n  tag_33\n  dup3\n  shl\n  or\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4101:4139  Strings.toHexString(uint256(role), 32) */\n  dup2\n  shr\n  jump\t// in\ntag_34:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3896:4161  abi.encodePacked(... */\n  add(0x20, mload(0x40))\n  tag_35\n  swap3\n  swap2\n  swap1\n  tag_36\n  jump\t// in\ntag_35:\n  0x40\n  dup1\n  mload\n  not(0x1f)\n  dup2\n  dup5\n  sub\n  add\n  dup2\n  mstore\n  swap1\n  dup3\n  swap1\n  mstore\n  shl(0xe5, 0x461bcd)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3844:4193  revert(... */\n  dup3\n  mstore\n  tag_37\n  swap2\n  0x04\n  add\n  tag_38\n  jump\t// in\ntag_37:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1588:2029  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\ntag_33:\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1663:1676  string memory */\n  0x60\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1688:1707  bytes memory buffer */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1730  2 * length */\n  tag_40\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1724:1730  length */\n  dup4\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1721  2 */\n  0x02\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1730  2 * length */\n  tag_41\n  jump\t// in\ntag_40:\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1734  2 * length + 2 */\n  tag_42\n  swap1\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1733:1734  2 */\n  0x02\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1734  2 * length + 2 */\n  tag_43\n  jump\t// in\ntag_42:\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1710:1735  new bytes(2 * length + 2) */\n  dup2\n  gt\n  iszero\n  tag_45\n  jumpi\n  tag_45\n  tag_46\n  jump\t// in\ntag_45:\n  mload(0x40)\n  swap1\n  dup1\n  dup3\n  mstore\n  dup1\n  0x1f\n  add\n  not(0x1f)\n  and\n  0x20\n  add\n  dup3\n  add\n  0x40\n  mstore\n  dup1\n  iszero\n  tag_47\n  jumpi\n  0x20\n  dup3\n  add\n  dup2\n  dup1\n  calldatasize\n  dup4\n  calldatacopy\n  add\n  swap1\n  pop\ntag_47:\n  pop\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1688:1735  bytes memory buffer = new bytes(2 * length + 2) */\n  swap1\n  pop\n  shl(0xfc, 0x03)\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1751  buffer */\n  dup2\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1752:1753  0 */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1754  buffer[0] */\n  dup2\n  mload\n  dup2\n  lt\n  tag_49\n  jumpi\n  tag_49\n  tag_50\n  jump\t// in\ntag_49:\n  0x20\n  add\n  add\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1760  buffer[0] = \"0\" */\n  swap1\n  not(sub(shl(0xf8, 0x01), 0x01))\n  and\n  swap1\n  dup2\n  0x00\n  byte\n  swap1\n  mstore8\n  pop\n  shl(0xfb, 0x0f)\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1776  buffer */\n  dup2\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1777:1778  1 */\n  0x01\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1779  buffer[1] */\n  dup2\n  mload\n  dup2\n  lt\n  tag_52\n  jumpi\n  tag_52\n  tag_50\n  jump\t// in\ntag_52:\n  0x20\n  add\n  add\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1785  buffer[1] = \"x\" */\n  swap1\n  not(sub(shl(0xf8, 0x01), 0x01))\n  and\n  swap1\n  dup2\n  0x00\n  byte\n  swap1\n  mstore8\n  pop\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1800:1809  uint256 i */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1822  2 * length */\n  tag_56\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1816:1822  length */\n  dup5\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1813  2 */\n  0x02\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1822  2 * length */\n  tag_41\n  jump\t// in\ntag_56:\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1826  2 * length + 1 */\n  tag_57\n  swap1\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1825:1826  1 */\n  0x01\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1826  2 * length + 1 */\n  tag_43\n  jump\t// in\ntag_57:\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1800:1826  uint256 i = 2 * length + 1 */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\ntag_53:\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1832:1833  1 */\n  0x01\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1828:1829  i */\n  dup2\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1828:1833  i > 1 */\n  gt\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n  iszero\n  tag_54\n  jumpi\n  shl(0x81, 0x181899199a1a9b1b9c1cb0b131b232b3)\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1879:1884  value */\n  dup6\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1887:1890  0xf */\n  0x0f\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1879:1890  value & 0xf */\n  and\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1866:1891  _HEX_SYMBOLS[value & 0xf] */\n  0x10\n  dup2\n  lt\n  tag_59\n  jumpi\n  tag_59\n  tag_50\n  jump\t// in\ntag_59:\n  byte\n  0xf8\n  shl\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1860  buffer */\n  dup3\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1861:1862  i */\n  dup3\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1863  buffer[i] */\n  dup2\n  mload\n  dup2\n  lt\n  tag_61\n  jumpi\n  tag_61\n  tag_50\n  jump\t// in\ntag_61:\n  0x20\n  add\n  add\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1891  buffer[i] = _HEX_SYMBOLS[value & 0xf] */\n  swap1\n  not(sub(shl(0xf8, 0x01), 0x01))\n  and\n  swap1\n  dup2\n  0x00\n  byte\n  swap1\n  mstore8\n  pop\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1915:1916  4 */\n  0x04\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1905:1916  value >>= 4 */\n  swap5\n  swap1\n  swap5\n  shr\n  swap4\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1835:1838  --i */\n  tag_62\n  dup2\n  tag_63\n  jump\t// in\ntag_62:\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n  jump(tag_53)\ntag_54:\n  pop\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1944:1954  value == 0 */\n  dup4\n  iszero\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n  tag_64\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":2821:2823   */\n  0x20\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":2803:2824   */\n  dup2\n  swap1\n  mstore\n    /* \"#utility.yul\":2840:2858   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":2833:2863   */\n  mstore\n    /* \"#utility.yul\":2899:2933   */\n  0x537472696e67733a20686578206c656e67746820696e73756666696369656e74\n    /* \"#utility.yul\":2879:2897   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":2872:2934   */\n  mstore\n    /* \"#utility.yul\":2951:2969   */\n  0x64\n  add\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n  tag_37\n    /* \"#utility.yul\":2619:2975   */\n  jump\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\ntag_64:\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":2015:2021  buffer */\n  swap4\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1588:2029  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:329   */\ntag_3:\n    /* \"#utility.yul\":109:115   */\n  0x00\n    /* \"#utility.yul\":162:164   */\n  0x20\n    /* \"#utility.yul\":150:159   */\n  dup3\n    /* \"#utility.yul\":141:148   */\n  dup5\n    /* \"#utility.yul\":137:160   */\n  sub\n    /* \"#utility.yul\":133:165   */\n  slt\n    /* \"#utility.yul\":130:182   */\n  iszero\n  tag_71\n  jumpi\n    /* \"#utility.yul\":178:179   */\n  0x00\n    /* \"#utility.yul\":175:176   */\n  dup1\n    /* \"#utility.yul\":168:180   */\n  revert\n    /* \"#utility.yul\":130:182   */\ntag_71:\n    /* \"#utility.yul\":204:220   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":249:280   */\n  dup2\n  and\n    /* \"#utility.yul\":239:281   */\n  dup2\n  eq\n    /* \"#utility.yul\":229:299   */\n  tag_64\n  jumpi\n    /* \"#utility.yul\":295:296   */\n  0x00\n    /* \"#utility.yul\":292:293   */\n  dup1\n    /* \"#utility.yul\":285:297   */\n  revert\n    /* \"#utility.yul\":334:592   */\ntag_67:\n    /* \"#utility.yul\":406:407   */\n  0x00\n    /* \"#utility.yul\":416:529   */\ntag_74:\n    /* \"#utility.yul\":430:436   */\n  dup4\n    /* \"#utility.yul\":427:428   */\n  dup2\n    /* \"#utility.yul\":424:437   */\n  lt\n    /* \"#utility.yul\":416:529   */\n  iszero\n  tag_76\n  jumpi\n    /* \"#utility.yul\":506:517   */\n  dup2\n  dup2\n  add\n    /* \"#utility.yul\":500:518   */\n  mload\n    /* \"#utility.yul\":487:498   */\n  dup4\n  dup3\n  add\n    /* \"#utility.yul\":480:519   */\n  mstore\n    /* \"#utility.yul\":452:454   */\n  0x20\n    /* \"#utility.yul\":445:455   */\n  add\n    /* \"#utility.yul\":416:529   */\n  jump(tag_74)\ntag_76:\n    /* \"#utility.yul\":547:553   */\n  dup4\n    /* \"#utility.yul\":544:545   */\n  dup2\n    /* \"#utility.yul\":541:554   */\n  gt\n    /* \"#utility.yul\":538:586   */\n  iszero\n  tag_77\n  jumpi\n    /* \"#utility.yul\":582:583   */\n  0x00\n    /* \"#utility.yul\":573:579   */\n  dup5\n    /* \"#utility.yul\":568:571   */\n  dup5\n    /* \"#utility.yul\":564:580   */\n  add\n    /* \"#utility.yul\":557:584   */\n  mstore\n    /* \"#utility.yul\":538:586   */\ntag_77:\n  pop\n    /* \"#utility.yul\":334:592   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":597:1383   */\ntag_36:\n    /* \"#utility.yul\":1008:1033   */\n  0x416363657373436f6e74726f6c3a206163636f756e7420000000000000000000\n    /* \"#utility.yul\":1003:1006   */\n  dup2\n    /* \"#utility.yul\":996:1034   */\n  mstore\n    /* \"#utility.yul\":978:981   */\n  0x00\n    /* \"#utility.yul\":1063:1069   */\n  dup4\n    /* \"#utility.yul\":1057:1070   */\n  mload\n    /* \"#utility.yul\":1079:1141   */\n  tag_79\n    /* \"#utility.yul\":1134:1140   */\n  dup2\n    /* \"#utility.yul\":1129:1131   */\n  0x17\n    /* \"#utility.yul\":1124:1127   */\n  dup6\n    /* \"#utility.yul\":1120:1132   */\n  add\n    /* \"#utility.yul\":1113:1117   */\n  0x20\n    /* \"#utility.yul\":1105:1111   */\n  dup9\n    /* \"#utility.yul\":1101:1118   */\n  add\n    /* \"#utility.yul\":1079:1141   */\n  tag_67\n  jump\t// in\ntag_79:\n  shl(0x7d, 0x01034b99036b4b9b9b4b733903937b6329)\n    /* \"#utility.yul\":1200:1202   */\n  0x17\n    /* \"#utility.yul\":1160:1176   */\n  swap2\n  dup5\n  add\n    /* \"#utility.yul\":1192:1203   */\n  swap2\n  dup3\n  add\n    /* \"#utility.yul\":1185:1225   */\n  mstore\n    /* \"#utility.yul\":1250:1263   */\n  dup4\n  mload\n    /* \"#utility.yul\":1272:1335   */\n  tag_80\n    /* \"#utility.yul\":1250:1263   */\n  dup2\n    /* \"#utility.yul\":1321:1323   */\n  0x28\n    /* \"#utility.yul\":1313:1324   */\n  dup5\n  add\n    /* \"#utility.yul\":1306:1310   */\n  0x20\n    /* \"#utility.yul\":1294:1311   */\n  dup9\n  add\n    /* \"#utility.yul\":1272:1335   */\n  tag_67\n  jump\t// in\ntag_80:\n    /* \"#utility.yul\":1355:1372   */\n  add\n    /* \"#utility.yul\":1374:1376   */\n  0x28\n    /* \"#utility.yul\":1351:1377   */\n  add\n  swap5\n    /* \"#utility.yul\":597:1383   */\n  swap4\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1388:1771   */\ntag_38:\n    /* \"#utility.yul\":1537:1539   */\n  0x20\n    /* \"#utility.yul\":1526:1535   */\n  dup2\n    /* \"#utility.yul\":1519:1540   */\n  mstore\n    /* \"#utility.yul\":1500:1504   */\n  0x00\n    /* \"#utility.yul\":1569:1575   */\n  dup3\n    /* \"#utility.yul\":1563:1576   */\n  mload\n    /* \"#utility.yul\":1612:1618   */\n  dup1\n    /* \"#utility.yul\":1607:1609   */\n  0x20\n    /* \"#utility.yul\":1596:1605   */\n  dup5\n    /* \"#utility.yul\":1592:1610   */\n  add\n    /* \"#utility.yul\":1585:1619   */\n  mstore\n    /* \"#utility.yul\":1628:1694   */\n  tag_82\n    /* \"#utility.yul\":1687:1693   */\n  dup2\n    /* \"#utility.yul\":1682:1684   */\n  0x40\n    /* \"#utility.yul\":1671:1680   */\n  dup6\n    /* \"#utility.yul\":1667:1685   */\n  add\n    /* \"#utility.yul\":1662:1664   */\n  0x20\n    /* \"#utility.yul\":1654:1660   */\n  dup8\n    /* \"#utility.yul\":1650:1665   */\n  add\n    /* \"#utility.yul\":1628:1694   */\n  tag_67\n  jump\t// in\ntag_82:\n    /* \"#utility.yul\":1755:1757   */\n  0x1f\n    /* \"#utility.yul\":1734:1749   */\n  add\n  not(0x1f)\n    /* \"#utility.yul\":1730:1759   */\n  and\n    /* \"#utility.yul\":1715:1760   */\n  swap2\n  swap1\n  swap2\n  add\n    /* \"#utility.yul\":1762:1764   */\n  0x40\n    /* \"#utility.yul\":1711:1765   */\n  add\n  swap3\n    /* \"#utility.yul\":1388:1771   */\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1776:1903   */\ntag_68:\n    /* \"#utility.yul\":1837:1847   */\n  0x4e487b71\n    /* \"#utility.yul\":1832:1835   */\n  0xe0\n    /* \"#utility.yul\":1828:1848   */\n  shl\n    /* \"#utility.yul\":1825:1826   */\n  0x00\n    /* \"#utility.yul\":1818:1849   */\n  mstore\n    /* \"#utility.yul\":1868:1872   */\n  0x11\n    /* \"#utility.yul\":1865:1866   */\n  0x04\n    /* \"#utility.yul\":1858:1873   */\n  mstore\n    /* \"#utility.yul\":1892:1896   */\n  0x24\n    /* \"#utility.yul\":1889:1890   */\n  0x00\n    /* \"#utility.yul\":1882:1897   */\n  revert\n    /* \"#utility.yul\":1908:2076   */\ntag_41:\n    /* \"#utility.yul\":1948:1955   */\n  0x00\n    /* \"#utility.yul\":2014:2015   */\n  dup2\n    /* \"#utility.yul\":2010:2011   */\n  0x00\n    /* \"#utility.yul\":2006:2012   */\n  not\n    /* \"#utility.yul\":2002:2016   */\n  div\n    /* \"#utility.yul\":1999:2000   */\n  dup4\n    /* \"#utility.yul\":1996:2017   */\n  gt\n    /* \"#utility.yul\":1991:1992   */\n  dup3\n    /* \"#utility.yul\":1984:1993   */\n  iszero\n    /* \"#utility.yul\":1977:1994   */\n  iszero\n    /* \"#utility.yul\":1973:2018   */\n  and\n    /* \"#utility.yul\":1970:2041   */\n  iszero\n  tag_86\n  jumpi\n    /* \"#utility.yul\":2021:2039   */\n  tag_86\n  tag_68\n  jump\t// in\ntag_86:\n  pop\n    /* \"#utility.yul\":2061:2070   */\n  mul\n  swap1\n    /* \"#utility.yul\":1908:2076   */\n  jump\t// out\n    /* \"#utility.yul\":2081:2209   */\ntag_43:\n    /* \"#utility.yul\":2121:2124   */\n  0x00\n    /* \"#utility.yul\":2152:2153   */\n  dup3\n    /* \"#utility.yul\":2148:2154   */\n  not\n    /* \"#utility.yul\":2145:2146   */\n  dup3\n    /* \"#utility.yul\":2142:2155   */\n  gt\n    /* \"#utility.yul\":2139:2178   */\n  iszero\n  tag_89\n  jumpi\n    /* \"#utility.yul\":2158:2176   */\n  tag_89\n  tag_68\n  jump\t// in\ntag_89:\n  pop\n    /* \"#utility.yul\":2194:2203   */\n  add\n  swap1\n    /* \"#utility.yul\":2081:2209   */\n  jump\t// out\n    /* \"#utility.yul\":2214:2341   */\ntag_46:\n    /* \"#utility.yul\":2275:2285   */\n  0x4e487b71\n    /* \"#utility.yul\":2270:2273   */\n  0xe0\n    /* \"#utility.yul\":2266:2286   */\n  shl\n    /* \"#utility.yul\":2263:2264   */\n  0x00\n    /* \"#utility.yul\":2256:2287   */\n  mstore\n    /* \"#utility.yul\":2306:2310   */\n  0x41\n    /* \"#utility.yul\":2303:2304   */\n  0x04\n    /* \"#utility.yul\":2296:2311   */\n  mstore\n    /* \"#utility.yul\":2330:2334   */\n  0x24\n    /* \"#utility.yul\":2327:2328   */\n  0x00\n    /* \"#utility.yul\":2320:2335   */\n  revert\n    /* \"#utility.yul\":2346:2473   */\ntag_50:\n    /* \"#utility.yul\":2407:2417   */\n  0x4e487b71\n    /* \"#utility.yul\":2402:2405   */\n  0xe0\n    /* \"#utility.yul\":2398:2418   */\n  shl\n    /* \"#utility.yul\":2395:2396   */\n  0x00\n    /* \"#utility.yul\":2388:2419   */\n  mstore\n    /* \"#utility.yul\":2438:2442   */\n  0x32\n    /* \"#utility.yul\":2435:2436   */\n  0x04\n    /* \"#utility.yul\":2428:2443   */\n  mstore\n    /* \"#utility.yul\":2462:2466   */\n  0x24\n    /* \"#utility.yul\":2459:2460   */\n  0x00\n    /* \"#utility.yul\":2452:2467   */\n  revert\n    /* \"#utility.yul\":2478:2614   */\ntag_63:\n    /* \"#utility.yul\":2517:2520   */\n  0x00\n    /* \"#utility.yul\":2545:2550   */\n  dup2\n    /* \"#utility.yul\":2535:2574   */\n  tag_94\n  jumpi\n    /* \"#utility.yul\":2554:2572   */\n  tag_94\n  tag_68\n  jump\t// in\ntag_94:\n  pop\n  not(0x00)\n    /* \"#utility.yul\":2590:2608   */\n  add\n  swap1\n    /* \"#utility.yul\":2478:2614   */\n  jump\t// out\n    /* \"#utility.yul\":2619:2975   */\ntag_69:\n    /* \"MintNagaKids.sol\":268:1532  contract MintNagaKids is AccessControl, ReentrancyGuard {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"MintNagaKids.sol\":268:1532  contract MintNagaKids is AccessControl, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x804f43cd\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xa6f5f014\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xa6f5f014\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xc4e41b22\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xd547741f\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xdd31a7ba\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup1\n      0x804f43cd\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x91d14854\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x94f4504d\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa217fddf\n      eq\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      dup1\n      0x28438f68\n      gt\n      tag_19\n      jumpi\n      dup1\n      0x28438f68\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x2f2ff15d\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x36568abe\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x61aec205\n      eq\n      tag_8\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x248a9ca3\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x27c25c20\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      pop\n      tag_21\n      tag_22\n      calldatasize\n      0x04\n      tag_23\n      jump\t// in\n    tag_22:\n      tag_24\n      jump\t// in\n    tag_21:\n      mload(0x40)\n        /* \"#utility.yul\":470:484   */\n      swap1\n      iszero\n        /* \"#utility.yul\":463:485   */\n      iszero\n        /* \"#utility.yul\":445:486   */\n      dup2\n      mstore\n        /* \"#utility.yul\":433:435   */\n      0x20\n        /* \"#utility.yul\":418:436   */\n      add\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4391:4520  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      pop\n      tag_28\n      tag_29\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_29:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4465:4472  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4503  _roles[role] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4513  _roles[role].adminRole */\n      0x01\n      add\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4391:4520  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n      jump\n    tag_28:\n      mload(0x40)\n        /* \"#utility.yul\":828:853   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":816:818   */\n      0x20\n        /* \"#utility.yul\":801:819   */\n      add\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4391:4520  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n      tag_25\n        /* \"#utility.yul\":682:859   */\n      jump\n        /* \"MintNagaKids.sol\":333:374  IERC721Enumerable public nagaKidsContract */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_34\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_34:\n      pop\n      sload(0x02)\n      tag_35\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_35:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1053:1085   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1035:1086   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1023:1025   */\n      0x20\n        /* \"#utility.yul\":1008:1026   */\n      add\n        /* \"MintNagaKids.sol\":333:374  IERC721Enumerable public nagaKidsContract */\n      tag_25\n        /* \"#utility.yul\":864:1092   */\n      jump\n        /* \"MintNagaKids.sol\":939:1083  function changeFreeMintOpen(bool _isOpen)... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_39\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_39:\n      pop\n      tag_40\n      tag_41\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_41:\n      tag_43\n      jump\t// in\n    tag_40:\n      stop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4770:4915  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      pop\n      tag_40\n      tag_46\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_46:\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5787:6001  function renounceRole(bytes32 role, address account) public virtual override {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_49\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_49:\n      pop\n      tag_40\n      tag_51\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"MintNagaKids.sol\":606:773  function changeNagaKidsContract(IERC721Enumerable _nagaKids)... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      pop\n      tag_40\n      tag_55\n      calldatasize\n      0x04\n      tag_56\n      jump\t// in\n    tag_55:\n      tag_57\n      jump\t// in\n        /* \"MintNagaKids.sol\":1091:1284  function whitelistMint() public payable nonReentrant {... */\n    tag_9:\n      tag_40\n      tag_59\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_60\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_60:\n      pop\n      tag_21\n      tag_62\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_62:\n      tag_63\n      jump\t// in\n        /* \"MintNagaKids.sol\":414:441  bool public isWhitelistOpen */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_65\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_65:\n      pop\n      sload(0x02)\n      tag_21\n      swap1\n      shl(0xa8, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2027:2076  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_69\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_69:\n      pop\n      tag_28\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2027:2076  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n      dup2\n      jump\n        /* \"MintNagaKids.sol\":381:407  bool public isFreeMintOpen */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_73\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_73:\n      pop\n      sload(0x02)\n      tag_21\n      swap1\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\n        /* \"MintNagaKids.sol\":1292:1404  function getTotalSupply() public view returns (uint256) {... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_77\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_77:\n      pop\n      tag_28\n      tag_79\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5149:5296  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_82\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_82:\n      pop\n      tag_40\n      tag_84\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_84:\n      tag_85\n      jump\t// in\n        /* \"MintNagaKids.sol\":781:931  function changeWhitelistMintOpen(bool _isOpen)... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_86\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_86:\n      pop\n      tag_40\n      tag_88\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_88:\n      tag_89\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_24:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2691:2695  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2714:2761  interfaceId == type(IAccessControl).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x7965db0b)\n      eq\n      dup1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2714:2801  interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      tag_93\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      dup4\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2765:2801  super.supportsInterface(interfaceId) */\n    tag_93:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2707:2801  return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      swap3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"MintNagaKids.sol\":939:1083  function changeFreeMintOpen(bool _isOpen)... */\n    tag_43:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_97\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_98\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_97:\n      pop\n        /* \"MintNagaKids.sol\":1051:1065  isFreeMintOpen */\n      0x02\n        /* \"MintNagaKids.sol\":1051:1075  isFreeMintOpen = _isOpen */\n      dup1\n      sload\n      swap2\n      iszero\n      iszero\n      shl(0xa0, 0x01)\n      mul\n      not(shl(0xa0, 0xff))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"MintNagaKids.sol\":939:1083  function changeFreeMintOpen(bool _isOpen)... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4770:4915  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4465:4472  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4503  _roles[role] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4513  _roles[role].adminRole */\n      0x01\n      add\n      sload\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_102\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_98\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_102:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4883:4908  _grantRole(role, account) */\n      tag_104\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4894:4898  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4900:4907  account */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4883:4893  _grantRole */\n      tag_105\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4883:4908  _grantRole(role, account) */\n      jump\t// in\n    tag_104:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4770:4915  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5787:6001  function renounceRole(bytes32 role, address account) public virtual override {... */\n    tag_52:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5882:5905  account == _msgSender() */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5882:5905  account == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5874:5957  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2492:2494   */\n      0x20\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5874:5957  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2474:2495   */\n      mstore\n        /* \"#utility.yul\":2531:2533   */\n      0x2f\n        /* \"#utility.yul\":2511:2529   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2504:2534   */\n      mstore\n        /* \"#utility.yul\":2570:2604   */\n      0x416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365\n        /* \"#utility.yul\":2550:2568   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2543:2605   */\n      mstore\n      shl(0x89, 0x103937b632b9903337b91039b2b633)\n        /* \"#utility.yul\":2621:2639   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2614:2659   */\n      mstore\n        /* \"#utility.yul\":2676:2695   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5874:5957  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n    tag_110:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_109:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5968:5994  _revokeRole(role, account) */\n      tag_112\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5980:5984  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5986:5993  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5968:5979  _revokeRole */\n      tag_113\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5968:5994  _revokeRole(role, account) */\n      jump\t// in\n    tag_112:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5787:6001  function renounceRole(bytes32 role, address account) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"MintNagaKids.sol\":606:773  function changeNagaKidsContract(IERC721Enumerable _nagaKids)... */\n    tag_57:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_115\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_98\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_115:\n      pop\n        /* \"MintNagaKids.sol\":737:753  nagaKidsContract */\n      0x02\n        /* \"MintNagaKids.sol\":737:765  nagaKidsContract = _nagaKids */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"MintNagaKids.sol\":606:773  function changeNagaKidsContract(IERC721Enumerable _nagaKids)... */\n      jump\t// out\n        /* \"MintNagaKids.sol\":1091:1284  function whitelistMint() public payable nonReentrant {... */\n    tag_59:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      sub\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_118\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2908:2910   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2890:2911   */\n      mstore\n        /* \"#utility.yul\":2947:2949   */\n      0x1f\n        /* \"#utility.yul\":2927:2945   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2920:2950   */\n      mstore\n        /* \"#utility.yul\":2986:3019   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":2966:2984   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2959:3020   */\n      mstore\n        /* \"#utility.yul\":3037:3055   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_110\n        /* \"#utility.yul\":2706:3061   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_118:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      dup2\n      dup2\n      sstore\n        /* \"MintNagaKids.sol\":1163:1178  isWhitelistOpen */\n      swap1\n      sload\n      shl(0xa8, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"MintNagaKids.sol\":1163:1186  isWhitelistOpen == true */\n      iszero\n      iszero\n      eq\n        /* \"MintNagaKids.sol\":1155:1218  require(isWhitelistOpen == true, \"Whitelist not open to mint.\") */\n      tag_122\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3268:3270   */\n      0x20\n        /* \"MintNagaKids.sol\":1155:1218  require(isWhitelistOpen == true, \"Whitelist not open to mint.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3250:3271   */\n      mstore\n        /* \"#utility.yul\":3307:3309   */\n      0x1b\n        /* \"#utility.yul\":3287:3305   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3280:3310   */\n      mstore\n        /* \"#utility.yul\":3346:3375   */\n      0x57686974656c697374206e6f74206f70656e20746f206d696e742e0000000000\n        /* \"#utility.yul\":3326:3344   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3319:3376   */\n      mstore\n        /* \"#utility.yul\":3393:3411   */\n      0x64\n      add\n        /* \"MintNagaKids.sol\":1155:1218  require(isWhitelistOpen == true, \"Whitelist not open to mint.\") */\n      tag_110\n        /* \"#utility.yul\":3066:3417   */\n      jump\n        /* \"MintNagaKids.sol\":1155:1218  require(isWhitelistOpen == true, \"Whitelist not open to mint.\") */\n    tag_122:\n        /* \"MintNagaKids.sol\":1256:1260  1111 */\n      0x0457\n        /* \"MintNagaKids.sol\":1237:1253  getTotalSupply() */\n      tag_125\n        /* \"MintNagaKids.sol\":1237:1251  getTotalSupply */\n      tag_79\n        /* \"MintNagaKids.sol\":1237:1253  getTotalSupply() */\n      jump\t// in\n    tag_125:\n        /* \"MintNagaKids.sol\":1237:1260  getTotalSupply() < 1111 */\n      lt\n        /* \"MintNagaKids.sol\":1229:1276  require(getTotalSupply() < 1111, \"Over supply\") */\n      tag_126\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3624:3626   */\n      0x20\n        /* \"MintNagaKids.sol\":1229:1276  require(getTotalSupply() < 1111, \"Over supply\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3606:3627   */\n      mstore\n        /* \"#utility.yul\":3663:3665   */\n      0x0b\n        /* \"#utility.yul\":3643:3661   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3636:3666   */\n      mstore\n      shl(0xa8, 0x4f76657220737570706c79)\n        /* \"#utility.yul\":3682:3700   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3675:3716   */\n      mstore\n        /* \"#utility.yul\":3733:3751   */\n      0x64\n      add\n        /* \"MintNagaKids.sol\":1229:1276  require(getTotalSupply() < 1111, \"Over supply\") */\n      tag_110\n        /* \"#utility.yul\":3422:3757   */\n      jump\n        /* \"MintNagaKids.sol\":1229:1276  require(getTotalSupply() < 1111, \"Over supply\") */\n    tag_126:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      dup1\n      sstore\n        /* \"MintNagaKids.sol\":1091:1284  function whitelistMint() public payable nonReentrant {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n    tag_63:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2981:2985  bool */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3033  _roles[role].members[account] */\n      swap4\n      swap1\n      swap4\n      and\n      dup5\n      mstore\n      swap2\n      swap1\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n      jump\t// out\n        /* \"MintNagaKids.sol\":1292:1404  function getTotalSupply() public view returns (uint256) {... */\n    tag_79:\n        /* \"MintNagaKids.sol\":1366:1382  nagaKidsContract */\n      sload(0x02)\n        /* \"MintNagaKids.sol\":1366:1396  nagaKidsContract.totalSupply() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x18160ddd)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"MintNagaKids.sol\":1339:1346  uint256 */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"MintNagaKids.sol\":1366:1382  nagaKidsContract */\n      and\n      swap2\n        /* \"MintNagaKids.sol\":1366:1394  nagaKidsContract.totalSupply */\n      0x18160ddd\n      swap2\n        /* \"MintNagaKids.sol\":1366:1396  nagaKidsContract.totalSupply() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"MintNagaKids.sol\":1366:1382  nagaKidsContract */\n      dup7\n        /* \"MintNagaKids.sol\":1366:1396  nagaKidsContract.totalSupply() */\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_132\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_132:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_133\n      swap2\n      swap1\n      tag_134\n      jump\t// in\n    tag_133:\n        /* \"MintNagaKids.sol\":1359:1396  return nagaKidsContract.totalSupply() */\n      swap1\n      pop\n        /* \"MintNagaKids.sol\":1292:1404  function getTotalSupply() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5149:5296  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_85:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4465:4472  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4503  _roles[role] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4513  _roles[role].adminRole */\n      0x01\n      add\n      sload\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_137\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_98\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_137:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5263:5289  _revokeRole(role, account) */\n      tag_104\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5275:5279  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5281:5288  account */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5263:5274  _revokeRole */\n      tag_113\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5263:5289  _revokeRole(role, account) */\n      jump\t// in\n        /* \"MintNagaKids.sol\":781:931  function changeWhitelistMintOpen(bool _isOpen)... */\n    tag_89:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_141\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_98\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_141:\n      pop\n        /* \"MintNagaKids.sol\":898:913  isWhitelistOpen */\n      0x02\n        /* \"MintNagaKids.sol\":898:923  isWhitelistOpen = _isOpen */\n      dup1\n      sload\n      swap2\n      iszero\n      iszero\n      shl(0xa8, 0x01)\n      mul\n      not(shl(0xa8, 0xff))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"MintNagaKids.sol\":781:931  function changeWhitelistMintOpen(bool _isOpen)... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1588:2029  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n    tag_90:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1663:1676  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1688:1707  bytes memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1730  2 * length */\n      tag_144\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1724:1730  length */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1721  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1730  2 * length */\n      tag_145\n      jump\t// in\n    tag_144:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1734  2 * length + 2 */\n      tag_146\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1733:1734  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1734  2 * length + 2 */\n      tag_147\n      jump\t// in\n    tag_146:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1710:1735  new bytes(2 * length + 2) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_149\n      jumpi\n      tag_149\n      tag_150\n      jump\t// in\n    tag_149:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_151\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_151:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1688:1735  bytes memory buffer = new bytes(2 * length + 2) */\n      swap1\n      pop\n      shl(0xfc, 0x03)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1751  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1752:1753  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1754  buffer[0] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_153\n      jumpi\n      tag_153\n      tag_154\n      jump\t// in\n    tag_153:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1760  buffer[0] = \"0\" */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n      shl(0xfb, 0x0f)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1776  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1777:1778  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1779  buffer[1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_156\n      jumpi\n      tag_156\n      tag_154\n      jump\t// in\n    tag_156:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1785  buffer[1] = \"x\" */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1800:1809  uint256 i */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1822  2 * length */\n      tag_160\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1816:1822  length */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1813  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1822  2 * length */\n      tag_145\n      jump\t// in\n    tag_160:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1826  2 * length + 1 */\n      tag_161\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1825:1826  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1826  2 * length + 1 */\n      tag_147\n      jump\t// in\n    tag_161:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1800:1826  uint256 i = 2 * length + 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n    tag_157:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1832:1833  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1828:1829  i */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1828:1833  i > 1 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n      iszero\n      tag_158\n      jumpi\n      shl(0x81, 0x181899199a1a9b1b9c1cb0b131b232b3)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1879:1884  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1887:1890  0xf */\n      0x0f\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1879:1890  value & 0xf */\n      and\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1866:1891  _HEX_SYMBOLS[value & 0xf] */\n      0x10\n      dup2\n      lt\n      tag_163\n      jumpi\n      tag_163\n      tag_154\n      jump\t// in\n    tag_163:\n      byte\n      0xf8\n      shl\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1860  buffer */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1861:1862  i */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1863  buffer[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_165\n      jumpi\n      tag_165\n      tag_154\n      jump\t// in\n    tag_165:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1891  buffer[i] = _HEX_SYMBOLS[value & 0xf] */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1915:1916  4 */\n      0x04\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1905:1916  value >>= 4 */\n      swap5\n      swap1\n      swap5\n      shr\n      swap4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1835:1838  --i */\n      tag_166\n      dup2\n      tag_167\n      jump\t// in\n    tag_166:\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n      jump(tag_157)\n    tag_158:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1944:1954  value == 0 */\n      dup4\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n      tag_168\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4996:4998   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4978:4999   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":5015:5033   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5008:5038   */\n      mstore\n        /* \"#utility.yul\":5074:5108   */\n      0x537472696e67733a20686578206c656e67746820696e73756666696369656e74\n        /* \"#utility.yul\":5054:5072   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5047:5109   */\n      mstore\n        /* \"#utility.yul\":5126:5144   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n      tag_110\n        /* \"#utility.yul\":4794:5150   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n    tag_168:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":2015:2021  buffer */\n      swap4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1588:2029  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3334:3437  function _checkRole(bytes32 role) internal view virtual {... */\n    tag_98:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3400:3430  _checkRole(role, _msgSender()) */\n      tag_173\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3411:3415  role */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3400:3410  _checkRole */\n      tag_175\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3400:3430  _checkRole(role, _msgSender()) */\n      jump\t// in\n    tag_173:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3334:3437  function _checkRole(bytes32 role) internal view virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7244:7477  function _grantRole(bytes32 role, address account) internal virtual {... */\n    tag_105:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7327:7349  hasRole(role, account) */\n      tag_177\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7335:7339  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7341:7348  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7327:7334  hasRole */\n      tag_63\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7327:7349  hasRole(role, account) */\n      jump\t// in\n    tag_177:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7322:7471  if (!hasRole(role, account)) {... */\n      tag_112\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7371  _roles */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7377  _roles[role] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7394  _roles[role].members[account] */\n      dup6\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7401  _roles[role].members[account] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7397:7401  true */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7401  _roles[role].members[account] = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7447:7459  _msgSender() */\n      tag_179\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7447:7459  _msgSender() */\n    tag_179:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7438:7445  account */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7432:7436  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n      0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7244:7477  function _grantRole(bytes32 role, address account) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7602:7836  function _revokeRole(bytes32 role, address account) internal virtual {... */\n    tag_113:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7685:7707  hasRole(role, account) */\n      tag_182\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7693:7697  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7699:7706  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7685:7692  hasRole */\n      tag_63\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7685:7707  hasRole(role, account) */\n      jump\t// in\n    tag_182:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7681:7830  if (hasRole(role, account)) {... */\n      iszero\n      tag_112\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7755:7760  false */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7723:7735  _roles[role] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7723:7752  _roles[role].members[account] */\n      dup6\n      and\n      dup1\n      dup6\n      mstore\n      swap3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7723:7760  _roles[role].members[account] = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7779:7819  RoleRevoked(role, account, _msgSender()) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7723:7735  _roles[role] */\n      dup6\n      swap2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7779:7819  RoleRevoked(role, account, _msgSender()) */\n      0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b\n      swap2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7755:7760  false */\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7779:7819  RoleRevoked(role, account, _msgSender()) */\n      log4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7602:7836  function _revokeRole(bytes32 role, address account) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3718:4210  function _checkRole(bytes32 role, address account) internal view virtual {... */\n    tag_175:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3806:3828  hasRole(role, account) */\n      tag_186\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3814:3818  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3820:3827  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3806:3813  hasRole */\n      tag_63\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3806:3828  hasRole(role, account) */\n      jump\t// in\n    tag_186:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3801:4204  if (!hasRole(role, account)) {... */\n      tag_112\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n      tag_188\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4017:4024  account */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4027:4029  20 */\n      0x14\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4008  Strings.toHexString */\n      tag_90\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n      jump\t// in\n    tag_188:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4101:4139  Strings.toHexString(uint256(role), 32) */\n      tag_189\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4129:4133  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4136:4138  32 */\n      0x20\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4101:4120  Strings.toHexString */\n      tag_90\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4101:4139  Strings.toHexString(uint256(role), 32) */\n      jump\t// in\n    tag_189:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3896:4161  abi.encodePacked(... */\n      add(0x20, mload(0x40))\n      tag_190\n      swap3\n      swap2\n      swap1\n      tag_191\n      jump\t// in\n    tag_190:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3844:4193  revert(... */\n      dup3\n      mstore\n      tag_110\n      swap2\n      0x04\n      add\n      tag_193\n      jump\t// in\n        /* \"#utility.yul\":14:300   */\n    tag_23:\n        /* \"#utility.yul\":72:78   */\n      0x00\n        /* \"#utility.yul\":125:127   */\n      0x20\n        /* \"#utility.yul\":113:122   */\n      dup3\n        /* \"#utility.yul\":104:111   */\n      dup5\n        /* \"#utility.yul\":100:123   */\n      sub\n        /* \"#utility.yul\":96:128   */\n      slt\n        /* \"#utility.yul\":93:145   */\n      iszero\n      tag_199\n      jumpi\n        /* \"#utility.yul\":141:142   */\n      0x00\n        /* \"#utility.yul\":138:139   */\n      dup1\n        /* \"#utility.yul\":131:143   */\n      revert\n        /* \"#utility.yul\":93:145   */\n    tag_199:\n        /* \"#utility.yul\":167:190   */\n      dup2\n      calldataload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":219:251   */\n      dup2\n      and\n        /* \"#utility.yul\":209:252   */\n      dup2\n      eq\n        /* \"#utility.yul\":199:270   */\n      tag_168\n      jumpi\n        /* \"#utility.yul\":266:267   */\n      0x00\n        /* \"#utility.yul\":263:264   */\n      dup1\n        /* \"#utility.yul\":256:268   */\n      revert\n        /* \"#utility.yul\":497:677   */\n    tag_30:\n        /* \"#utility.yul\":556:562   */\n      0x00\n        /* \"#utility.yul\":609:611   */\n      0x20\n        /* \"#utility.yul\":597:606   */\n      dup3\n        /* \"#utility.yul\":588:595   */\n      dup5\n        /* \"#utility.yul\":584:607   */\n      sub\n        /* \"#utility.yul\":580:612   */\n      slt\n        /* \"#utility.yul\":577:629   */\n      iszero\n      tag_203\n      jumpi\n        /* \"#utility.yul\":625:626   */\n      0x00\n        /* \"#utility.yul\":622:623   */\n      dup1\n        /* \"#utility.yul\":615:627   */\n      revert\n        /* \"#utility.yul\":577:629   */\n    tag_203:\n      pop\n        /* \"#utility.yul\":648:671   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":497:677   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1097:1370   */\n    tag_42:\n        /* \"#utility.yul\":1153:1159   */\n      0x00\n        /* \"#utility.yul\":1206:1208   */\n      0x20\n        /* \"#utility.yul\":1194:1203   */\n      dup3\n        /* \"#utility.yul\":1185:1192   */\n      dup5\n        /* \"#utility.yul\":1181:1204   */\n      sub\n        /* \"#utility.yul\":1177:1209   */\n      slt\n        /* \"#utility.yul\":1174:1226   */\n      iszero\n      tag_207\n      jumpi\n        /* \"#utility.yul\":1222:1223   */\n      0x00\n        /* \"#utility.yul\":1219:1220   */\n      dup1\n        /* \"#utility.yul\":1212:1224   */\n      revert\n        /* \"#utility.yul\":1174:1226   */\n    tag_207:\n        /* \"#utility.yul\":1261:1270   */\n      dup2\n        /* \"#utility.yul\":1248:1271   */\n      calldataload\n        /* \"#utility.yul\":1314:1319   */\n      dup1\n        /* \"#utility.yul\":1307:1320   */\n      iszero\n        /* \"#utility.yul\":1300:1321   */\n      iszero\n        /* \"#utility.yul\":1293:1298   */\n      dup2\n        /* \"#utility.yul\":1290:1322   */\n      eq\n        /* \"#utility.yul\":1280:1340   */\n      tag_168\n      jumpi\n        /* \"#utility.yul\":1336:1337   */\n      0x00\n        /* \"#utility.yul\":1333:1334   */\n      dup1\n        /* \"#utility.yul\":1326:1338   */\n      revert\n        /* \"#utility.yul\":1375:1506   */\n    tag_194:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1450:1481   */\n      dup2\n      and\n        /* \"#utility.yul\":1440:1482   */\n      dup2\n      eq\n        /* \"#utility.yul\":1430:1500   */\n      tag_173\n      jumpi\n        /* \"#utility.yul\":1496:1497   */\n      0x00\n        /* \"#utility.yul\":1493:1494   */\n      dup1\n        /* \"#utility.yul\":1486:1498   */\n      revert\n        /* \"#utility.yul\":1511:1826   */\n    tag_47:\n        /* \"#utility.yul\":1579:1585   */\n      0x00\n        /* \"#utility.yul\":1587:1593   */\n      dup1\n        /* \"#utility.yul\":1640:1642   */\n      0x40\n        /* \"#utility.yul\":1628:1637   */\n      dup4\n        /* \"#utility.yul\":1619:1626   */\n      dup6\n        /* \"#utility.yul\":1615:1638   */\n      sub\n        /* \"#utility.yul\":1611:1643   */\n      slt\n        /* \"#utility.yul\":1608:1660   */\n      iszero\n      tag_212\n      jumpi\n        /* \"#utility.yul\":1656:1657   */\n      0x00\n        /* \"#utility.yul\":1653:1654   */\n      dup1\n        /* \"#utility.yul\":1646:1658   */\n      revert\n        /* \"#utility.yul\":1608:1660   */\n    tag_212:\n        /* \"#utility.yul\":1692:1701   */\n      dup3\n        /* \"#utility.yul\":1679:1702   */\n      calldataload\n        /* \"#utility.yul\":1669:1702   */\n      swap2\n      pop\n        /* \"#utility.yul\":1752:1754   */\n      0x20\n        /* \"#utility.yul\":1741:1750   */\n      dup4\n        /* \"#utility.yul\":1737:1755   */\n      add\n        /* \"#utility.yul\":1724:1756   */\n      calldataload\n        /* \"#utility.yul\":1765:1796   */\n      tag_213\n        /* \"#utility.yul\":1790:1795   */\n      dup2\n        /* \"#utility.yul\":1765:1796   */\n      tag_194\n      jump\t// in\n    tag_213:\n        /* \"#utility.yul\":1815:1820   */\n      dup1\n        /* \"#utility.yul\":1805:1820   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":1511:1826   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1831:2103   */\n    tag_56:\n        /* \"#utility.yul\":1915:1921   */\n      0x00\n        /* \"#utility.yul\":1968:1970   */\n      0x20\n        /* \"#utility.yul\":1956:1965   */\n      dup3\n        /* \"#utility.yul\":1947:1954   */\n      dup5\n        /* \"#utility.yul\":1943:1966   */\n      sub\n        /* \"#utility.yul\":1939:1971   */\n      slt\n        /* \"#utility.yul\":1936:1988   */\n      iszero\n      tag_215\n      jumpi\n        /* \"#utility.yul\":1984:1985   */\n      0x00\n        /* \"#utility.yul\":1981:1982   */\n      dup1\n        /* \"#utility.yul\":1974:1986   */\n      revert\n        /* \"#utility.yul\":1936:1988   */\n    tag_215:\n        /* \"#utility.yul\":2023:2032   */\n      dup2\n        /* \"#utility.yul\":2010:2033   */\n      calldataload\n        /* \"#utility.yul\":2042:2073   */\n      tag_168\n        /* \"#utility.yul\":2067:2072   */\n      dup2\n        /* \"#utility.yul\":2042:2073   */\n      tag_194\n      jump\t// in\n        /* \"#utility.yul\":3762:3946   */\n    tag_134:\n        /* \"#utility.yul\":3832:3838   */\n      0x00\n        /* \"#utility.yul\":3885:3887   */\n      0x20\n        /* \"#utility.yul\":3873:3882   */\n      dup3\n        /* \"#utility.yul\":3864:3871   */\n      dup5\n        /* \"#utility.yul\":3860:3883   */\n      sub\n        /* \"#utility.yul\":3856:3888   */\n      slt\n        /* \"#utility.yul\":3853:3905   */\n      iszero\n      tag_223\n      jumpi\n        /* \"#utility.yul\":3901:3902   */\n      0x00\n        /* \"#utility.yul\":3898:3899   */\n      dup1\n        /* \"#utility.yul\":3891:3903   */\n      revert\n        /* \"#utility.yul\":3853:3905   */\n    tag_223:\n      pop\n        /* \"#utility.yul\":3924:3940   */\n      mload\n      swap2\n        /* \"#utility.yul\":3762:3946   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3951:4078   */\n    tag_195:\n        /* \"#utility.yul\":4012:4022   */\n      0x4e487b71\n        /* \"#utility.yul\":4007:4010   */\n      0xe0\n        /* \"#utility.yul\":4003:4023   */\n      shl\n        /* \"#utility.yul\":4000:4001   */\n      0x00\n        /* \"#utility.yul\":3993:4024   */\n      mstore\n        /* \"#utility.yul\":4043:4047   */\n      0x11\n        /* \"#utility.yul\":4040:4041   */\n      0x04\n        /* \"#utility.yul\":4033:4048   */\n      mstore\n        /* \"#utility.yul\":4067:4071   */\n      0x24\n        /* \"#utility.yul\":4064:4065   */\n      0x00\n        /* \"#utility.yul\":4057:4072   */\n      revert\n        /* \"#utility.yul\":4083:4251   */\n    tag_145:\n        /* \"#utility.yul\":4123:4130   */\n      0x00\n        /* \"#utility.yul\":4189:4190   */\n      dup2\n        /* \"#utility.yul\":4185:4186   */\n      0x00\n        /* \"#utility.yul\":4181:4187   */\n      not\n        /* \"#utility.yul\":4177:4191   */\n      div\n        /* \"#utility.yul\":4174:4175   */\n      dup4\n        /* \"#utility.yul\":4171:4192   */\n      gt\n        /* \"#utility.yul\":4166:4167   */\n      dup3\n        /* \"#utility.yul\":4159:4168   */\n      iszero\n        /* \"#utility.yul\":4152:4169   */\n      iszero\n        /* \"#utility.yul\":4148:4193   */\n      and\n        /* \"#utility.yul\":4145:4216   */\n      iszero\n      tag_227\n      jumpi\n        /* \"#utility.yul\":4196:4214   */\n      tag_227\n      tag_195\n      jump\t// in\n    tag_227:\n      pop\n        /* \"#utility.yul\":4236:4245   */\n      mul\n      swap1\n        /* \"#utility.yul\":4083:4251   */\n      jump\t// out\n        /* \"#utility.yul\":4256:4384   */\n    tag_147:\n        /* \"#utility.yul\":4296:4299   */\n      0x00\n        /* \"#utility.yul\":4327:4328   */\n      dup3\n        /* \"#utility.yul\":4323:4329   */\n      not\n        /* \"#utility.yul\":4320:4321   */\n      dup3\n        /* \"#utility.yul\":4317:4330   */\n      gt\n        /* \"#utility.yul\":4314:4353   */\n      iszero\n      tag_230\n      jumpi\n        /* \"#utility.yul\":4333:4351   */\n      tag_230\n      tag_195\n      jump\t// in\n    tag_230:\n      pop\n        /* \"#utility.yul\":4369:4378   */\n      add\n      swap1\n        /* \"#utility.yul\":4256:4384   */\n      jump\t// out\n        /* \"#utility.yul\":4389:4516   */\n    tag_150:\n        /* \"#utility.yul\":4450:4460   */\n      0x4e487b71\n        /* \"#utility.yul\":4445:4448   */\n      0xe0\n        /* \"#utility.yul\":4441:4461   */\n      shl\n        /* \"#utility.yul\":4438:4439   */\n      0x00\n        /* \"#utility.yul\":4431:4462   */\n      mstore\n        /* \"#utility.yul\":4481:4485   */\n      0x41\n        /* \"#utility.yul\":4478:4479   */\n      0x04\n        /* \"#utility.yul\":4471:4486   */\n      mstore\n        /* \"#utility.yul\":4505:4509   */\n      0x24\n        /* \"#utility.yul\":4502:4503   */\n      0x00\n        /* \"#utility.yul\":4495:4510   */\n      revert\n        /* \"#utility.yul\":4521:4648   */\n    tag_154:\n        /* \"#utility.yul\":4582:4592   */\n      0x4e487b71\n        /* \"#utility.yul\":4577:4580   */\n      0xe0\n        /* \"#utility.yul\":4573:4593   */\n      shl\n        /* \"#utility.yul\":4570:4571   */\n      0x00\n        /* \"#utility.yul\":4563:4594   */\n      mstore\n        /* \"#utility.yul\":4613:4617   */\n      0x32\n        /* \"#utility.yul\":4610:4611   */\n      0x04\n        /* \"#utility.yul\":4603:4618   */\n      mstore\n        /* \"#utility.yul\":4637:4641   */\n      0x24\n        /* \"#utility.yul\":4634:4635   */\n      0x00\n        /* \"#utility.yul\":4627:4642   */\n      revert\n        /* \"#utility.yul\":4653:4789   */\n    tag_167:\n        /* \"#utility.yul\":4692:4695   */\n      0x00\n        /* \"#utility.yul\":4720:4725   */\n      dup2\n        /* \"#utility.yul\":4710:4749   */\n      tag_235\n      jumpi\n        /* \"#utility.yul\":4729:4747   */\n      tag_235\n      tag_195\n      jump\t// in\n    tag_235:\n      pop\n      not(0x00)\n        /* \"#utility.yul\":4765:4783   */\n      add\n      swap1\n        /* \"#utility.yul\":4653:4789   */\n      jump\t// out\n        /* \"#utility.yul\":5155:5413   */\n    tag_196:\n        /* \"#utility.yul\":5227:5228   */\n      0x00\n        /* \"#utility.yul\":5237:5350   */\n    tag_238:\n        /* \"#utility.yul\":5251:5257   */\n      dup4\n        /* \"#utility.yul\":5248:5249   */\n      dup2\n        /* \"#utility.yul\":5245:5258   */\n      lt\n        /* \"#utility.yul\":5237:5350   */\n      iszero\n      tag_240\n      jumpi\n        /* \"#utility.yul\":5327:5338   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":5321:5339   */\n      mload\n        /* \"#utility.yul\":5308:5319   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":5301:5340   */\n      mstore\n        /* \"#utility.yul\":5273:5275   */\n      0x20\n        /* \"#utility.yul\":5266:5276   */\n      add\n        /* \"#utility.yul\":5237:5350   */\n      jump(tag_238)\n    tag_240:\n        /* \"#utility.yul\":5368:5374   */\n      dup4\n        /* \"#utility.yul\":5365:5366   */\n      dup2\n        /* \"#utility.yul\":5362:5375   */\n      gt\n        /* \"#utility.yul\":5359:5407   */\n      iszero\n      tag_241\n      jumpi\n        /* \"#utility.yul\":5403:5404   */\n      0x00\n        /* \"#utility.yul\":5394:5400   */\n      dup5\n        /* \"#utility.yul\":5389:5392   */\n      dup5\n        /* \"#utility.yul\":5385:5401   */\n      add\n        /* \"#utility.yul\":5378:5405   */\n      mstore\n        /* \"#utility.yul\":5359:5407   */\n    tag_241:\n      pop\n        /* \"#utility.yul\":5155:5413   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5418:6204   */\n    tag_191:\n        /* \"#utility.yul\":5829:5854   */\n      0x416363657373436f6e74726f6c3a206163636f756e7420000000000000000000\n        /* \"#utility.yul\":5824:5827   */\n      dup2\n        /* \"#utility.yul\":5817:5855   */\n      mstore\n        /* \"#utility.yul\":5799:5802   */\n      0x00\n        /* \"#utility.yul\":5884:5890   */\n      dup4\n        /* \"#utility.yul\":5878:5891   */\n      mload\n        /* \"#utility.yul\":5900:5962   */\n      tag_243\n        /* \"#utility.yul\":5955:5961   */\n      dup2\n        /* \"#utility.yul\":5950:5952   */\n      0x17\n        /* \"#utility.yul\":5945:5948   */\n      dup6\n        /* \"#utility.yul\":5941:5953   */\n      add\n        /* \"#utility.yul\":5934:5938   */\n      0x20\n        /* \"#utility.yul\":5926:5932   */\n      dup9\n        /* \"#utility.yul\":5922:5939   */\n      add\n        /* \"#utility.yul\":5900:5962   */\n      tag_196\n      jump\t// in\n    tag_243:\n      shl(0x7d, 0x01034b99036b4b9b9b4b733903937b6329)\n        /* \"#utility.yul\":6021:6023   */\n      0x17\n        /* \"#utility.yul\":5981:5997   */\n      swap2\n      dup5\n      add\n        /* \"#utility.yul\":6013:6024   */\n      swap2\n      dup3\n      add\n        /* \"#utility.yul\":6006:6046   */\n      mstore\n        /* \"#utility.yul\":6071:6084   */\n      dup4\n      mload\n        /* \"#utility.yul\":6093:6156   */\n      tag_244\n        /* \"#utility.yul\":6071:6084   */\n      dup2\n        /* \"#utility.yul\":6142:6144   */\n      0x28\n        /* \"#utility.yul\":6134:6145   */\n      dup5\n      add\n        /* \"#utility.yul\":6127:6131   */\n      0x20\n        /* \"#utility.yul\":6115:6132   */\n      dup9\n      add\n        /* \"#utility.yul\":6093:6156   */\n      tag_196\n      jump\t// in\n    tag_244:\n        /* \"#utility.yul\":6176:6193   */\n      add\n        /* \"#utility.yul\":6195:6197   */\n      0x28\n        /* \"#utility.yul\":6172:6198   */\n      add\n      swap5\n        /* \"#utility.yul\":5418:6204   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6209:6592   */\n    tag_193:\n        /* \"#utility.yul\":6358:6360   */\n      0x20\n        /* \"#utility.yul\":6347:6356   */\n      dup2\n        /* \"#utility.yul\":6340:6361   */\n      mstore\n        /* \"#utility.yul\":6321:6325   */\n      0x00\n        /* \"#utility.yul\":6390:6396   */\n      dup3\n        /* \"#utility.yul\":6384:6397   */\n      mload\n        /* \"#utility.yul\":6433:6439   */\n      dup1\n        /* \"#utility.yul\":6428:6430   */\n      0x20\n        /* \"#utility.yul\":6417:6426   */\n      dup5\n        /* \"#utility.yul\":6413:6431   */\n      add\n        /* \"#utility.yul\":6406:6440   */\n      mstore\n        /* \"#utility.yul\":6449:6515   */\n      tag_246\n        /* \"#utility.yul\":6508:6514   */\n      dup2\n        /* \"#utility.yul\":6503:6505   */\n      0x40\n        /* \"#utility.yul\":6492:6501   */\n      dup6\n        /* \"#utility.yul\":6488:6506   */\n      add\n        /* \"#utility.yul\":6483:6485   */\n      0x20\n        /* \"#utility.yul\":6475:6481   */\n      dup8\n        /* \"#utility.yul\":6471:6486   */\n      add\n        /* \"#utility.yul\":6449:6515   */\n      tag_196\n      jump\t// in\n    tag_246:\n        /* \"#utility.yul\":6576:6578   */\n      0x1f\n        /* \"#utility.yul\":6555:6570   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":6551:6580   */\n      and\n        /* \"#utility.yul\":6536:6581   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":6583:6585   */\n      0x40\n        /* \"#utility.yul\":6532:6586   */\n      add\n      swap3\n        /* \"#utility.yul\":6209:6592   */\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220d8f8d8df17d2332ffbf52b8176f1e13cc921f2ab291c3d7c9a84a28789ea024a64736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_411": {
									"entryPoint": null,
									"id": 411,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_873": {
									"entryPoint": null,
									"id": 873,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_checkRole_135": {
									"entryPoint": 311,
									"id": 135,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkRole_92": {
									"entryPoint": 296,
									"id": 92,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_grantRole_287": {
									"entryPoint": 87,
									"id": 287,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_591": {
									"entryPoint": null,
									"id": 591,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@changeNagaKidsContract_887": {
									"entryPoint": 248,
									"id": 887,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@hasRole_79": {
									"entryPoint": null,
									"id": 79,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toHexString_803": {
									"entryPoint": 475,
									"id": 803,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_contract$_IERC721Enumerable_$579_fromMemory": {
									"entryPoint": 923,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 1017,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1138,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1247,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1213,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 966,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"decrement_t_uint256": {
									"entryPoint": 1318,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1191,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 1296,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1274,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2977:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "120:209:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "166:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "175:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "178:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "168:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "168:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "168:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "141:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "150:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "137:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "137:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "162:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "133:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "133:32:10"
															},
															"nodeType": "YulIf",
															"src": "130:52:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "191:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "210:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "204:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "204:16:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "195:5:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "283:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "292:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "295:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "285:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "285:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "285:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "242:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "253:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "268:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "273:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "264:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "264:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "277:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "260:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "260:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "249:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "249:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "239:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:50:10"
															},
															"nodeType": "YulIf",
															"src": "229:70:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "308:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "318:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "308:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IERC721Enumerable_$579_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "86:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "97:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "109:6:10",
														"type": ""
													}
												],
												"src": "14:315:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "387:205:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "397:10:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "406:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "401:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "466:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "491:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "496:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "487:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "487:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "510:3:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "515:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "506:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "506:11:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "500:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "500:18:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "480:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "480:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "480:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "427:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "430:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "424:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "424:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "438:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "440:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "449:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "452:2:10",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "445:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "445:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "440:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "420:3:10",
																"statements": []
															},
															"src": "416:113:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "555:31:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "568:3:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "573:6:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "564:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "564:16:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "582:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "557:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "557:27:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "557:27:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "544:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "547:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "541:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "541:13:10"
															},
															"nodeType": "YulIf",
															"src": "538:48:10"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "365:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "370:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "375:6:10",
														"type": ""
													}
												],
												"src": "334:258:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "986:397:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1003:3:10"
																	},
																	{
																		"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1008:25:10",
																		"type": "",
																		"value": "AccessControl: account "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "996:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "996:38:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "996:38:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1043:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1063:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1057:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1057:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1047:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1105:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1113:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1101:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1101:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1124:3:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1129:2:10",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1120:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1120:12:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1134:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "1079:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1079:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1079:62:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1150:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1164:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1169:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1160:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1160:16:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1154:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1196:2:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1200:2:10",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1192:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1192:11:10"
																	},
																	{
																		"hexValue": "206973206d697373696e6720726f6c6520",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1205:19:10",
																		"type": "",
																		"value": " is missing role "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1185:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1185:40:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1185:40:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1234:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1256:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1250:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1250:13:10"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "1238:8:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "1298:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1306:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1294:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1294:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1317:2:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1321:2:10",
																				"type": "",
																				"value": "40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1313:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1313:11:10"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "1326:8:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "1272:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1272:63:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1272:63:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1344:33:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1359:2:10"
																			},
																			{
																				"name": "length_1",
																				"nodeType": "YulIdentifier",
																				"src": "1363:8:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1355:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1355:17:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1374:2:10",
																		"type": "",
																		"value": "40"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1351:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1351:26:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1344:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "954:3:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "959:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "967:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "978:3:10",
														"type": ""
													}
												],
												"src": "597:786:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1509:262:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1526:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1537:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1519:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1519:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1519:21:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1549:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1569:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1563:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1563:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1553:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1596:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1607:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1592:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1592:18:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1612:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1585:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1585:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1585:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1654:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1662:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1650:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1650:15:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1671:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1682:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1667:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1667:18:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1687:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "1628:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1628:66:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1628:66:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1703:62:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1719:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1738:6:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1746:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1734:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1734:15:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1755:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1751:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1751:7:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1730:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1730:29:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1715:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1715:45:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1762:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1711:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1711:54:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1703:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1478:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1489:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1500:4:10",
														"type": ""
													}
												],
												"src": "1388:383:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1808:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1825:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1832:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1837:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1828:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1828:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1818:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1818:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1818:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1865:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1868:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1858:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1858:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1858:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1889:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1892:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1882:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1882:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1882:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "1776:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1960:116:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2019:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2021:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2021:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2021:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "1991:1:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1984:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1984:9:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1977:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1977:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "1999:1:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2010:1:10",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2006:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2006:6:10"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2014:1:10"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "2002:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2002:14:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1996:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1996:21:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1973:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1973:45:10"
															},
															"nodeType": "YulIf",
															"src": "1970:71:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2050:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2065:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2068:1:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2061:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2061:9:10"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "2050:7:10"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "1939:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "1942:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "1948:7:10",
														"type": ""
													}
												],
												"src": "1908:168:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2129:80:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2156:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2158:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2158:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2158:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2145:1:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2152:1:10"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2148:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2148:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2142:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2142:13:10"
															},
															"nodeType": "YulIf",
															"src": "2139:39:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2187:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2198:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2201:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2194:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2194:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2187:3:10"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2112:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2115:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2121:3:10",
														"type": ""
													}
												],
												"src": "2081:128:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2246:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2263:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2270:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2275:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2266:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2266:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2256:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2256:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2256:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2303:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2306:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2296:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2296:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2296:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2327:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2330:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2320:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2320:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2320:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "2214:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2378:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2395:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2402:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2407:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2398:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2398:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2388:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2388:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2388:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2435:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2438:4:10",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2428:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2428:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2428:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2459:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2462:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2452:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2452:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2452:15:10"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "2346:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2525:89:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2552:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2554:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2554:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2554:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2545:5:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2538:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2538:13:10"
															},
															"nodeType": "YulIf",
															"src": "2535:39:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2583:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2594:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2605:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2601:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2601:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2590:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2590:18:10"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "2583:3:10"
																}
															]
														}
													]
												},
												"name": "decrement_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2507:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "2517:3:10",
														"type": ""
													}
												],
												"src": "2478:136:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2793:182:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2810:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2821:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2803:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2803:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2803:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2844:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2855:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2840:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2840:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2860:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2833:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2833:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2833:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2883:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2894:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2879:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2879:18:10"
																	},
																	{
																		"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2899:34:10",
																		"type": "",
																		"value": "Strings: hex length insufficient"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2872:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2872:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2872:62:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2943:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2955:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2966:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2951:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2951:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2943:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2770:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2784:4:10",
														"type": ""
													}
												],
												"src": "2619:356:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_IERC721Enumerable_$579_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x10E0 CODESIZE SUB DUP1 PUSH3 0x10E0 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x39B JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE PUSH3 0x45 PUSH1 0x0 CALLER PUSH3 0x57 JUMP JUMPDEST PUSH3 0x50 DUP2 PUSH3 0xF8 JUMP JUMPDEST POP PUSH3 0x540 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0xF4 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0xB3 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x105 DUP2 PUSH3 0x128 JUMP JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH3 0x134 DUP2 CALLER PUSH3 0x137 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0xF4 JUMPI PUSH3 0x181 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH3 0x1DB PUSH1 0x20 SHL PUSH3 0x615 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x197 DUP4 PUSH1 0x20 PUSH3 0x615 PUSH3 0x1DB DUP3 SHL OR DUP2 SHR JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x1AA SWAP3 SWAP2 SWAP1 PUSH3 0x3F9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH3 0x1D2 SWAP2 PUSH1 0x4 ADD PUSH3 0x472 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH3 0x1EC DUP4 PUSH1 0x2 PUSH3 0x4BD JUMP JUMPDEST PUSH3 0x1F9 SWAP1 PUSH1 0x2 PUSH3 0x4DF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x213 JUMPI PUSH3 0x213 PUSH3 0x4FA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x23E JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x25C JUMPI PUSH3 0x25C PUSH3 0x510 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x28E JUMPI PUSH3 0x28E PUSH3 0x510 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH3 0x2B4 DUP5 PUSH1 0x2 PUSH3 0x4BD JUMP JUMPDEST PUSH3 0x2C1 SWAP1 PUSH1 0x1 PUSH3 0x4DF JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x343 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH3 0x2F9 JUMPI PUSH3 0x2F9 PUSH3 0x510 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x312 JUMPI PUSH3 0x312 PUSH3 0x510 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH3 0x33B DUP2 PUSH3 0x526 JUMP JUMPDEST SWAP1 POP PUSH3 0x2C4 JUMP JUMPDEST POP DUP4 ISZERO PUSH3 0x394 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x1D2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x3E3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x3C9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x3F3 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH3 0x433 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x3C6 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH3 0x466 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x3C6 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x493 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x3C6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x4DA JUMPI PUSH3 0x4DA PUSH3 0x4A7 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x4F5 JUMPI PUSH3 0x4F5 PUSH3 0x4A7 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH3 0x538 JUMPI PUSH3 0x538 PUSH3 0x4A7 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0xB90 DUP1 PUSH3 0x550 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x804F43CD GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xA6F5F014 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xA6F5F014 EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0xC4E41B22 EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x2AE JUMPI DUP1 PUSH4 0xDD31A7BA EQ PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x804F43CD EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x94F4504D EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28438F68 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x28438F68 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x61AEC205 EQ PUSH2 0x1FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x27C25C20 EQ PUSH2 0x160 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x912 JUMP JUMPDEST PUSH2 0x2EE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x152 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0x93C JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x180 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x955 JUMP JUMPDEST PUSH2 0x325 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x1D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x98C JUMP JUMPDEST PUSH2 0x34F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x1F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x98C JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0x9BC JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x42A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x98C JUMP JUMPDEST PUSH2 0x52A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x10D SWAP1 PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x152 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x10D SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x152 PUSH2 0x553 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x98C JUMP JUMPDEST PUSH2 0x5C6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x955 JUMP JUMPDEST PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x31F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x330 DUP2 PUSH2 0x7B8 JUMP JUMPDEST POP PUSH1 0x2 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x36A DUP2 PUSH2 0x7B8 JUMP JUMPDEST PUSH2 0x374 DUP4 DUP4 PUSH2 0x7C5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x3EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3F8 DUP3 DUP3 PUSH2 0x849 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x407 DUP2 PUSH2 0x7B8 JUMP JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0x47C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 DUP2 SSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x4DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57686974656C697374206E6F74206F70656E20746F206D696E742E0000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0x457 PUSH2 0x4E9 PUSH2 0x553 JUMP JUMPDEST LT PUSH2 0x524 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x4F76657220737570706C79 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x59D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5C1 SWAP2 SWAP1 PUSH2 0x9D9 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x5E1 DUP2 PUSH2 0x7B8 JUMP JUMPDEST PUSH2 0x374 DUP4 DUP4 PUSH2 0x849 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP2 PUSH2 0x7B8 JUMP JUMPDEST POP PUSH1 0x2 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA8 SHL MUL PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x624 DUP4 PUSH1 0x2 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x62F SWAP1 PUSH1 0x2 PUSH2 0xA27 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x647 JUMPI PUSH2 0x647 PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x671 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x68C JUMPI PUSH2 0x68C PUSH2 0xA55 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6BB JUMPI PUSH2 0x6BB PUSH2 0xA55 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x6DF DUP5 PUSH1 0x2 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x6EA SWAP1 PUSH1 0x1 PUSH2 0xA27 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x762 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x71E JUMPI PUSH2 0x71E PUSH2 0xA55 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x734 JUMPI PUSH2 0x734 PUSH2 0xA55 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x75B DUP2 PUSH2 0xA6B JUMP JUMPDEST SWAP1 POP PUSH2 0x6ED JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x7B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x7C2 DUP2 CALLER PUSH2 0x8AE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7CF DUP3 DUP3 PUSH2 0x52A JUMP JUMPDEST PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x805 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x853 DUP3 DUP3 PUSH2 0x52A JUMP JUMPDEST ISZERO PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x8B8 DUP3 DUP3 PUSH2 0x52A JUMP JUMPDEST PUSH2 0x3F8 JUMPI PUSH2 0x8D0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x615 JUMP JUMPDEST PUSH2 0x8DB DUP4 PUSH1 0x20 PUSH2 0x615 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8EC SWAP3 SWAP2 SWAP1 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x3E5 SWAP2 PUSH1 0x4 ADD PUSH2 0xB27 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x7B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x94E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x99F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x9B1 DUP2 PUSH2 0x977 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7B1 DUP2 PUSH2 0x977 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xA22 JUMPI PUSH2 0xA22 PUSH2 0x9F2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xA3A JUMPI PUSH2 0xA3A PUSH2 0x9F2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xA7A JUMPI PUSH2 0xA7A PUSH2 0x9F2 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA9D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA85 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAAC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0xAEA DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xA82 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0xB1B DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xA82 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xB46 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xA82 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 0xF8 0xD8 0xDF OR 0xD2 CALLER 0x2F 0xFB CREATE2 0x2B DUP2 PUSH23 0xF1E13CC921F2AB291C3D7C9A84A28789EA024A64736F6C PUSH4 0x4300080F STOP CALLER ",
							"sourceMap": "268:1264:9:-:0;;;452:146;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1701:1:2;1806:22;;504:42:9;2072:4:0;535:10:9;504;:42::i;:::-;557:33;580:9;557:22;:33::i;:::-;452:146;268:1264;;7244:233:0;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;7322:149;;7365:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7365:29:0;;;;;;;;;:36;;-1:-1:-1;;7365:36:0;7397:4;7365:36;;;7447:12;719:10:5;;640:96;7447:12:0;-1:-1:-1;;;;;7420:40:0;7438:7;-1:-1:-1;;;;;7420:40:0;7432:4;7420:40;;;;;;;;;;7322:149;7244:233;;:::o;606:167:9:-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;737:16:9::1;:28:::0;;-1:-1:-1;;;;;;737:28:9::1;-1:-1:-1::0;;;;;737:28:9;;;::::1;::::0;;;::::1;::::0;;606:167::o;3334:103:0:-;3400:30;3411:4;719:10:5;3400::0;:30::i;:::-;3334:103;:::o;3718:492::-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;3801:403;;3989:41;4017:7;-1:-1:-1;;;;;3989:41:0;4027:2;3989:19;;;;;:41;;:::i;:::-;4101:38;4129:4;4136:2;4101:19;;;;;:38;;:::i;:::-;3896:265;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3896:265:0;;;;;;;;;;-1:-1:-1;;;3844:349:0;;;;;;;:::i;:::-;;;;;;;;1588:441:6;1663:13;1688:19;1720:10;1724:6;1720:1;:10;:::i;:::-;:14;;1733:1;1720:14;:::i;:::-;-1:-1:-1;;;;;1710:25:6;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1710:25:6;;1688:47;;-1:-1:-1;;;1745:6:6;1752:1;1745:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1745:15:6;;;;;;;;;-1:-1:-1;;;1770:6:6;1777:1;1770:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1770:15:6;;;;;;;;-1:-1:-1;1800:9:6;1812:10;1816:6;1812:1;:10;:::i;:::-;:14;;1825:1;1812:14;:::i;:::-;1800:26;;1795:132;1832:1;1828;:5;1795:132;;;-1:-1:-1;;;1879:5:6;1887:3;1879:11;1866:25;;;;;;;:::i;:::-;;;;1854:6;1861:1;1854:9;;;;;;;;:::i;:::-;;;;:37;-1:-1:-1;;;;;1854:37:6;;;;;;;;-1:-1:-1;1915:1:6;1905:11;;;;;1835:3;;;:::i;:::-;;;1795:132;;;-1:-1:-1;1944:10:6;;1936:55;;;;-1:-1:-1;;;1936:55:6;;2821:2:10;1936:55:6;;;2803:21:10;;;2840:18;;;2833:30;2899:34;2879:18;;;2872:62;2951:18;;1936:55:6;2619:356:10;1936:55:6;2015:6;1588:441;-1:-1:-1;;;1588:441:6:o;14:315:10:-;109:6;162:2;150:9;141:7;137:23;133:32;130:52;;;178:1;175;168:12;130:52;204:16;;-1:-1:-1;;;;;249:31:10;;239:42;;229:70;;295:1;292;285:12;334:258;406:1;416:113;430:6;427:1;424:13;416:113;;;506:11;;;500:18;487:11;;;480:39;452:2;445:10;416:113;;;547:6;544:1;541:13;538:48;;;582:1;573:6;568:3;564:16;557:27;538:48;;334:258;;;:::o;597:786::-;1008:25;1003:3;996:38;978:3;1063:6;1057:13;1079:62;1134:6;1129:2;1124:3;1120:12;1113:4;1105:6;1101:17;1079:62;:::i;:::-;-1:-1:-1;;;1200:2:10;1160:16;;;1192:11;;;1185:40;1250:13;;1272:63;1250:13;1321:2;1313:11;;1306:4;1294:17;;1272:63;:::i;:::-;1355:17;1374:2;1351:26;;597:786;-1:-1:-1;;;;597:786:10:o;1388:383::-;1537:2;1526:9;1519:21;1500:4;1569:6;1563:13;1612:6;1607:2;1596:9;1592:18;1585:34;1628:66;1687:6;1682:2;1671:9;1667:18;1662:2;1654:6;1650:15;1628:66;:::i;:::-;1755:2;1734:15;-1:-1:-1;;1730:29:10;1715:45;;;;1762:2;1711:54;;1388:383;-1:-1:-1;;1388:383:10:o;1776:127::-;1837:10;1832:3;1828:20;1825:1;1818:31;1868:4;1865:1;1858:15;1892:4;1889:1;1882:15;1908:168;1948:7;2014:1;2010;2006:6;2002:14;1999:1;1996:21;1991:1;1984:9;1977:17;1973:45;1970:71;;;2021:18;;:::i;:::-;-1:-1:-1;2061:9:10;;1908:168::o;2081:128::-;2121:3;2152:1;2148:6;2145:1;2142:13;2139:39;;;2158:18;;:::i;:::-;-1:-1:-1;2194:9:10;;2081:128::o;2214:127::-;2275:10;2270:3;2266:20;2263:1;2256:31;2306:4;2303:1;2296:15;2330:4;2327:1;2320:15;2346:127;2407:10;2402:3;2398:20;2395:1;2388:31;2438:4;2435:1;2428:15;2462:4;2459:1;2452:15;2478:136;2517:3;2545:5;2535:39;;2554:18;;:::i;:::-;-1:-1:-1;;;2590:18:10;;2478:136::o;2619:356::-;268:1264:9;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DEFAULT_ADMIN_ROLE_27": {
									"entryPoint": null,
									"id": 27,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkRole_135": {
									"entryPoint": 2222,
									"id": 135,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkRole_92": {
									"entryPoint": 1976,
									"id": 92,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_grantRole_287": {
									"entryPoint": 1989,
									"id": 287,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_591": {
									"entryPoint": null,
									"id": 591,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revokeRole_318": {
									"entryPoint": 2121,
									"id": 318,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@changeFreeMintOpen_913": {
									"entryPoint": 805,
									"id": 913,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changeNagaKidsContract_887": {
									"entryPoint": 1020,
									"id": 887,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changeWhitelistMintOpen_900": {
									"entryPoint": 1515,
									"id": 900,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@getRoleAdmin_150": {
									"entryPoint": null,
									"id": 150,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getTotalSupply_944": {
									"entryPoint": 1363,
									"id": 944,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@grantRole_170": {
									"entryPoint": 847,
									"id": 170,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@hasRole_79": {
									"entryPoint": 1322,
									"id": 79,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isFreeMintOpen_854": {
									"entryPoint": null,
									"id": 854,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isWhitelistOpen_856": {
									"entryPoint": null,
									"id": 856,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@nagaKidsContract_852": {
									"entryPoint": null,
									"id": 852,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@renounceRole_213": {
									"entryPoint": 889,
									"id": 213,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@revokeRole_190": {
									"entryPoint": 1478,
									"id": 190,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_60": {
									"entryPoint": 750,
									"id": 60,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_827": {
									"entryPoint": null,
									"id": 827,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toHexString_803": {
									"entryPoint": 1557,
									"id": 803,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@whitelistMint_934": {
									"entryPoint": 1066,
									"id": 934,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_bool": {
									"entryPoint": 2389,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32": {
									"entryPoint": 2364,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32t_address": {
									"entryPoint": 2444,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 2322,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_contract$_IERC721Enumerable_$579": {
									"entryPoint": 2492,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 2521,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 2738,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC721Enumerable_$579__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2855,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_04c899bcc4f5150e1689f9a8071396f43ad4f348d6b97ffd095d25c890be42b8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2599,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 2568,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 2690,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"decrement_t_uint256": {
									"entryPoint": 2667,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 2546,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 2645,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 2623,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_address": {
									"entryPoint": 2423,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:6594:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "83:217:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "129:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "138:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "141:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "131:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "131:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "131:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "104:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "113:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "100:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "100:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "125:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "96:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:32:10"
															},
															"nodeType": "YulIf",
															"src": "93:52:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "154:36:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "180:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "167:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "167:23:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "158:5:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "254:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "263:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "266:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "256:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "256:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "256:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "212:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "223:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "234:3:10",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "239:10:10",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "230:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "230:20:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "219:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "219:32:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "209:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "209:43:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "202:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "202:51:10"
															},
															"nodeType": "YulIf",
															"src": "199:71:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "279:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "289:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "279:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "49:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "60:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "72:6:10",
														"type": ""
													}
												],
												"src": "14:286:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "400:92:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "410:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "422:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "433:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "418:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "418:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "410:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "452:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "477:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "470:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "470:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "463:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "463:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "445:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "445:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "445:41:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "369:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "380:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "391:4:10",
														"type": ""
													}
												],
												"src": "305:187:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "567:110:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "613:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "622:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "625:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "615:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "615:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "615:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "588:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "597:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "584:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "584:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "609:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "580:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "580:32:10"
															},
															"nodeType": "YulIf",
															"src": "577:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "638:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "661:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "648:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:23:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "638:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "533:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "544:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "556:6:10",
														"type": ""
													}
												],
												"src": "497:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "783:76:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "793:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "805:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "816:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "801:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "801:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "793:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "835:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "846:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "828:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "828:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "828:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "752:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "763:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "774:4:10",
														"type": ""
													}
												],
												"src": "682:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "990:102:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1000:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1012:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1023:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1008:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1008:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1000:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1042:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1057:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1073:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1078:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1069:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1069:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1082:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1065:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1065:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1053:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1053:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1035:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1035:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1035:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC721Enumerable_$579__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "959:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "970:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "981:4:10",
														"type": ""
													}
												],
												"src": "864:228:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1164:206:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1210:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1219:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1222:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1212:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1212:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1212:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1185:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1194:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1181:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1181:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1206:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1177:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1177:32:10"
															},
															"nodeType": "YulIf",
															"src": "1174:52:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1235:36:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1261:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1248:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1248:23:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1239:5:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1324:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1333:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1336:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1326:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1326:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1326:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1293:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "1314:5:10"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "1307:6:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1307:13:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1300:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1300:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1290:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1290:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1283:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1283:40:10"
															},
															"nodeType": "YulIf",
															"src": "1280:60:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1349:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1359:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1349:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1130:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1141:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1153:6:10",
														"type": ""
													}
												],
												"src": "1097:273:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1420:86:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1484:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1493:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1496:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1486:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1486:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1486:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1443:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1454:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1469:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1474:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1465:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1465:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1478:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1461:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1461:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1450:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1450:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1440:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1440:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1433:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1433:50:10"
															},
															"nodeType": "YulIf",
															"src": "1430:70:10"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1409:5:10",
														"type": ""
													}
												],
												"src": "1375:131:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1598:228:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1644:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1653:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1656:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1646:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1646:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1646:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1619:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1628:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1615:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1615:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1640:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1611:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1611:32:10"
															},
															"nodeType": "YulIf",
															"src": "1608:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1669:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1692:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1679:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1679:23:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1669:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1711:45:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1741:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1752:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1737:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1737:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1724:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1724:32:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1715:5:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1790:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1765:24:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1765:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1765:31:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1805:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1815:5:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1805:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1556:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1567:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1579:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1587:6:10",
														"type": ""
													}
												],
												"src": "1511:315:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1926:177:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1972:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1981:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1984:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1974:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1974:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1974:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1947:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1956:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1943:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1943:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1968:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1939:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1939:32:10"
															},
															"nodeType": "YulIf",
															"src": "1936:52:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1997:36:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2023:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2010:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2010:23:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2001:5:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2067:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2042:24:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2042:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2042:31:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2082:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2092:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2082:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IERC721Enumerable_$579",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1892:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1903:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1915:6:10",
														"type": ""
													}
												],
												"src": "1831:272:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2209:76:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2219:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2231:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2242:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2227:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2227:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2219:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2261:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2272:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2254:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2254:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2254:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2178:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2189:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2200:4:10",
														"type": ""
													}
												],
												"src": "2108:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2464:237:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2481:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2492:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2474:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2474:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2474:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2515:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2526:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2511:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2511:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2531:2:10",
																		"type": "",
																		"value": "47"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2504:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2504:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2504:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2554:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2565:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2550:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2550:18:10"
																	},
																	{
																		"hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2570:34:10",
																		"type": "",
																		"value": "AccessControl: can only renounce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2543:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2543:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2543:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2625:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2636:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2621:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2621:18:10"
																	},
																	{
																		"hexValue": "20726f6c657320666f722073656c66",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2641:17:10",
																		"type": "",
																		"value": " roles for self"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2614:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2614:45:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2614:45:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2668:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2680:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2691:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2676:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2676:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2668:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2441:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2455:4:10",
														"type": ""
													}
												],
												"src": "2290:411:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2880:181:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2897:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2908:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2890:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2890:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2890:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2931:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2942:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2927:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2927:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2947:2:10",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2920:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2920:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2920:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2970:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2981:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2966:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2966:18:10"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2986:33:10",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2959:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2959:61:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2959:61:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3029:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3041:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3052:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3037:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3037:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3029:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2857:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2871:4:10",
														"type": ""
													}
												],
												"src": "2706:355:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3240:177:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3257:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3268:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3250:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3250:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3250:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3291:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3302:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3287:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3287:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3307:2:10",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3280:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3280:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3280:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3330:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3341:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3326:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3326:18:10"
																	},
																	{
																		"hexValue": "57686974656c697374206e6f74206f70656e20746f206d696e742e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3346:29:10",
																		"type": "",
																		"value": "Whitelist not open to mint."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3319:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3319:57:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3319:57:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3385:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3397:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3408:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3393:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3393:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3385:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_04c899bcc4f5150e1689f9a8071396f43ad4f348d6b97ffd095d25c890be42b8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3217:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3231:4:10",
														"type": ""
													}
												],
												"src": "3066:351:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3596:161:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3613:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3624:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3606:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3606:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3606:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3647:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3658:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3643:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3643:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3663:2:10",
																		"type": "",
																		"value": "11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3636:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3636:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3636:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3686:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3697:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3682:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3682:18:10"
																	},
																	{
																		"hexValue": "4f76657220737570706c79",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3702:13:10",
																		"type": "",
																		"value": "Over supply"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3675:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3675:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3675:41:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3725:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3737:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3748:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3733:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3733:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3725:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3573:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3587:4:10",
														"type": ""
													}
												],
												"src": "3422:335:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3843:103:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3889:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3898:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3901:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3891:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3891:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3891:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3864:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3873:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3860:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3860:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3885:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3856:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3856:32:10"
															},
															"nodeType": "YulIf",
															"src": "3853:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3914:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3930:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3924:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3924:16:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3914:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3809:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3820:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3832:6:10",
														"type": ""
													}
												],
												"src": "3762:184:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3983:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4000:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4007:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4012:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4003:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4003:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3993:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3993:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3993:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4040:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4043:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4033:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4033:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4033:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4064:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4067:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4057:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4057:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4057:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "3951:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4135:116:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4194:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4196:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4196:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4196:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4166:1:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4159:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4159:9:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4152:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4152:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "4174:1:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4185:1:10",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "4181:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4181:6:10"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4189:1:10"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4177:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4177:14:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4171:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4171:21:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4148:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4148:45:10"
															},
															"nodeType": "YulIf",
															"src": "4145:71:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4225:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4240:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4243:1:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "4236:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4236:9:10"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "4225:7:10"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4114:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4117:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "4123:7:10",
														"type": ""
													}
												],
												"src": "4083:168:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4304:80:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4331:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4333:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4333:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4333:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4320:1:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "4327:1:10"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "4323:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4323:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4317:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4317:13:10"
															},
															"nodeType": "YulIf",
															"src": "4314:39:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4362:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4373:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4376:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4369:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4369:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "4362:3:10"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4287:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4290:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "4296:3:10",
														"type": ""
													}
												],
												"src": "4256:128:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4421:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4438:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4445:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4450:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4441:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4441:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4431:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4431:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4431:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4478:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4481:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4471:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4471:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4471:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4502:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4505:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4495:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4495:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4495:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "4389:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4553:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4570:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4577:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4582:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4573:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4573:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4563:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4563:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4563:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4610:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4613:4:10",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4603:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4603:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4603:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4634:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4637:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4627:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4627:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4627:15:10"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "4521:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4700:89:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4727:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4729:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4729:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4729:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4720:5:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4713:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4713:13:10"
															},
															"nodeType": "YulIf",
															"src": "4710:39:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4758:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4769:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4780:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "4776:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4776:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4765:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4765:18:10"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "4758:3:10"
																}
															]
														}
													]
												},
												"name": "decrement_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4682:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "4692:3:10",
														"type": ""
													}
												],
												"src": "4653:136:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4968:182:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4985:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4996:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4978:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4978:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4978:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5019:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5030:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5015:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5015:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5035:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5008:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5008:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5008:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5058:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5069:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5054:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5054:18:10"
																	},
																	{
																		"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5074:34:10",
																		"type": "",
																		"value": "Strings: hex length insufficient"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5047:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5047:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5047:62:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5118:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5130:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5141:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5126:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5126:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5118:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4945:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4959:4:10",
														"type": ""
													}
												],
												"src": "4794:356:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5208:205:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5218:10:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5227:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "5222:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5287:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "5312:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "5317:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5308:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5308:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "5331:3:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "5336:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5327:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5327:11:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "5321:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5321:18:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5301:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5301:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5301:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5248:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5251:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "5245:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5245:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "5259:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5261:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "5270:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5273:2:10",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5266:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5266:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "5261:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "5241:3:10",
																"statements": []
															},
															"src": "5237:113:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5376:31:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "5389:3:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "5394:6:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5385:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5385:16:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5403:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5378:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5378:27:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5378:27:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5365:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5368:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5362:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5362:13:10"
															},
															"nodeType": "YulIf",
															"src": "5359:48:10"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "5186:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "5191:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5196:6:10",
														"type": ""
													}
												],
												"src": "5155:258:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5807:397:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5824:3:10"
																	},
																	{
																		"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5829:25:10",
																		"type": "",
																		"value": "AccessControl: account "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5817:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5817:38:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5817:38:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5864:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5884:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5878:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5878:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5868:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5926:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5934:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5922:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5922:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "5945:3:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5950:2:10",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5941:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5941:12:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5955:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5900:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5900:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5900:62:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5971:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5985:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5990:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5981:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5981:16:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5975:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6017:2:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6021:2:10",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6013:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6013:11:10"
																	},
																	{
																		"hexValue": "206973206d697373696e6720726f6c6520",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6026:19:10",
																		"type": "",
																		"value": " is missing role "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6006:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6006:40:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6006:40:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6055:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6077:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6071:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6071:13:10"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "6059:8:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "6119:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6127:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6115:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6115:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6138:2:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6142:2:10",
																				"type": "",
																				"value": "40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6134:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6134:11:10"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "6147:8:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "6093:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6093:63:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6093:63:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6165:33:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6180:2:10"
																			},
																			{
																				"name": "length_1",
																				"nodeType": "YulIdentifier",
																				"src": "6184:8:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6176:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6176:17:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6195:2:10",
																		"type": "",
																		"value": "40"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6172:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6172:26:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6165:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5775:3:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5780:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5788:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5799:3:10",
														"type": ""
													}
												],
												"src": "5418:786:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6330:262:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6347:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6358:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6340:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6340:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6340:21:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6370:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6390:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6384:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6384:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6374:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6417:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6428:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6413:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6413:18:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6433:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6406:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6406:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6406:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6475:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6483:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6471:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6471:15:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6492:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6503:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6488:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6488:18:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6508:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "6449:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6449:66:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6449:66:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6524:62:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6540:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "6559:6:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6567:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "6555:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6555:15:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6576:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "6572:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6572:7:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "6551:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6551:29:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6536:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6536:45:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6583:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6532:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6532:54:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6524:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6299:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6310:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6321:4:10",
														"type": ""
													}
												],
												"src": "6209:383:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IERC721Enumerable_$579__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC721Enumerable_$579(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_04c899bcc4f5150e1689f9a8071396f43ad4f348d6b97ffd095d25c890be42b8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Whitelist not open to mint.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Over supply\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100e85760003560e01c8063804f43cd1161008a578063a6f5f01411610059578063a6f5f01414610278578063c4e41b2214610299578063d547741f146102ae578063dd31a7ba146102ce57600080fd5b8063804f43cd1461021a57806391d148541461022257806394f4504d14610242578063a217fddf1461026357600080fd5b806328438f68116100c657806328438f68146101985780632f2ff15d146101ba57806336568abe146101da57806361aec205146101fa57600080fd5b806301ffc9a7146100ed578063248a9ca31461012257806327c25c2014610160575b600080fd5b3480156100f957600080fd5b5061010d610108366004610912565b6102ee565b60405190151581526020015b60405180910390f35b34801561012e57600080fd5b5061015261013d36600461093c565b60009081526020819052604090206001015490565b604051908152602001610119565b34801561016c57600080fd5b50600254610180906001600160a01b031681565b6040516001600160a01b039091168152602001610119565b3480156101a457600080fd5b506101b86101b3366004610955565b610325565b005b3480156101c657600080fd5b506101b86101d536600461098c565b61034f565b3480156101e657600080fd5b506101b86101f536600461098c565b610379565b34801561020657600080fd5b506101b86102153660046109bc565b6103fc565b6101b861042a565b34801561022e57600080fd5b5061010d61023d36600461098c565b61052a565b34801561024e57600080fd5b5060025461010d90600160a81b900460ff1681565b34801561026f57600080fd5b50610152600081565b34801561028457600080fd5b5060025461010d90600160a01b900460ff1681565b3480156102a557600080fd5b50610152610553565b3480156102ba57600080fd5b506101b86102c936600461098c565b6105c6565b3480156102da57600080fd5b506101b86102e9366004610955565b6105eb565b60006001600160e01b03198216637965db0b60e01b148061031f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610330816107b8565b5060028054911515600160a01b0260ff60a01b19909216919091179055565b60008281526020819052604090206001015461036a816107b8565b61037483836107c5565b505050565b6001600160a01b03811633146103ee5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6103f88282610849565b5050565b6000610407816107b8565b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b60026001540361047c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103e5565b600260018181559054600160a81b900460ff161515146104de5760405162461bcd60e51b815260206004820152601b60248201527f57686974656c697374206e6f74206f70656e20746f206d696e742e000000000060448201526064016103e5565b6104576104e9610553565b106105245760405162461bcd60e51b815260206004820152600b60248201526a4f76657220737570706c7960a81b60448201526064016103e5565b60018055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c191906109d9565b905090565b6000828152602081905260409020600101546105e1816107b8565b6103748383610849565b60006105f6816107b8565b5060028054911515600160a81b0260ff60a81b19909216919091179055565b60606000610624836002610a08565b61062f906002610a27565b67ffffffffffffffff81111561064757610647610a3f565b6040519080825280601f01601f191660200182016040528015610671576020820181803683370190505b509050600360fc1b8160008151811061068c5761068c610a55565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106106bb576106bb610a55565b60200101906001600160f81b031916908160001a90535060006106df846002610a08565b6106ea906001610a27565b90505b6001811115610762576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061071e5761071e610a55565b1a60f81b82828151811061073457610734610a55565b60200101906001600160f81b031916908160001a90535060049490941c9361075b81610a6b565b90506106ed565b5083156107b15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103e5565b9392505050565b6107c281336108ae565b50565b6107cf828261052a565b6103f8576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556108053390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610853828261052a565b156103f8576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6108b8828261052a565b6103f8576108d0816001600160a01b03166014610615565b6108db836020610615565b6040516020016108ec929190610ab2565b60408051601f198184030181529082905262461bcd60e51b82526103e591600401610b27565b60006020828403121561092457600080fd5b81356001600160e01b0319811681146107b157600080fd5b60006020828403121561094e57600080fd5b5035919050565b60006020828403121561096757600080fd5b813580151581146107b157600080fd5b6001600160a01b03811681146107c257600080fd5b6000806040838503121561099f57600080fd5b8235915060208301356109b181610977565b809150509250929050565b6000602082840312156109ce57600080fd5b81356107b181610977565b6000602082840312156109eb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610a2257610a226109f2565b500290565b60008219821115610a3a57610a3a6109f2565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610a7a57610a7a6109f2565b506000190190565b60005b83811015610a9d578181015183820152602001610a85565b83811115610aac576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610aea816017850160208801610a82565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610b1b816028840160208801610a82565b01602801949350505050565b6020815260008251806020840152610b46816040850160208701610a82565b601f01601f1916919091016040019291505056fea2646970667358221220d8f8d8df17d2332ffbf52b8176f1e13cc921f2ab291c3d7c9a84a28789ea024a64736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x804F43CD GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xA6F5F014 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xA6F5F014 EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0xC4E41B22 EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x2AE JUMPI DUP1 PUSH4 0xDD31A7BA EQ PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x804F43CD EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x94F4504D EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28438F68 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x28438F68 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x61AEC205 EQ PUSH2 0x1FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x27C25C20 EQ PUSH2 0x160 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x912 JUMP JUMPDEST PUSH2 0x2EE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x152 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0x93C JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x180 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x955 JUMP JUMPDEST PUSH2 0x325 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x1D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x98C JUMP JUMPDEST PUSH2 0x34F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x1F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x98C JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0x9BC JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x42A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x98C JUMP JUMPDEST PUSH2 0x52A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x10D SWAP1 PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x152 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x10D SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x152 PUSH2 0x553 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x98C JUMP JUMPDEST PUSH2 0x5C6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x955 JUMP JUMPDEST PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x31F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x330 DUP2 PUSH2 0x7B8 JUMP JUMPDEST POP PUSH1 0x2 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x36A DUP2 PUSH2 0x7B8 JUMP JUMPDEST PUSH2 0x374 DUP4 DUP4 PUSH2 0x7C5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x3EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3F8 DUP3 DUP3 PUSH2 0x849 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x407 DUP2 PUSH2 0x7B8 JUMP JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0x47C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 DUP2 SSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x4DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57686974656C697374206E6F74206F70656E20746F206D696E742E0000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0x457 PUSH2 0x4E9 PUSH2 0x553 JUMP JUMPDEST LT PUSH2 0x524 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x4F76657220737570706C79 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x59D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5C1 SWAP2 SWAP1 PUSH2 0x9D9 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x5E1 DUP2 PUSH2 0x7B8 JUMP JUMPDEST PUSH2 0x374 DUP4 DUP4 PUSH2 0x849 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP2 PUSH2 0x7B8 JUMP JUMPDEST POP PUSH1 0x2 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA8 SHL MUL PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x624 DUP4 PUSH1 0x2 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x62F SWAP1 PUSH1 0x2 PUSH2 0xA27 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x647 JUMPI PUSH2 0x647 PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x671 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x68C JUMPI PUSH2 0x68C PUSH2 0xA55 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6BB JUMPI PUSH2 0x6BB PUSH2 0xA55 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x6DF DUP5 PUSH1 0x2 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x6EA SWAP1 PUSH1 0x1 PUSH2 0xA27 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x762 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x71E JUMPI PUSH2 0x71E PUSH2 0xA55 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x734 JUMPI PUSH2 0x734 PUSH2 0xA55 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x75B DUP2 PUSH2 0xA6B JUMP JUMPDEST SWAP1 POP PUSH2 0x6ED JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x7B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x7C2 DUP2 CALLER PUSH2 0x8AE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7CF DUP3 DUP3 PUSH2 0x52A JUMP JUMPDEST PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x805 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x853 DUP3 DUP3 PUSH2 0x52A JUMP JUMPDEST ISZERO PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x8B8 DUP3 DUP3 PUSH2 0x52A JUMP JUMPDEST PUSH2 0x3F8 JUMPI PUSH2 0x8D0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x615 JUMP JUMPDEST PUSH2 0x8DB DUP4 PUSH1 0x20 PUSH2 0x615 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8EC SWAP3 SWAP2 SWAP1 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x3E5 SWAP2 PUSH1 0x4 ADD PUSH2 0xB27 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x7B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x94E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x99F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x9B1 DUP2 PUSH2 0x977 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7B1 DUP2 PUSH2 0x977 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xA22 JUMPI PUSH2 0xA22 PUSH2 0x9F2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xA3A JUMPI PUSH2 0xA3A PUSH2 0x9F2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xA7A JUMPI PUSH2 0xA7A PUSH2 0x9F2 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA9D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA85 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAAC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0xAEA DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xA82 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0xB1B DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xA82 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xB46 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xA82 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 0xF8 0xD8 0xDF OR 0xD2 CALLER 0x2F 0xFB CREATE2 0x2B DUP2 PUSH23 0xF1E13CC921F2AB291C3D7C9A84A28789EA024A64736F6C PUSH4 0x4300080F STOP CALLER ",
							"sourceMap": "268:1264:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:202:0;;;;;;;;;;-1:-1:-1;2606:202:0;;;;;:::i;:::-;;:::i;:::-;;;470:14:10;;463:22;445:41;;433:2;418:18;2606:202:0;;;;;;;;4391:129;;;;;;;;;;-1:-1:-1;4391:129:0;;;;;:::i;:::-;4465:7;4491:12;;;;;;;;;;:22;;;;4391:129;;;;828:25:10;;;816:2;801:18;4391:129:0;682:177:10;333:41:9;;;;;;;;;;-1:-1:-1;333:41:9;;;;-1:-1:-1;;;;;333:41:9;;;;;;-1:-1:-1;;;;;1053:32:10;;;1035:51;;1023:2;1008:18;333:41:9;864:228:10;939:144:9;;;;;;;;;;-1:-1:-1;939:144:9;;;;;:::i;:::-;;:::i;:::-;;4770:145:0;;;;;;;;;;-1:-1:-1;4770:145:0;;;;;:::i;:::-;;:::i;5787:214::-;;;;;;;;;;-1:-1:-1;5787:214:0;;;;;:::i;:::-;;:::i;606:167:9:-;;;;;;;;;;-1:-1:-1;606:167:9;;;;;:::i;:::-;;:::i;1091:193::-;;;:::i;2895:145:0:-;;;;;;;;;;-1:-1:-1;2895:145:0;;;;;:::i;:::-;;:::i;414:27:9:-;;;;;;;;;;-1:-1:-1;414:27:9;;;;-1:-1:-1;;;414:27:9;;;;;;2027:49:0;;;;;;;;;;-1:-1:-1;2027:49:0;2072:4;2027:49;;381:26:9;;;;;;;;;;-1:-1:-1;381:26:9;;;;-1:-1:-1;;;381:26:9;;;;;;1292:112;;;;;;;;;;;;;:::i;5149:147:0:-;;;;;;;;;;-1:-1:-1;5149:147:0;;;;;:::i;:::-;;:::i;781:150:9:-;;;;;;;;;;-1:-1:-1;781:150:9;;;;;:::i;:::-;;:::i;2606:202:0:-;2691:4;-1:-1:-1;;;;;;2714:47:0;;-1:-1:-1;;;2714:47:0;;:87;;-1:-1:-1;;;;;;;;;;937:40:7;;;2765:36:0;2707:94;2606:202;-1:-1:-1;;2606:202:0:o;939:144:9:-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;1051:14:9::1;:24:::0;;;::::1;;-1:-1:-1::0;;;1051:24:9::1;-1:-1:-1::0;;;;1051:24:9;;::::1;::::0;;;::::1;::::0;;939:144::o;4770:145:0:-;4465:7;4491:12;;;;;;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;4883:25:::1;4894:4;4900:7;4883:10;:25::i;:::-;4770:145:::0;;;:::o;5787:214::-;-1:-1:-1;;;;;5882:23:0;;719:10:5;5882:23:0;5874:83;;;;-1:-1:-1;;;5874:83:0;;2492:2:10;5874:83:0;;;2474:21:10;2531:2;2511:18;;;2504:30;2570:34;2550:18;;;2543:62;-1:-1:-1;;;2621:18:10;;;2614:45;2676:19;;5874:83:0;;;;;;;;;5968:26;5980:4;5986:7;5968:11;:26::i;:::-;5787:214;;:::o;606:167:9:-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;737:16:9::1;:28:::0;;-1:-1:-1;;;;;;737:28:9::1;-1:-1:-1::0;;;;;737:28:9;;;::::1;::::0;;;::::1;::::0;;606:167::o;1091:193::-;1744:1:2;2325:7;;:19;2317:63;;;;-1:-1:-1;;;2317:63:2;;2908:2:10;2317:63:2;;;2890:21:10;2947:2;2927:18;;;2920:30;2986:33;2966:18;;;2959:61;3037:18;;2317:63:2;2706:355:10;2317:63:2;1744:1;2455:7;:18;;;1163:15:9;;-1:-1:-1;;;1163:15:9;::::1;;;:23;;;1155:63;;;::::0;-1:-1:-1;;;1155:63:9;;3268:2:10;1155:63:9::1;::::0;::::1;3250:21:10::0;3307:2;3287:18;;;3280:30;3346:29;3326:18;;;3319:57;3393:18;;1155:63:9::1;3066:351:10::0;1155:63:9::1;1256:4;1237:16;:14;:16::i;:::-;:23;1229:47;;;::::0;-1:-1:-1;;;1229:47:9;;3624:2:10;1229:47:9::1;::::0;::::1;3606:21:10::0;3663:2;3643:18;;;3636:30;-1:-1:-1;;;3682:18:10;;;3675:41;3733:18;;1229:47:9::1;3422:335:10::0;1229:47:9::1;1701:1:2::0;2628:22;;1091:193:9:o;2895:145:0:-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;;;;2895:145::o;1292:112:9:-;1366:16;;:30;;;-1:-1:-1;;;1366:30:9;;;;1339:7;;-1:-1:-1;;;;;1366:16:9;;:28;;:30;;;;;;;;;;;;;;:16;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1359:37;;1292:112;:::o;5149:147:0:-;4465:7;4491:12;;;;;;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;5263:26:::1;5275:4;5281:7;5263:11;:26::i;781:150:9:-:0;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;898:15:9::1;:25:::0;;;::::1;;-1:-1:-1::0;;;898:25:9::1;-1:-1:-1::0;;;;898:25:9;;::::1;::::0;;;::::1;::::0;;781:150::o;1588:441:6:-;1663:13;1688:19;1720:10;1724:6;1720:1;:10;:::i;:::-;:14;;1733:1;1720:14;:::i;:::-;1710:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1710:25:6;;1688:47;;-1:-1:-1;;;1745:6:6;1752:1;1745:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1745:15:6;;;;;;;;;-1:-1:-1;;;1770:6:6;1777:1;1770:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1770:15:6;;;;;;;;-1:-1:-1;1800:9:6;1812:10;1816:6;1812:1;:10;:::i;:::-;:14;;1825:1;1812:14;:::i;:::-;1800:26;;1795:132;1832:1;1828;:5;1795:132;;;-1:-1:-1;;;1879:5:6;1887:3;1879:11;1866:25;;;;;;;:::i;:::-;;;;1854:6;1861:1;1854:9;;;;;;;;:::i;:::-;;;;:37;-1:-1:-1;;;;;1854:37:6;;;;;;;;-1:-1:-1;1915:1:6;1905:11;;;;;1835:3;;;:::i;:::-;;;1795:132;;;-1:-1:-1;1944:10:6;;1936:55;;;;-1:-1:-1;;;1936:55:6;;4996:2:10;1936:55:6;;;4978:21:10;;;5015:18;;;5008:30;5074:34;5054:18;;;5047:62;5126:18;;1936:55:6;4794:356:10;1936:55:6;2015:6;1588:441;-1:-1:-1;;;1588:441:6:o;3334:103:0:-;3400:30;3411:4;719:10:5;3400::0;:30::i;:::-;3334:103;:::o;7244:233::-;7327:22;7335:4;7341:7;7327;:22::i;:::-;7322:149;;7365:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7365:29:0;;;;;;;;;:36;;-1:-1:-1;;7365:36:0;7397:4;7365:36;;;7447:12;719:10:5;;640:96;7447:12:0;-1:-1:-1;;;;;7420:40:0;7438:7;-1:-1:-1;;;;;7420:40:0;7432:4;7420:40;;;;;;;;;;7244:233;;:::o;7602:234::-;7685:22;7693:4;7699:7;7685;:22::i;:::-;7681:149;;;7755:5;7723:12;;;;;;;;;;;-1:-1:-1;;;;;7723:29:0;;;;;;;;;;:37;;-1:-1:-1;;7723:37:0;;;7779:40;719:10:5;;7723:12:0;;7779:40;;7755:5;7779:40;7602:234;;:::o;3718:492::-;3806:22;3814:4;3820:7;3806;:22::i;:::-;3801:403;;3989:41;4017:7;-1:-1:-1;;;;;3989:41:0;4027:2;3989:19;:41::i;:::-;4101:38;4129:4;4136:2;4101:19;:38::i;:::-;3896:265;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3896:265:0;;;;;;;;;;-1:-1:-1;;;3844:349:0;;;;;;;:::i;14:286:10:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:10;;209:43;;199:71;;266:1;263;256:12;497:180;556:6;609:2;597:9;588:7;584:23;580:32;577:52;;;625:1;622;615:12;577:52;-1:-1:-1;648:23:10;;497:180;-1:-1:-1;497:180:10:o;1097:273::-;1153:6;1206:2;1194:9;1185:7;1181:23;1177:32;1174:52;;;1222:1;1219;1212:12;1174:52;1261:9;1248:23;1314:5;1307:13;1300:21;1293:5;1290:32;1280:60;;1336:1;1333;1326:12;1375:131;-1:-1:-1;;;;;1450:31:10;;1440:42;;1430:70;;1496:1;1493;1486:12;1511:315;1579:6;1587;1640:2;1628:9;1619:7;1615:23;1611:32;1608:52;;;1656:1;1653;1646:12;1608:52;1692:9;1679:23;1669:33;;1752:2;1741:9;1737:18;1724:32;1765:31;1790:5;1765:31;:::i;:::-;1815:5;1805:15;;;1511:315;;;;;:::o;1831:272::-;1915:6;1968:2;1956:9;1947:7;1943:23;1939:32;1936:52;;;1984:1;1981;1974:12;1936:52;2023:9;2010:23;2042:31;2067:5;2042:31;:::i;3762:184::-;3832:6;3885:2;3873:9;3864:7;3860:23;3856:32;3853:52;;;3901:1;3898;3891:12;3853:52;-1:-1:-1;3924:16:10;;3762:184;-1:-1:-1;3762:184:10:o;3951:127::-;4012:10;4007:3;4003:20;4000:1;3993:31;4043:4;4040:1;4033:15;4067:4;4064:1;4057:15;4083:168;4123:7;4189:1;4185;4181:6;4177:14;4174:1;4171:21;4166:1;4159:9;4152:17;4148:45;4145:71;;;4196:18;;:::i;:::-;-1:-1:-1;4236:9:10;;4083:168::o;4256:128::-;4296:3;4327:1;4323:6;4320:1;4317:13;4314:39;;;4333:18;;:::i;:::-;-1:-1:-1;4369:9:10;;4256:128::o;4389:127::-;4450:10;4445:3;4441:20;4438:1;4431:31;4481:4;4478:1;4471:15;4505:4;4502:1;4495:15;4521:127;4582:10;4577:3;4573:20;4570:1;4563:31;4613:4;4610:1;4603:15;4637:4;4634:1;4627:15;4653:136;4692:3;4720:5;4710:39;;4729:18;;:::i;:::-;-1:-1:-1;;;4765:18:10;;4653:136::o;5155:258::-;5227:1;5237:113;5251:6;5248:1;5245:13;5237:113;;;5327:11;;;5321:18;5308:11;;;5301:39;5273:2;5266:10;5237:113;;;5368:6;5365:1;5362:13;5359:48;;;5403:1;5394:6;5389:3;5385:16;5378:27;5359:48;;5155:258;;;:::o;5418:786::-;5829:25;5824:3;5817:38;5799:3;5884:6;5878:13;5900:62;5955:6;5950:2;5945:3;5941:12;5934:4;5926:6;5922:17;5900:62;:::i;:::-;-1:-1:-1;;;6021:2:10;5981:16;;;6013:11;;;6006:40;6071:13;;6093:63;6071:13;6142:2;6134:11;;6127:4;6115:17;;6093:63;:::i;:::-;6176:17;6195:2;6172:26;;5418:786;-1:-1:-1;;;;5418:786:10:o;6209:383::-;6358:2;6347:9;6340:21;6321:4;6390:6;6384:13;6433:6;6428:2;6417:9;6413:18;6406:34;6449:66;6508:6;6503:2;6492:9;6488:18;6483:2;6475:6;6471:15;6449:66;:::i;:::-;6576:2;6555:15;-1:-1:-1;;6551:29:10;6536:45;;;;6583:2;6532:54;;6209:383;-1:-1:-1;;6209:383:10:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "592000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DEFAULT_ADMIN_ROLE()": "284",
								"changeFreeMintOpen(bool)": "infinite",
								"changeNagaKidsContract(address)": "infinite",
								"changeWhitelistMintOpen(bool)": "infinite",
								"getRoleAdmin(bytes32)": "2493",
								"getTotalSupply()": "infinite",
								"grantRole(bytes32,address)": "infinite",
								"hasRole(bytes32,address)": "2695",
								"isFreeMintOpen()": "2338",
								"isWhitelistOpen()": "2383",
								"nagaKidsContract()": "2405",
								"renounceRole(bytes32,address)": "29061",
								"revokeRole(bytes32,address)": "infinite",
								"supportsInterface(bytes4)": "450",
								"whitelistMint()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 268,
									"end": 1532,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 268,
									"end": 1532,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 268,
									"end": 1532,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 452,
									"end": 598,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 452,
									"end": 598,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 452,
									"end": 598,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 452,
									"end": 598,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "CODESIZE",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 452,
									"end": 598,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 452,
									"end": 598,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 452,
									"end": 598,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "tag",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 452,
									"end": 598,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 504,
									"end": 546,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 2072,
									"end": 2076,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 535,
									"end": 545,
									"name": "CALLER",
									"source": 9
								},
								{
									"begin": 504,
									"end": 514,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "9"
								},
								{
									"begin": 504,
									"end": 546,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 504,
									"end": 546,
									"name": "tag",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 504,
									"end": 546,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 557,
									"end": 590,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "10"
								},
								{
									"begin": 580,
									"end": 589,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 557,
									"end": 579,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 557,
									"end": 590,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 557,
									"end": 590,
									"name": "tag",
									"source": 9,
									"value": "10"
								},
								{
									"begin": 557,
									"end": 590,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 452,
									"end": 598,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 268,
									"end": 1532,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "69"
								},
								{
									"begin": 268,
									"end": 1532,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 7244,
									"end": 7477,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 7244,
									"end": 7477,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2981,
									"end": 2985,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 7322,
									"end": 7471,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 7322,
									"end": 7471,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7371,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 7397,
									"end": 7401,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 7447,
									"end": 7459,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 719,
									"end": 729,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 7447,
									"end": 7459,
									"name": "tag",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 7447,
									"end": 7459,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 7438,
									"end": 7445,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 7432,
									"end": 7436,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "PUSH",
									"source": 0,
									"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "LOG4",
									"source": 0
								},
								{
									"begin": 7322,
									"end": 7471,
									"name": "tag",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 7322,
									"end": 7471,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 7244,
									"end": 7477,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 7244,
									"end": 7477,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 7244,
									"end": 7477,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 606,
									"end": 773,
									"name": "tag",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 606,
									"end": 773,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2072,
									"end": 2076,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2505,
									"end": 2521,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2072,
									"end": 2076,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2505,
									"end": 2515,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "21"
								},
								{
									"begin": 2505,
									"end": 2521,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 2505,
									"end": 2521,
									"name": "tag",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2505,
									"end": 2521,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 737,
									"end": 753,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 737,
									"end": 765,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 737,
									"end": 765,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 737,
									"end": 765,
									"modifierDepth": 1,
									"name": "AND",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 737,
									"end": 765,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 737,
									"end": 765,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 737,
									"end": 765,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 737,
									"end": 765,
									"modifierDepth": 1,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 737,
									"end": 765,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 737,
									"end": 765,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 737,
									"end": 765,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 737,
									"end": 765,
									"modifierDepth": 1,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 737,
									"end": 765,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 737,
									"end": 765,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 606,
									"end": 773,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3334,
									"end": 3437,
									"name": "tag",
									"source": 0,
									"value": "21"
								},
								{
									"begin": 3334,
									"end": 3437,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3400,
									"end": 3430,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "26"
								},
								{
									"begin": 3411,
									"end": 3415,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 3400,
									"end": 3410,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "28"
								},
								{
									"begin": 3400,
									"end": 3430,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3400,
									"end": 3430,
									"name": "tag",
									"source": 0,
									"value": "26"
								},
								{
									"begin": 3400,
									"end": 3430,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3334,
									"end": 3437,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3334,
									"end": 3437,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3718,
									"end": 4210,
									"name": "tag",
									"source": 0,
									"value": "28"
								},
								{
									"begin": 3718,
									"end": 4210,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2981,
									"end": 2985,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3801,
									"end": 4204,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 3801,
									"end": 4204,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 3989,
									"end": 4030,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "32"
								},
								{
									"begin": 4017,
									"end": 4024,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3989,
									"end": 4030,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 4027,
									"end": 4029,
									"name": "PUSH",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 3989,
									"end": 4008,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "33"
								},
								{
									"begin": 3989,
									"end": 4008,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 3989,
									"end": 4008,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 3989,
									"end": 4008,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18446744073709551706"
								},
								{
									"begin": 3989,
									"end": 4008,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3989,
									"end": 4030,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 3989,
									"end": 4030,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 3989,
									"end": 4030,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3989,
									"end": 4030,
									"name": "tag",
									"source": 0,
									"value": "32"
								},
								{
									"begin": 3989,
									"end": 4030,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4139,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "34"
								},
								{
									"begin": 4129,
									"end": 4133,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 4136,
									"end": 4138,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 4101,
									"end": 4120,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18446744073709551706"
								},
								{
									"begin": 4101,
									"end": 4120,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "33"
								},
								{
									"begin": 4101,
									"end": 4120,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4120,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4120,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4139,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4139,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4139,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4139,
									"name": "tag",
									"source": 0,
									"value": "34"
								},
								{
									"begin": 4101,
									"end": 4139,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "35"
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "36"
								},
								{
									"begin": 3896,
									"end": 4161,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "tag",
									"source": 0,
									"value": "35"
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "37"
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "38"
								},
								{
									"begin": 3844,
									"end": 4193,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "tag",
									"source": 0,
									"value": "37"
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1588,
									"end": 2029,
									"name": "tag",
									"source": 6,
									"value": "33"
								},
								{
									"begin": 1588,
									"end": 2029,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1663,
									"end": 1676,
									"name": "PUSH",
									"source": 6,
									"value": "60"
								},
								{
									"begin": 1688,
									"end": 1707,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1720,
									"end": 1730,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1724,
									"end": 1730,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1720,
									"end": 1721,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1720,
									"end": 1730,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "41"
								},
								{
									"begin": 1720,
									"end": 1730,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1720,
									"end": 1730,
									"name": "tag",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1720,
									"end": 1730,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1720,
									"end": 1734,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "42"
								},
								{
									"begin": 1720,
									"end": 1734,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1733,
									"end": 1734,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1720,
									"end": 1734,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "43"
								},
								{
									"begin": 1720,
									"end": 1734,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1720,
									"end": 1734,
									"name": "tag",
									"source": 6,
									"value": "42"
								},
								{
									"begin": 1720,
									"end": 1734,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "GT",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "45"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "45"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "46"
								},
								{
									"begin": 1710,
									"end": 1735,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "tag",
									"source": 6,
									"value": "45"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH",
									"source": 6,
									"value": "1F"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH",
									"source": 6,
									"value": "1F"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "NOT",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "47"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "CALLDATASIZE",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "CALLDATACOPY",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "tag",
									"source": 6,
									"value": "47"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1688,
									"end": 1735,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1688,
									"end": 1735,
									"name": "POP",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FC"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1745,
									"end": 1751,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1752,
									"end": 1753,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "LT",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "49"
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "49"
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "50"
								},
								{
									"begin": 1745,
									"end": 1754,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "tag",
									"source": 6,
									"value": "49"
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "NOT",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "POP",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FB"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1770,
									"end": 1776,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1777,
									"end": 1778,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "LT",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "52"
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "52"
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "50"
								},
								{
									"begin": 1770,
									"end": 1779,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "tag",
									"source": 6,
									"value": "52"
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "NOT",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1800,
									"end": 1809,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1812,
									"end": 1822,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "56"
								},
								{
									"begin": 1816,
									"end": 1822,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 1812,
									"end": 1813,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1812,
									"end": 1822,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "41"
								},
								{
									"begin": 1812,
									"end": 1822,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1812,
									"end": 1822,
									"name": "tag",
									"source": 6,
									"value": "56"
								},
								{
									"begin": 1812,
									"end": 1822,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1812,
									"end": 1826,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "57"
								},
								{
									"begin": 1812,
									"end": 1826,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1825,
									"end": 1826,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1812,
									"end": 1826,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "43"
								},
								{
									"begin": 1812,
									"end": 1826,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1812,
									"end": 1826,
									"name": "tag",
									"source": 6,
									"value": "57"
								},
								{
									"begin": 1812,
									"end": 1826,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1800,
									"end": 1826,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1800,
									"end": 1826,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "tag",
									"source": 6,
									"value": "53"
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1832,
									"end": 1833,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1828,
									"end": 1829,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1828,
									"end": 1833,
									"name": "GT",
									"source": 6
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "54"
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "181899199A1A9B1B9C1CB0B131B232B3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "81"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1879,
									"end": 1884,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 1887,
									"end": 1890,
									"name": "PUSH",
									"source": 6,
									"value": "F"
								},
								{
									"begin": 1879,
									"end": 1890,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "PUSH",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "LT",
									"source": 6
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "59"
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "59"
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "50"
								},
								{
									"begin": 1866,
									"end": 1891,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "tag",
									"source": 6,
									"value": "59"
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "PUSH",
									"source": 6,
									"value": "F8"
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "SHL",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1860,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1861,
									"end": 1862,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "LT",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "61"
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "61"
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "50"
								},
								{
									"begin": 1854,
									"end": 1863,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "tag",
									"source": 6,
									"value": "61"
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "NOT",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1915,
									"end": 1916,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1905,
									"end": 1916,
									"name": "SWAP5",
									"source": 6
								},
								{
									"begin": 1905,
									"end": 1916,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1905,
									"end": 1916,
									"name": "SWAP5",
									"source": 6
								},
								{
									"begin": 1905,
									"end": 1916,
									"name": "SHR",
									"source": 6
								},
								{
									"begin": 1905,
									"end": 1916,
									"name": "SWAP4",
									"source": 6
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "62"
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "63"
								},
								{
									"begin": 1835,
									"end": 1838,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "tag",
									"source": 6,
									"value": "62"
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "53"
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "tag",
									"source": 6,
									"value": "54"
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1944,
									"end": 1954,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1944,
									"end": 1954,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "64"
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 2821,
									"end": 2823,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 2803,
									"end": 2824,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2803,
									"end": 2824,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2803,
									"end": 2824,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2840,
									"end": 2858,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 2840,
									"end": 2858,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2840,
									"end": 2858,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2833,
									"end": 2863,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2899,
									"end": 2933,
									"name": "PUSH",
									"source": 10,
									"value": "537472696E67733A20686578206C656E67746820696E73756666696369656E74"
								},
								{
									"begin": 2879,
									"end": 2897,
									"name": "PUSH",
									"source": 10,
									"value": "44"
								},
								{
									"begin": 2879,
									"end": 2897,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2879,
									"end": 2897,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2872,
									"end": 2934,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2951,
									"end": 2969,
									"name": "PUSH",
									"source": 10,
									"value": "64"
								},
								{
									"begin": 2951,
									"end": 2969,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "37"
								},
								{
									"begin": 2619,
									"end": 2975,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "tag",
									"source": 6,
									"value": "64"
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2015,
									"end": 2021,
									"name": "SWAP4",
									"source": 6
								},
								{
									"begin": 1588,
									"end": 2029,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1588,
									"end": 2029,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 14,
									"end": 329,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 329,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 109,
									"end": 115,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 162,
									"end": 164,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 150,
									"end": 159,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 141,
									"end": 148,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 137,
									"end": 160,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 133,
									"end": 165,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 130,
									"end": 182,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 130,
									"end": 182,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "71"
								},
								{
									"begin": 130,
									"end": 182,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 178,
									"end": 179,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 175,
									"end": 176,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 168,
									"end": 180,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 130,
									"end": 182,
									"name": "tag",
									"source": 10,
									"value": "71"
								},
								{
									"begin": 130,
									"end": 182,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 204,
									"end": 220,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 204,
									"end": 220,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 249,
									"end": 280,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 249,
									"end": 280,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 239,
									"end": 281,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 239,
									"end": 281,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 229,
									"end": 299,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "64"
								},
								{
									"begin": 229,
									"end": 299,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 295,
									"end": 296,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 292,
									"end": 293,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 285,
									"end": 297,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 334,
									"end": 592,
									"name": "tag",
									"source": 10,
									"value": "67"
								},
								{
									"begin": 334,
									"end": 592,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 406,
									"end": 407,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 416,
									"end": 529,
									"name": "tag",
									"source": 10,
									"value": "74"
								},
								{
									"begin": 416,
									"end": 529,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 430,
									"end": 436,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 427,
									"end": 428,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 424,
									"end": 437,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 416,
									"end": 529,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 416,
									"end": 529,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "76"
								},
								{
									"begin": 416,
									"end": 529,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 506,
									"end": 517,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 506,
									"end": 517,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 506,
									"end": 517,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 500,
									"end": 518,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 487,
									"end": 498,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 487,
									"end": 498,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 487,
									"end": 498,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 480,
									"end": 519,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 452,
									"end": 454,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 445,
									"end": 455,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 416,
									"end": 529,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "74"
								},
								{
									"begin": 416,
									"end": 529,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 416,
									"end": 529,
									"name": "tag",
									"source": 10,
									"value": "76"
								},
								{
									"begin": 416,
									"end": 529,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 547,
									"end": 553,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 544,
									"end": 545,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 541,
									"end": 554,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 538,
									"end": 586,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 538,
									"end": 586,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "77"
								},
								{
									"begin": 538,
									"end": 586,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 582,
									"end": 583,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 573,
									"end": 579,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 568,
									"end": 571,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 564,
									"end": 580,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 557,
									"end": 584,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 538,
									"end": 586,
									"name": "tag",
									"source": 10,
									"value": "77"
								},
								{
									"begin": 538,
									"end": 586,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 538,
									"end": 586,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 334,
									"end": 592,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 334,
									"end": 592,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 334,
									"end": 592,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 334,
									"end": 592,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 597,
									"end": 1383,
									"name": "tag",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 597,
									"end": 1383,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1008,
									"end": 1033,
									"name": "PUSH",
									"source": 10,
									"value": "416363657373436F6E74726F6C3A206163636F756E7420000000000000000000"
								},
								{
									"begin": 1003,
									"end": 1006,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 996,
									"end": 1034,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 978,
									"end": 981,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1063,
									"end": 1069,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1057,
									"end": 1070,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1079,
									"end": 1141,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "79"
								},
								{
									"begin": 1134,
									"end": 1140,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1129,
									"end": 1131,
									"name": "PUSH",
									"source": 10,
									"value": "17"
								},
								{
									"begin": 1124,
									"end": 1127,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1120,
									"end": 1132,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1113,
									"end": 1117,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1105,
									"end": 1111,
									"name": "DUP9",
									"source": 10
								},
								{
									"begin": 1101,
									"end": 1118,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1079,
									"end": 1141,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "67"
								},
								{
									"begin": 1079,
									"end": 1141,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1079,
									"end": 1141,
									"name": "tag",
									"source": 10,
									"value": "79"
								},
								{
									"begin": 1079,
									"end": 1141,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1034B99036B4B9B9B4B733903937B6329"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "7D"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1200,
									"end": 1202,
									"name": "PUSH",
									"source": 10,
									"value": "17"
								},
								{
									"begin": 1160,
									"end": 1176,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1160,
									"end": 1176,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1160,
									"end": 1176,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1192,
									"end": 1203,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1192,
									"end": 1203,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1192,
									"end": 1203,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1185,
									"end": 1225,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1250,
									"end": 1263,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1250,
									"end": 1263,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1272,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 1250,
									"end": 1263,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1321,
									"end": 1323,
									"name": "PUSH",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 1313,
									"end": 1324,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1313,
									"end": 1324,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1306,
									"end": 1310,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1294,
									"end": 1311,
									"name": "DUP9",
									"source": 10
								},
								{
									"begin": 1294,
									"end": 1311,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1272,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "67"
								},
								{
									"begin": 1272,
									"end": 1335,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1272,
									"end": 1335,
									"name": "tag",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 1272,
									"end": 1335,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1355,
									"end": 1372,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1374,
									"end": 1376,
									"name": "PUSH",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 1351,
									"end": 1377,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1351,
									"end": 1377,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 597,
									"end": 1383,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 597,
									"end": 1383,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1388,
									"end": 1771,
									"name": "tag",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 1388,
									"end": 1771,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1537,
									"end": 1539,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1526,
									"end": 1535,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1519,
									"end": 1540,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1500,
									"end": 1504,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1569,
									"end": 1575,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1563,
									"end": 1576,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1612,
									"end": 1618,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1607,
									"end": 1609,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1596,
									"end": 1605,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1592,
									"end": 1610,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1585,
									"end": 1619,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1628,
									"end": 1694,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "82"
								},
								{
									"begin": 1687,
									"end": 1693,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1682,
									"end": 1684,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1671,
									"end": 1680,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1667,
									"end": 1685,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1662,
									"end": 1664,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1654,
									"end": 1660,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": 1650,
									"end": 1665,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1628,
									"end": 1694,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "67"
								},
								{
									"begin": 1628,
									"end": 1694,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1628,
									"end": 1694,
									"name": "tag",
									"source": 10,
									"value": "82"
								},
								{
									"begin": 1628,
									"end": 1694,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1755,
									"end": 1757,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 1734,
									"end": 1749,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1730,
									"end": 1759,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1715,
									"end": 1760,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1715,
									"end": 1760,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1715,
									"end": 1760,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1715,
									"end": 1760,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1762,
									"end": 1764,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1711,
									"end": 1765,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1711,
									"end": 1765,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1388,
									"end": 1771,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1388,
									"end": 1771,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1776,
									"end": 1903,
									"name": "tag",
									"source": 10,
									"value": "68"
								},
								{
									"begin": 1776,
									"end": 1903,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1837,
									"end": 1847,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 1832,
									"end": 1835,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 1828,
									"end": 1848,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 1825,
									"end": 1826,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1818,
									"end": 1849,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1868,
									"end": 1872,
									"name": "PUSH",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 1865,
									"end": 1866,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1858,
									"end": 1873,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1892,
									"end": 1896,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 1889,
									"end": 1890,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1882,
									"end": 1897,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1908,
									"end": 2076,
									"name": "tag",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 1908,
									"end": 2076,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1948,
									"end": 1955,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2014,
									"end": 2015,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2010,
									"end": 2011,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2006,
									"end": 2012,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 2002,
									"end": 2016,
									"name": "DIV",
									"source": 10
								},
								{
									"begin": 1999,
									"end": 2000,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1996,
									"end": 2017,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1991,
									"end": 1992,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1984,
									"end": 1993,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1977,
									"end": 1994,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1973,
									"end": 2018,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1970,
									"end": 2041,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1970,
									"end": 2041,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "86"
								},
								{
									"begin": 1970,
									"end": 2041,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2021,
									"end": 2039,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "86"
								},
								{
									"begin": 2021,
									"end": 2039,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "68"
								},
								{
									"begin": 2021,
									"end": 2039,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2021,
									"end": 2039,
									"name": "tag",
									"source": 10,
									"value": "86"
								},
								{
									"begin": 2021,
									"end": 2039,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2061,
									"end": 2070,
									"name": "MUL",
									"source": 10
								},
								{
									"begin": 2061,
									"end": 2070,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1908,
									"end": 2076,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2081,
									"end": 2209,
									"name": "tag",
									"source": 10,
									"value": "43"
								},
								{
									"begin": 2081,
									"end": 2209,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2121,
									"end": 2124,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2152,
									"end": 2153,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2148,
									"end": 2154,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 2145,
									"end": 2146,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2142,
									"end": 2155,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 2139,
									"end": 2178,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 2139,
									"end": 2178,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "89"
								},
								{
									"begin": 2139,
									"end": 2178,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2158,
									"end": 2176,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "89"
								},
								{
									"begin": 2158,
									"end": 2176,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "68"
								},
								{
									"begin": 2158,
									"end": 2176,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2158,
									"end": 2176,
									"name": "tag",
									"source": 10,
									"value": "89"
								},
								{
									"begin": 2158,
									"end": 2176,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2194,
									"end": 2203,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2194,
									"end": 2203,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2081,
									"end": 2209,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2214,
									"end": 2341,
									"name": "tag",
									"source": 10,
									"value": "46"
								},
								{
									"begin": 2214,
									"end": 2341,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2275,
									"end": 2285,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 2270,
									"end": 2273,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 2266,
									"end": 2286,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 2263,
									"end": 2264,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2256,
									"end": 2287,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2306,
									"end": 2310,
									"name": "PUSH",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 2303,
									"end": 2304,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 2296,
									"end": 2311,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2330,
									"end": 2334,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 2327,
									"end": 2328,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2320,
									"end": 2335,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 2346,
									"end": 2473,
									"name": "tag",
									"source": 10,
									"value": "50"
								},
								{
									"begin": 2346,
									"end": 2473,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2407,
									"end": 2417,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 2402,
									"end": 2405,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 2398,
									"end": 2418,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 2395,
									"end": 2396,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2388,
									"end": 2419,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2438,
									"end": 2442,
									"name": "PUSH",
									"source": 10,
									"value": "32"
								},
								{
									"begin": 2435,
									"end": 2436,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 2428,
									"end": 2443,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2462,
									"end": 2466,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 2459,
									"end": 2460,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2452,
									"end": 2467,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 2478,
									"end": 2614,
									"name": "tag",
									"source": 10,
									"value": "63"
								},
								{
									"begin": 2478,
									"end": 2614,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2517,
									"end": 2520,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2545,
									"end": 2550,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2535,
									"end": 2574,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "94"
								},
								{
									"begin": 2535,
									"end": 2574,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2554,
									"end": 2572,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "94"
								},
								{
									"begin": 2554,
									"end": 2572,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "68"
								},
								{
									"begin": 2554,
									"end": 2572,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2554,
									"end": 2572,
									"name": "tag",
									"source": 10,
									"value": "94"
								},
								{
									"begin": 2554,
									"end": 2572,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2590,
									"end": 2608,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2590,
									"end": 2608,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2478,
									"end": 2614,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2619,
									"end": 2975,
									"name": "tag",
									"source": 10,
									"value": "69"
								},
								{
									"begin": 2619,
									"end": 2975,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 268,
									"end": 1532,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 268,
									"end": 1532,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 268,
									"end": 1532,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 268,
									"end": 1532,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 1532,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 268,
									"end": 1532,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 1532,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d8f8d8df17d2332ffbf52b8176f1e13cc921f2ab291c3d7c9a84a28789ea024a64736f6c634300080f0033",
									".code": [
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "804F43CD"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "A6F5F014"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "A6F5F014"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "C4E41B22"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "D547741F"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "DD31A7BA"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "804F43CD"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "91D14854"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "94F4504D"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "A217FDDF"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "tag",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "28438F68"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "28438F68"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "2F2FF15D"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "36568ABE"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "61AEC205"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "1FFC9A7"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "248A9CA3"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "27C25C20"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 268,
											"end": 1532,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2606,
											"end": 2808,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2606,
											"end": 2808,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 470,
											"end": 484,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 470,
											"end": 484,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 463,
											"end": 485,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 445,
											"end": 486,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 445,
											"end": 486,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 433,
											"end": 435,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 418,
											"end": 436,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 4391,
											"end": 4520,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 828,
											"end": 853,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 828,
											"end": 853,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 828,
											"end": 853,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 816,
											"end": 818,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 801,
											"end": 819,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 682,
											"end": 859,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 333,
											"end": 374,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 333,
											"end": 374,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 333,
											"end": 374,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 333,
											"end": 374,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 333,
											"end": 374,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 333,
											"end": 374,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 333,
											"end": 374,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 333,
											"end": 374,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 333,
											"end": 374,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 333,
											"end": 374,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 333,
											"end": 374,
											"name": "tag",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 333,
											"end": 374,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 333,
											"end": 374,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 333,
											"end": 374,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 333,
											"end": 374,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 333,
											"end": 374,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 333,
											"end": 374,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 333,
											"end": 374,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 333,
											"end": 374,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 333,
											"end": 374,
											"name": "tag",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 333,
											"end": 374,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 333,
											"end": 374,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 333,
											"end": 374,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1053,
											"end": 1085,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1085,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1085,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1035,
											"end": 1086,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1035,
											"end": 1086,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1023,
											"end": 1025,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1008,
											"end": 1026,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 333,
											"end": 374,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 864,
											"end": 1092,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "tag",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 939,
											"end": 1083,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "tag",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 939,
											"end": 1083,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "tag",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 4770,
											"end": 4915,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 4770,
											"end": 4915,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 5787,
											"end": 6001,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 5787,
											"end": 6001,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 606,
											"end": 773,
											"name": "tag",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 606,
											"end": 773,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 606,
											"end": 773,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 606,
											"end": 773,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 606,
											"end": 773,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 606,
											"end": 773,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 606,
											"end": 773,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 606,
											"end": 773,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 606,
											"end": 773,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 606,
											"end": 773,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 606,
											"end": 773,
											"name": "tag",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 606,
											"end": 773,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 606,
											"end": 773,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 606,
											"end": 773,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 606,
											"end": 773,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 606,
											"end": 773,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 606,
											"end": 773,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 606,
											"end": 773,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 606,
											"end": 773,
											"name": "tag",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 606,
											"end": 773,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 606,
											"end": 773,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 606,
											"end": 773,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1091,
											"end": 1284,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 1091,
											"end": 1284,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1091,
											"end": 1284,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1091,
											"end": 1284,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 1091,
											"end": 1284,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2895,
											"end": 3040,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2895,
											"end": 3040,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 414,
											"end": 441,
											"name": "tag",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 414,
											"end": 441,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 414,
											"end": 441,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 414,
											"end": 441,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 414,
											"end": 441,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 414,
											"end": 441,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 414,
											"end": 441,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 414,
											"end": 441,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 414,
											"end": 441,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 414,
											"end": 441,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 414,
											"end": 441,
											"name": "tag",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 414,
											"end": 441,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 414,
											"end": 441,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 414,
											"end": 441,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 414,
											"end": 441,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 414,
											"end": 441,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 414,
											"end": 441,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 414,
											"end": 441,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 414,
											"end": 441,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 414,
											"end": 441,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 414,
											"end": 441,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 414,
											"end": 441,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 381,
											"end": 407,
											"name": "tag",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 381,
											"end": 407,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 381,
											"end": 407,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 381,
											"end": 407,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 381,
											"end": 407,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 381,
											"end": 407,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 381,
											"end": 407,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 381,
											"end": 407,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 381,
											"end": 407,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 381,
											"end": 407,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 381,
											"end": 407,
											"name": "tag",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 381,
											"end": 407,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 381,
											"end": 407,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 381,
											"end": 407,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 381,
											"end": 407,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 381,
											"end": 407,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 381,
											"end": 407,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 381,
											"end": 407,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 381,
											"end": 407,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 381,
											"end": 407,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 381,
											"end": 407,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 381,
											"end": 407,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "tag",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 1292,
											"end": 1404,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 5149,
											"end": 5296,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 5149,
											"end": 5296,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 781,
											"end": 931,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 781,
											"end": 931,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 781,
											"end": 931,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 781,
											"end": 931,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 781,
											"end": 931,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 781,
											"end": 931,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 781,
											"end": 931,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 781,
											"end": 931,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 781,
											"end": 931,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 781,
											"end": 931,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 781,
											"end": 931,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 781,
											"end": 931,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 781,
											"end": 931,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 781,
											"end": 931,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 781,
											"end": 931,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 781,
											"end": 931,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 781,
											"end": 931,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 781,
											"end": 931,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 781,
											"end": 931,
											"name": "tag",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 781,
											"end": 931,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 781,
											"end": 931,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 781,
											"end": 931,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2691,
											"end": 2695,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7965DB0B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2714,
											"end": 2801,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 937,
											"end": 977,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2765,
											"end": 2801,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2765,
											"end": 2801,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2707,
											"end": 2801,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2606,
											"end": 2808,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "tag",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 939,
											"end": 1083,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 2505,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1051,
											"end": 1065,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1051,
											"end": 1075,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1051,
											"end": 1075,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1051,
											"end": 1075,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1051,
											"end": 1075,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1051,
											"end": 1075,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1051,
											"end": 1075,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1051,
											"end": 1075,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1051,
											"end": 1075,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1051,
											"end": 1075,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1051,
											"end": 1075,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1051,
											"end": 1075,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1051,
											"end": 1075,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1051,
											"end": 1075,
											"modifierDepth": 1,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 1051,
											"end": 1075,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1051,
											"end": 1075,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 939,
											"end": 1083,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 2505,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4883,
											"end": 4908,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 4894,
											"end": 4898,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4900,
											"end": 4907,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4883,
											"end": 4893,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 4883,
											"end": 4908,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4883,
											"end": 4908,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 4883,
											"end": 4908,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5882,
											"end": 5905,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5882,
											"end": 5905,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 5882,
											"end": 5905,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2492,
											"end": 2494,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2474,
											"end": 2495,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2531,
											"end": 2533,
											"name": "PUSH",
											"source": 10,
											"value": "2F"
										},
										{
											"begin": 2511,
											"end": 2529,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2511,
											"end": 2529,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2511,
											"end": 2529,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2504,
											"end": 2534,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2570,
											"end": 2604,
											"name": "PUSH",
											"source": 10,
											"value": "416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365"
										},
										{
											"begin": 2550,
											"end": 2568,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 2550,
											"end": 2568,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2550,
											"end": 2568,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2543,
											"end": 2605,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "103937B632B9903337B91039B2B633"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2621,
											"end": 2639,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2621,
											"end": 2639,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2621,
											"end": 2639,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2614,
											"end": 2659,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2676,
											"end": 2695,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 2676,
											"end": 2695,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5968,
											"end": 5994,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 5980,
											"end": 5984,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5986,
											"end": 5993,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5968,
											"end": 5979,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 5968,
											"end": 5994,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5968,
											"end": 5994,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 5968,
											"end": 5994,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 606,
											"end": 773,
											"name": "tag",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 606,
											"end": 773,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 2505,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 737,
											"end": 753,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 737,
											"end": 765,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 737,
											"end": 765,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 737,
											"end": 765,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 737,
											"end": 765,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 737,
											"end": 765,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 737,
											"end": 765,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 737,
											"end": 765,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 737,
											"end": 765,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 737,
											"end": 765,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 737,
											"end": 765,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 737,
											"end": 765,
											"modifierDepth": 1,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 737,
											"end": 765,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 737,
											"end": 765,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 606,
											"end": 773,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1091,
											"end": 1284,
											"name": "tag",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 1091,
											"end": 1284,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2908,
											"end": 2910,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2890,
											"end": 2911,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2947,
											"end": 2949,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2927,
											"end": 2945,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2927,
											"end": 2945,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2927,
											"end": 2945,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2950,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2986,
											"end": 3019,
											"name": "PUSH",
											"source": 10,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2966,
											"end": 2984,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 2966,
											"end": 2984,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2966,
											"end": 2984,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2959,
											"end": 3020,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3037,
											"end": 3055,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3037,
											"end": 3055,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 2706,
											"end": 3061,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1163,
											"end": 1178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1163,
											"end": 1178,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1163,
											"end": 1178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1163,
											"end": 1178,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 1163,
											"end": 1178,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 1163,
											"end": 1178,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1163,
											"end": 1186,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1163,
											"end": 1186,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1163,
											"end": 1186,
											"modifierDepth": 1,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1155,
											"end": 1218,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 1155,
											"end": 1218,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1155,
											"end": 1218,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1155,
											"end": 1218,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1155,
											"end": 1218,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1155,
											"end": 1218,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3268,
											"end": 3270,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1155,
											"end": 1218,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1155,
											"end": 1218,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1155,
											"end": 1218,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3250,
											"end": 3271,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3307,
											"end": 3309,
											"name": "PUSH",
											"source": 10,
											"value": "1B"
										},
										{
											"begin": 3287,
											"end": 3305,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3287,
											"end": 3305,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3305,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3280,
											"end": 3310,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3346,
											"end": 3375,
											"name": "PUSH",
											"source": 10,
											"value": "57686974656C697374206E6F74206F70656E20746F206D696E742E0000000000"
										},
										{
											"begin": 3326,
											"end": 3344,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3326,
											"end": 3344,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3326,
											"end": 3344,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3319,
											"end": 3376,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3393,
											"end": 3411,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3393,
											"end": 3411,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1155,
											"end": 1218,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 3066,
											"end": 3417,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1155,
											"end": 1218,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 1155,
											"end": 1218,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1256,
											"end": 1260,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "457"
										},
										{
											"begin": 1237,
											"end": 1253,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 1237,
											"end": 1251,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 1237,
											"end": 1253,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1237,
											"end": 1253,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 1237,
											"end": 1253,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1237,
											"end": 1260,
											"modifierDepth": 1,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 1229,
											"end": 1276,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 1229,
											"end": 1276,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1229,
											"end": 1276,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1229,
											"end": 1276,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1229,
											"end": 1276,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1229,
											"end": 1276,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3624,
											"end": 3626,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1229,
											"end": 1276,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1229,
											"end": 1276,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1229,
											"end": 1276,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3606,
											"end": 3627,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3663,
											"end": 3665,
											"name": "PUSH",
											"source": 10,
											"value": "B"
										},
										{
											"begin": 3643,
											"end": 3661,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3643,
											"end": 3661,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3643,
											"end": 3661,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3636,
											"end": 3666,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4F76657220737570706C79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3682,
											"end": 3700,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3682,
											"end": 3700,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3682,
											"end": 3700,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3675,
											"end": 3716,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3733,
											"end": 3751,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3733,
											"end": 3751,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1229,
											"end": 1276,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 3422,
											"end": 3757,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1229,
											"end": 1276,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 1229,
											"end": 1276,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1091,
											"end": 1284,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2981,
											"end": 2985,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "tag",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1382,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1366,
											"end": 1382,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "18160DDD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1339,
											"end": 1346,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1339,
											"end": 1346,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1366,
											"end": 1382,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1382,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1394,
											"name": "PUSH",
											"source": 9,
											"value": "18160DDD"
										},
										{
											"begin": 1366,
											"end": 1394,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1382,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "STATICCALL",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "tag",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 1366,
											"end": 1396,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "tag",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 1366,
											"end": 1396,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1359,
											"end": 1396,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1359,
											"end": 1396,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1292,
											"end": 1404,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1292,
											"end": 1404,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 2505,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5263,
											"end": 5289,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 5275,
											"end": 5279,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5281,
											"end": 5288,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5263,
											"end": 5274,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 5263,
											"end": 5289,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 781,
											"end": 931,
											"name": "tag",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 781,
											"end": 931,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 2505,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 898,
											"end": 913,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 898,
											"end": 923,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 898,
											"end": 923,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 898,
											"end": 923,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 923,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 898,
											"end": 923,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 898,
											"end": 923,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 898,
											"end": 923,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 898,
											"end": 923,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 898,
											"end": 923,
											"modifierDepth": 1,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 898,
											"end": 923,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 923,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 898,
											"end": 923,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 923,
											"modifierDepth": 1,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 898,
											"end": 923,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 898,
											"end": 923,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 781,
											"end": 931,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1588,
											"end": 2029,
											"name": "tag",
											"source": 6,
											"value": "90"
										},
										{
											"begin": 1588,
											"end": 2029,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1663,
											"end": 1676,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1688,
											"end": 1707,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 1724,
											"end": 1730,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1720,
											"end": 1721,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 1720,
											"end": 1730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "tag",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1733,
											"end": 1734,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 1720,
											"end": 1734,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "tag",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 1710,
											"end": 1735,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "tag",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "CALLDATACOPY",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "tag",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1688,
											"end": 1735,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1688,
											"end": 1735,
											"name": "POP",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1745,
											"end": 1751,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1752,
											"end": 1753,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 1745,
											"end": 1754,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "tag",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "BYTE",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "MSTORE8",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "POP",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1770,
											"end": 1776,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1777,
											"end": 1778,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 1770,
											"end": 1779,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "BYTE",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "MSTORE8",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1800,
											"end": 1809,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 1816,
											"end": 1822,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1812,
											"end": 1813,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 1812,
											"end": 1822,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "tag",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1825,
											"end": 1826,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 1812,
											"end": 1826,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "tag",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1800,
											"end": 1826,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1800,
											"end": 1826,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "tag",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1832,
											"end": 1833,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1828,
											"end": 1829,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1828,
											"end": 1833,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "181899199A1A9B1B9C1CB0B131B232B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1879,
											"end": 1884,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1887,
											"end": 1890,
											"name": "PUSH",
											"source": 6,
											"value": "F"
										},
										{
											"begin": 1879,
											"end": 1890,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 1866,
											"end": 1891,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "tag",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "BYTE",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 6,
											"value": "F8"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1860,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1861,
											"end": 1862,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 1854,
											"end": 1863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "tag",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "BYTE",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "MSTORE8",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1915,
											"end": 1916,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 1835,
											"end": 1838,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "tag",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "tag",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1944,
											"end": 1954,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1944,
											"end": 1954,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "168"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4996,
											"end": 4998,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4978,
											"end": 4999,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4978,
											"end": 4999,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4978,
											"end": 4999,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5015,
											"end": 5033,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5015,
											"end": 5033,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5015,
											"end": 5033,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5008,
											"end": 5038,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5074,
											"end": 5108,
											"name": "PUSH",
											"source": 10,
											"value": "537472696E67733A20686578206C656E67746820696E73756666696369656E74"
										},
										{
											"begin": 5054,
											"end": 5072,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5054,
											"end": 5072,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5054,
											"end": 5072,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5047,
											"end": 5109,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5126,
											"end": 5144,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5126,
											"end": 5144,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 4794,
											"end": 5150,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "tag",
											"source": 6,
											"value": "168"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2015,
											"end": 2021,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1588,
											"end": 2029,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1588,
											"end": 2029,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3334,
											"end": 3437,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 3334,
											"end": 3437,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 3411,
											"end": 3415,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3400,
											"end": 3410,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 3400,
											"end": 3430,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "tag",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3334,
											"end": 3437,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3334,
											"end": 3437,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7327,
											"end": 7349,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 7335,
											"end": 7339,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7341,
											"end": 7348,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7327,
											"end": 7334,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 7327,
											"end": 7349,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7327,
											"end": 7349,
											"name": "tag",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 7327,
											"end": 7349,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7322,
											"end": 7471,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 7322,
											"end": 7471,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7371,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7397,
											"end": 7401,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 7447,
											"end": 7459,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7447,
											"end": 7459,
											"name": "tag",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 7447,
											"end": 7459,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7438,
											"end": 7445,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7432,
											"end": 7436,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7244,
											"end": 7477,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7707,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 7693,
											"end": 7697,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7699,
											"end": 7706,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 7685,
											"end": 7707,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7707,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 7685,
											"end": 7707,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7681,
											"end": 7830,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7681,
											"end": 7830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 7681,
											"end": 7830,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7755,
											"end": 7760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 7779,
											"end": 7819,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7779,
											"end": 7819,
											"name": "PUSH",
											"source": 0,
											"value": "F6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B"
										},
										{
											"begin": 7779,
											"end": 7819,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7755,
											"end": 7760,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7779,
											"end": 7819,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7602,
											"end": 7836,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3718,
											"end": 4210,
											"name": "tag",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 3718,
											"end": 4210,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 3814,
											"end": 3818,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3820,
											"end": 3827,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3806,
											"end": 3813,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 3806,
											"end": 3828,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "tag",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3801,
											"end": 4204,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 3801,
											"end": 4204,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 4017,
											"end": 4024,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4027,
											"end": 4029,
											"name": "PUSH",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 3989,
											"end": 4008,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 3989,
											"end": 4030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "tag",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4101,
											"end": 4139,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 4129,
											"end": 4133,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4136,
											"end": 4138,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4101,
											"end": 4120,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 4101,
											"end": 4139,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4101,
											"end": 4139,
											"name": "tag",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 4101,
											"end": 4139,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 3896,
											"end": 4161,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "tag",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 3844,
											"end": 4193,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14,
											"end": 300,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 14,
											"end": 300,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 72,
											"end": 78,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 125,
											"end": 127,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 113,
											"end": 122,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 104,
											"end": 111,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 100,
											"end": 123,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 96,
											"end": 128,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 93,
											"end": 145,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 93,
											"end": 145,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 93,
											"end": 145,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 141,
											"end": 142,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 138,
											"end": 139,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 131,
											"end": 143,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 93,
											"end": 145,
											"name": "tag",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 93,
											"end": 145,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 167,
											"end": 190,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 167,
											"end": 190,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 219,
											"end": 251,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 219,
											"end": 251,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 209,
											"end": 252,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 209,
											"end": 252,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 199,
											"end": 270,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 199,
											"end": 270,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 266,
											"end": 267,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 264,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 256,
											"end": 268,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 497,
											"end": 677,
											"name": "tag",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 497,
											"end": 677,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 556,
											"end": 562,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 609,
											"end": 611,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 597,
											"end": 606,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 588,
											"end": 595,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 584,
											"end": 607,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 580,
											"end": 612,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 577,
											"end": 629,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 577,
											"end": 629,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 577,
											"end": 629,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 625,
											"end": 626,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 622,
											"end": 623,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 615,
											"end": 627,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 577,
											"end": 629,
											"name": "tag",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 577,
											"end": 629,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 648,
											"end": 671,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 648,
											"end": 671,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 497,
											"end": 677,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 497,
											"end": 677,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1097,
											"end": 1370,
											"name": "tag",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 1097,
											"end": 1370,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1153,
											"end": 1159,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1206,
											"end": 1208,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1194,
											"end": 1203,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1185,
											"end": 1192,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1181,
											"end": 1204,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1177,
											"end": 1209,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1174,
											"end": 1226,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1174,
											"end": 1226,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 1174,
											"end": 1226,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1222,
											"end": 1223,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1219,
											"end": 1220,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1212,
											"end": 1224,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1174,
											"end": 1226,
											"name": "tag",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 1174,
											"end": 1226,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1261,
											"end": 1270,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1314,
											"end": 1319,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1307,
											"end": 1320,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1300,
											"end": 1321,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1293,
											"end": 1298,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1290,
											"end": 1322,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1280,
											"end": 1340,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 1280,
											"end": 1340,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1336,
											"end": 1337,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1333,
											"end": 1334,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1326,
											"end": 1338,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1375,
											"end": 1506,
											"name": "tag",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 1375,
											"end": 1506,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1450,
											"end": 1481,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1450,
											"end": 1481,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1440,
											"end": 1482,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1440,
											"end": 1482,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1430,
											"end": 1500,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 1430,
											"end": 1500,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1496,
											"end": 1497,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1493,
											"end": 1494,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1486,
											"end": 1498,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1511,
											"end": 1826,
											"name": "tag",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 1511,
											"end": 1826,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1579,
											"end": 1585,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1587,
											"end": 1593,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1640,
											"end": 1642,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1628,
											"end": 1637,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1619,
											"end": 1626,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1615,
											"end": 1638,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1611,
											"end": 1643,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1608,
											"end": 1660,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1608,
											"end": 1660,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "212"
										},
										{
											"begin": 1608,
											"end": 1660,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1656,
											"end": 1657,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1653,
											"end": 1654,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1646,
											"end": 1658,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1608,
											"end": 1660,
											"name": "tag",
											"source": 10,
											"value": "212"
										},
										{
											"begin": 1608,
											"end": 1660,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1692,
											"end": 1701,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1679,
											"end": 1702,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1669,
											"end": 1702,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1669,
											"end": 1702,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1752,
											"end": 1754,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1741,
											"end": 1750,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1737,
											"end": 1755,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1724,
											"end": 1756,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1796,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "213"
										},
										{
											"begin": 1790,
											"end": 1795,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1796,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 1765,
											"end": 1796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1796,
											"name": "tag",
											"source": 10,
											"value": "213"
										},
										{
											"begin": 1765,
											"end": 1796,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1815,
											"end": 1820,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1805,
											"end": 1820,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1805,
											"end": 1820,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1805,
											"end": 1820,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1511,
											"end": 1826,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1511,
											"end": 1826,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1511,
											"end": 1826,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1511,
											"end": 1826,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1511,
											"end": 1826,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1511,
											"end": 1826,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1831,
											"end": 2103,
											"name": "tag",
											"source": 10,
											"value": "56"
										},
										{
											"begin": 1831,
											"end": 2103,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1915,
											"end": 1921,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1968,
											"end": 1970,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1956,
											"end": 1965,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1947,
											"end": 1954,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1943,
											"end": 1966,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1939,
											"end": 1971,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1936,
											"end": 1988,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1936,
											"end": 1988,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 1936,
											"end": 1988,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1984,
											"end": 1985,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1981,
											"end": 1982,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1974,
											"end": 1986,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1936,
											"end": 1988,
											"name": "tag",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 1936,
											"end": 1988,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2032,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2010,
											"end": 2033,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2042,
											"end": 2073,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 2067,
											"end": 2072,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2042,
											"end": 2073,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 2042,
											"end": 2073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3762,
											"end": 3946,
											"name": "tag",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 3762,
											"end": 3946,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3832,
											"end": 3838,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3885,
											"end": 3887,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3873,
											"end": 3882,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3864,
											"end": 3871,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3860,
											"end": 3883,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3856,
											"end": 3888,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3853,
											"end": 3905,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3853,
											"end": 3905,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 3853,
											"end": 3905,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3901,
											"end": 3902,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3898,
											"end": 3899,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3891,
											"end": 3903,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3853,
											"end": 3905,
											"name": "tag",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 3853,
											"end": 3905,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3924,
											"end": 3940,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3924,
											"end": 3940,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3762,
											"end": 3946,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3762,
											"end": 3946,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3951,
											"end": 4078,
											"name": "tag",
											"source": 10,
											"value": "195"
										},
										{
											"begin": 3951,
											"end": 4078,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4012,
											"end": 4022,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 4007,
											"end": 4010,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 4003,
											"end": 4023,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 4000,
											"end": 4001,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3993,
											"end": 4024,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4043,
											"end": 4047,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 4040,
											"end": 4041,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4033,
											"end": 4048,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4067,
											"end": 4071,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4064,
											"end": 4065,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4072,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4083,
											"end": 4251,
											"name": "tag",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 4083,
											"end": 4251,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4123,
											"end": 4130,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4189,
											"end": 4190,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4185,
											"end": 4186,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4181,
											"end": 4187,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 4177,
											"end": 4191,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 4174,
											"end": 4175,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4171,
											"end": 4192,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 4166,
											"end": 4167,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4159,
											"end": 4168,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4152,
											"end": 4169,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4148,
											"end": 4193,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4145,
											"end": 4216,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4145,
											"end": 4216,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 4145,
											"end": 4216,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4196,
											"end": 4214,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 4196,
											"end": 4214,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "195"
										},
										{
											"begin": 4196,
											"end": 4214,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4196,
											"end": 4214,
											"name": "tag",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 4196,
											"end": 4214,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4236,
											"end": 4245,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 4236,
											"end": 4245,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4083,
											"end": 4251,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4256,
											"end": 4384,
											"name": "tag",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 4256,
											"end": 4384,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4296,
											"end": 4299,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4327,
											"end": 4328,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4323,
											"end": 4329,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 4320,
											"end": 4321,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4317,
											"end": 4330,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 4314,
											"end": 4353,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4314,
											"end": 4353,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 4314,
											"end": 4353,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4333,
											"end": 4351,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 4333,
											"end": 4351,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "195"
										},
										{
											"begin": 4333,
											"end": 4351,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4333,
											"end": 4351,
											"name": "tag",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 4333,
											"end": 4351,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4369,
											"end": 4378,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4369,
											"end": 4378,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4256,
											"end": 4384,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4389,
											"end": 4516,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 4389,
											"end": 4516,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4450,
											"end": 4460,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 4445,
											"end": 4448,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 4441,
											"end": 4461,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 4438,
											"end": 4439,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4431,
											"end": 4462,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4481,
											"end": 4485,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 4478,
											"end": 4479,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4471,
											"end": 4486,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4505,
											"end": 4509,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4502,
											"end": 4503,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4495,
											"end": 4510,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4521,
											"end": 4648,
											"name": "tag",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 4521,
											"end": 4648,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4582,
											"end": 4592,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 4577,
											"end": 4580,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 4573,
											"end": 4593,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 4570,
											"end": 4571,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4563,
											"end": 4594,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4613,
											"end": 4617,
											"name": "PUSH",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 4610,
											"end": 4611,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4603,
											"end": 4618,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4637,
											"end": 4641,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4634,
											"end": 4635,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4627,
											"end": 4642,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4653,
											"end": 4789,
											"name": "tag",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 4653,
											"end": 4789,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4692,
											"end": 4695,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4720,
											"end": 4725,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4710,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 4710,
											"end": 4749,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4729,
											"end": 4747,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 4729,
											"end": 4747,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "195"
										},
										{
											"begin": 4729,
											"end": 4747,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4729,
											"end": 4747,
											"name": "tag",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 4729,
											"end": 4747,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4765,
											"end": 4783,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4765,
											"end": 4783,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4653,
											"end": 4789,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5155,
											"end": 5413,
											"name": "tag",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 5155,
											"end": 5413,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5227,
											"end": 5228,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5237,
											"end": 5350,
											"name": "tag",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 5237,
											"end": 5350,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5251,
											"end": 5257,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5248,
											"end": 5249,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5245,
											"end": 5258,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 5237,
											"end": 5350,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5237,
											"end": 5350,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 5237,
											"end": 5350,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5327,
											"end": 5338,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5327,
											"end": 5338,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5327,
											"end": 5338,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5321,
											"end": 5339,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5308,
											"end": 5319,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5308,
											"end": 5319,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5308,
											"end": 5319,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5301,
											"end": 5340,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5273,
											"end": 5275,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5266,
											"end": 5276,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5237,
											"end": 5350,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 5237,
											"end": 5350,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5237,
											"end": 5350,
											"name": "tag",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 5237,
											"end": 5350,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5368,
											"end": 5374,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5365,
											"end": 5366,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5362,
											"end": 5375,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 5359,
											"end": 5407,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5359,
											"end": 5407,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 5359,
											"end": 5407,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5403,
											"end": 5404,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5394,
											"end": 5400,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5389,
											"end": 5392,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5385,
											"end": 5401,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5378,
											"end": 5405,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5359,
											"end": 5407,
											"name": "tag",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 5359,
											"end": 5407,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5359,
											"end": 5407,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5155,
											"end": 5413,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5155,
											"end": 5413,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5155,
											"end": 5413,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5155,
											"end": 5413,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5418,
											"end": 6204,
											"name": "tag",
											"source": 10,
											"value": "191"
										},
										{
											"begin": 5418,
											"end": 6204,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5829,
											"end": 5854,
											"name": "PUSH",
											"source": 10,
											"value": "416363657373436F6E74726F6C3A206163636F756E7420000000000000000000"
										},
										{
											"begin": 5824,
											"end": 5827,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5817,
											"end": 5855,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5799,
											"end": 5802,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5884,
											"end": 5890,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5878,
											"end": 5891,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5900,
											"end": 5962,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 5955,
											"end": 5961,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5950,
											"end": 5952,
											"name": "PUSH",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 5945,
											"end": 5948,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5941,
											"end": 5953,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5934,
											"end": 5938,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5926,
											"end": 5932,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5939,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5900,
											"end": 5962,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 5900,
											"end": 5962,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5900,
											"end": 5962,
											"name": "tag",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 5900,
											"end": 5962,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1034B99036B4B9B9B4B733903937B6329"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6021,
											"end": 6023,
											"name": "PUSH",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 5981,
											"end": 5997,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5981,
											"end": 5997,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5981,
											"end": 5997,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6013,
											"end": 6024,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6013,
											"end": 6024,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6013,
											"end": 6024,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6006,
											"end": 6046,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6071,
											"end": 6084,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6071,
											"end": 6084,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6093,
											"end": 6156,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 6071,
											"end": 6084,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6142,
											"end": 6144,
											"name": "PUSH",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 6134,
											"end": 6145,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6134,
											"end": 6145,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6127,
											"end": 6131,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6115,
											"end": 6132,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 6115,
											"end": 6132,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6093,
											"end": 6156,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 6093,
											"end": 6156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6093,
											"end": 6156,
											"name": "tag",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 6093,
											"end": 6156,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6176,
											"end": 6193,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6195,
											"end": 6197,
											"name": "PUSH",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 6172,
											"end": 6198,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6172,
											"end": 6198,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 5418,
											"end": 6204,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5418,
											"end": 6204,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6209,
											"end": 6592,
											"name": "tag",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 6209,
											"end": 6592,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6358,
											"end": 6360,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6347,
											"end": 6356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6340,
											"end": 6361,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6321,
											"end": 6325,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6390,
											"end": 6396,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6384,
											"end": 6397,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6433,
											"end": 6439,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6428,
											"end": 6430,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6426,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6413,
											"end": 6431,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6406,
											"end": 6440,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6449,
											"end": 6515,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 6508,
											"end": 6514,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6503,
											"end": 6505,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6492,
											"end": 6501,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6488,
											"end": 6506,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6483,
											"end": 6485,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6475,
											"end": 6481,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 6471,
											"end": 6486,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6449,
											"end": 6515,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 6449,
											"end": 6515,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6449,
											"end": 6515,
											"name": "tag",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 6449,
											"end": 6515,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6576,
											"end": 6578,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 6555,
											"end": 6570,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6551,
											"end": 6580,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6536,
											"end": 6581,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6536,
											"end": 6581,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6536,
											"end": 6581,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6536,
											"end": 6581,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6583,
											"end": 6585,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6532,
											"end": 6586,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6532,
											"end": 6586,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6209,
											"end": 6592,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6209,
											"end": 6592,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/AccessControl.sol",
								"@openzeppelin/contracts/access/IAccessControl.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"MintNagaKids.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"changeFreeMintOpen(bool)": "28438f68",
							"changeNagaKidsContract(address)": "61aec205",
							"changeWhitelistMintOpen(bool)": "dd31a7ba",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"getTotalSupply()": "c4e41b22",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"isFreeMintOpen()": "a6f5f014",
							"isWhitelistOpen()": "94f4504d",
							"nagaKidsContract()": "27c25c20",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7",
							"whitelistMint()": "804f43cd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_nagaKids\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"changeFreeMintOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_nagaKids\",\"type\":\"address\"}],\"name\":\"changeNagaKidsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"changeWhitelistMintOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFreeMintOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nagaKidsContract\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"MintNagaKids.sol\":\"MintNagaKids\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://861c3abaa2b388a0228469080470d2254e8e91fd09aa0abda8b9ef3babf03ee5\",\"dweb:/ipfs/QmZFg88WPesuMo6GMtf3fi9NHQ5tENYLDZsFQSWgoq13TN\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"MintNagaKids.sol\":{\"keccak256\":\"0xb8bf6bc0d831110723cd6d63dc2d901a0ca01a4f75dcf0140648357fc52842d5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4bee641a8020b4b5f2ec526ab4baff6865c3001445baf8907346613d4383b02e\",\"dweb:/ipfs/QmdycujPPEyoZnHD3aq4M6nncLRg4suhu11y8Do6Xifv7q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 24,
								"contract": "MintNagaKids.sol:MintNagaKids",
								"label": "_roles",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
							},
							{
								"astId": 403,
								"contract": "MintNagaKids.sol:MintNagaKids",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 852,
								"contract": "MintNagaKids.sol:MintNagaKids",
								"label": "nagaKidsContract",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(IERC721Enumerable)579"
							},
							{
								"astId": 854,
								"contract": "MintNagaKids.sol:MintNagaKids",
								"label": "isFreeMintOpen",
								"offset": 20,
								"slot": "2",
								"type": "t_bool"
							},
							{
								"astId": 856,
								"contract": "MintNagaKids.sol:MintNagaKids",
								"label": "isWhitelistOpen",
								"offset": 21,
								"slot": "2",
								"type": "t_bool"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(IERC721Enumerable)579": {
								"encoding": "inplace",
								"label": "contract IERC721Enumerable",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControl.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)19_storage"
							},
							"t_struct(RoleData)19_storage": {
								"encoding": "inplace",
								"label": "struct AccessControl.RoleData",
								"members": [
									{
										"astId": 16,
										"contract": "MintNagaKids.sol:MintNagaKids",
										"label": "members",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 18,
										"contract": "MintNagaKids.sol:MintNagaKids",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/AccessControl.sol",
					"exportedSymbols": {
						"AccessControl": [
							319
						],
						"Context": [
							601
						],
						"ERC165": [
							828
						],
						"IAccessControl": [
							392
						],
						"IERC165": [
							840
						],
						"Strings": [
							804
						]
					},
					"id": 320,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
							"file": "./IAccessControl.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 320,
							"sourceUnit": 393,
							"src": "133:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 320,
							"sourceUnit": 602,
							"src": "164:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "../utils/Strings.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 320,
							"sourceUnit": 805,
							"src": "195:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "../utils/introspection/ERC165.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 320,
							"sourceUnit": 829,
							"src": "226:43:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 601,
										"src": "1841:7:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "1841:7:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "IAccessControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 392,
										"src": "1850:14:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "1850:14:0"
								},
								{
									"baseName": {
										"id": 11,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 828,
										"src": "1866:6:0"
									},
									"id": 12,
									"nodeType": "InheritanceSpecifier",
									"src": "1866:6:0"
								}
							],
							"canonicalName": "AccessControl",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "271:1534:0",
								"text": " @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."
							},
							"fullyImplemented": true,
							"id": 319,
							"linearizedBaseContracts": [
								319,
								828,
								840,
								392,
								601
							],
							"name": "AccessControl",
							"nameLocation": "1824:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "AccessControl.RoleData",
									"id": 19,
									"members": [
										{
											"constant": false,
											"id": 16,
											"mutability": "mutable",
											"name": "members",
											"nameLocation": "1930:7:0",
											"nodeType": "VariableDeclaration",
											"scope": 19,
											"src": "1905:32:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"typeName": {
												"id": 15,
												"keyType": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1913:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1905:24:0",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
													"typeString": "mapping(address => bool)"
												},
												"valueType": {
													"id": 14,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1924:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 18,
											"mutability": "mutable",
											"name": "adminRole",
											"nameLocation": "1955:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 19,
											"src": "1947:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 17,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1947:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "RoleData",
									"nameLocation": "1886:8:0",
									"nodeType": "StructDefinition",
									"scope": 319,
									"src": "1879:92:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 24,
									"mutability": "mutable",
									"name": "_roles",
									"nameLocation": "2014:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 319,
									"src": "1977:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
										"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
									},
									"typeName": {
										"id": 23,
										"keyType": {
											"id": 20,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "1985:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "1977:28:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
											"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
										},
										"valueType": {
											"id": 22,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 21,
												"name": "RoleData",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 19,
												"src": "1996:8:0"
											},
											"referencedDeclaration": 19,
											"src": "1996:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_RoleData_$19_storage_ptr",
												"typeString": "struct AccessControl.RoleData"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"functionSelector": "a217fddf",
									"id": 27,
									"mutability": "constant",
									"name": "DEFAULT_ADMIN_ROLE",
									"nameLocation": "2051:18:0",
									"nodeType": "VariableDeclaration",
									"scope": 319,
									"src": "2027:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 25,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2027:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "30783030",
										"id": 26,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2072:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0x00"
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 37,
										"nodeType": "Block",
										"src": "2495:44:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 33,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 30,
															"src": "2516:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 32,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															92,
															135
														],
														"referencedDeclaration": 92,
														"src": "2505:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32) view"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2505:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "2505:16:0"
											},
											{
												"id": 36,
												"nodeType": "PlaceholderStatement",
												"src": "2531:1:0"
											}
										]
									},
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "2083:375:0",
										"text": " @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"
									},
									"id": 38,
									"name": "onlyRole",
									"nameLocation": "2472:8:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2489:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 38,
												"src": "2481:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 29,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2481:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2480:14:0"
									},
									"src": "2463:76:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										827
									],
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "2697:111:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 52,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 47,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 41,
															"src": "2714:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 49,
																		"name": "IAccessControl",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 392,
																		"src": "2734:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$392_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$392_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	],
																	"id": 48,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2729:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 50,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2729:20:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_contract$_IAccessControl_$392",
																	"typeString": "type(contract IAccessControl)"
																}
															},
															"id": 51,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "interfaceId",
															"nodeType": "MemberAccess",
															"src": "2729:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "2714:47:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 55,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 41,
																"src": "2789:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 53,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "2765:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_AccessControl_$319_$",
																	"typeString": "type(contract super AccessControl)"
																}
															},
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 827,
															"src": "2765:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 56,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2765:36:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2714:87:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 46,
												"id": 58,
												"nodeType": "Return",
												"src": "2707:94:0"
											}
										]
									},
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "2545:56:0",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "2615:17:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 43,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2673:8:0"
									},
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2640:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2633:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 40,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2633:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2632:20:0"
									},
									"returnParameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2691:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 44,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2691:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2690:6:0"
									},
									"scope": 319,
									"src": "2606:202:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										359
									],
									"body": {
										"id": 78,
										"nodeType": "Block",
										"src": "2987:53:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"baseExpression": {
																"id": 71,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "3004:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 73,
															"indexExpression": {
																"id": 72,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "3011:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3004:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$19_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "members",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 16,
														"src": "3004:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 76,
													"indexExpression": {
														"id": 75,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "3025:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3004:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 70,
												"id": 77,
												"nodeType": "Return",
												"src": "2997:36:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "2814:76:0",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 79,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "2904:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 67,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2963:8:0"
									},
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2920:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "2912:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 62,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2912:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2934:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "2926:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2926:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:31:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "2981:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 68,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2981:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2980:6:0"
									},
									"scope": 319,
									"src": "2895:145:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 91,
										"nodeType": "Block",
										"src": "3390:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 86,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 82,
															"src": "3411:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 87,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 591,
																"src": "3417:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 88,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3417:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 85,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															92,
															135
														],
														"referencedDeclaration": 135,
														"src": "3400:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address) view"
														}
													},
													"id": 89,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3400:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 90,
												"nodeType": "ExpressionStatement",
												"src": "3400:30:0"
											}
										]
									},
									"documentation": {
										"id": 80,
										"nodeType": "StructuredDocumentation",
										"src": "3046:283:0",
										"text": " @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"
									},
									"id": 92,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3343:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3362:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "3354:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 81,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3354:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3353:14:0"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3390:0:0"
									},
									"scope": 319,
									"src": "3334:103:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 134,
										"nodeType": "Block",
										"src": "3791:419:0",
										"statements": [
											{
												"condition": {
													"id": 104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3805:23:0",
													"subExpression": {
														"arguments": [
															{
																"id": 101,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 95,
																"src": "3814:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 102,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 97,
																"src": "3820:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 100,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 79,
															"src": "3806:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 103,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3806:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 133,
												"nodeType": "IfStatement",
												"src": "3801:403:0",
												"trueBody": {
													"id": 132,
													"nodeType": "Block",
													"src": "3830:374:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																						"id": 110,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3938:25:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																							"typeString": "literal_string \"AccessControl: account \""
																						},
																						"value": "AccessControl: account "
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"id": 115,
																										"name": "account",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 97,
																										"src": "4017:7:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									],
																									"id": 114,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "4009:7:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_uint160_$",
																										"typeString": "type(uint160)"
																									},
																									"typeName": {
																										"id": 113,
																										"name": "uint160",
																										"nodeType": "ElementaryTypeName",
																										"src": "4009:7:0",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 116,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "4009:16:0",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint160",
																									"typeString": "uint160"
																								}
																							},
																							{
																								"hexValue": "3230",
																								"id": 117,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "4027:2:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_20_by_1",
																									"typeString": "int_const 20"
																								},
																								"value": "20"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint160",
																									"typeString": "uint160"
																								},
																								{
																									"typeIdentifier": "t_rational_20_by_1",
																									"typeString": "int_const 20"
																								}
																							],
																							"expression": {
																								"id": 111,
																								"name": "Strings",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 804,
																								"src": "3989:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_Strings_$804_$",
																									"typeString": "type(library Strings)"
																								}
																							},
																							"id": 112,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "toHexString",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 803,
																							"src": "3989:19:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																								"typeString": "function (uint256,uint256) pure returns (string memory)"
																							}
																						},
																						"id": 118,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3989:41:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					},
																					{
																						"hexValue": "206973206d697373696e6720726f6c6520",
																						"id": 119,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "4056:19:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																							"typeString": "literal_string \" is missing role \""
																						},
																						"value": " is missing role "
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"id": 124,
																										"name": "role",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 95,
																										"src": "4129:4:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_bytes32",
																											"typeString": "bytes32"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_bytes32",
																											"typeString": "bytes32"
																										}
																									],
																									"id": 123,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "4121:7:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_uint256_$",
																										"typeString": "type(uint256)"
																									},
																									"typeName": {
																										"id": 122,
																										"name": "uint256",
																										"nodeType": "ElementaryTypeName",
																										"src": "4121:7:0",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 125,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "4121:13:0",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"hexValue": "3332",
																								"id": 126,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "4136:2:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								},
																								"value": "32"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								}
																							],
																							"expression": {
																								"id": 120,
																								"name": "Strings",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 804,
																								"src": "4101:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_Strings_$804_$",
																									"typeString": "type(library Strings)"
																								}
																							},
																							"id": 121,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "toHexString",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 803,
																							"src": "4101:19:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																								"typeString": "function (uint256,uint256) pure returns (string memory)"
																							}
																						},
																						"id": 127,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "4101:38:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																							"typeString": "literal_string \"AccessControl: account \""
																						},
																						{
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						},
																						{
																							"typeIdentifier": "t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																							"typeString": "literal_string \" is missing role \""
																						},
																						{
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					],
																					"expression": {
																						"id": 108,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "3896:3:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 109,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "3896:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 128,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3896:265:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 107,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3868:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																				"typeString": "type(string storage pointer)"
																			},
																			"typeName": {
																				"id": 106,
																				"name": "string",
																				"nodeType": "ElementaryTypeName",
																				"src": "3868:6:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 129,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3868:311:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 105,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "3844:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 130,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3844:349:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 131,
															"nodeType": "ExpressionStatement",
															"src": "3844:349:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "3443:270:0",
										"text": " @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"
									},
									"id": 135,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3727:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3746:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "3738:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 94,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3738:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3760:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "3752:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3752:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3737:31:0"
									},
									"returnParameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3791:0:0"
									},
									"scope": 319,
									"src": "3718:492:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										367
									],
									"body": {
										"id": 149,
										"nodeType": "Block",
										"src": "4474:46:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 144,
															"name": "_roles",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 24,
															"src": "4491:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
															}
														},
														"id": 146,
														"indexExpression": {
															"id": 145,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 138,
															"src": "4498:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4491:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_RoleData_$19_storage",
															"typeString": "struct AccessControl.RoleData storage ref"
														}
													},
													"id": 147,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "adminRole",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 18,
													"src": "4491:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 143,
												"id": 148,
												"nodeType": "Return",
												"src": "4484:29:0"
											}
										]
									},
									"documentation": {
										"id": 136,
										"nodeType": "StructuredDocumentation",
										"src": "4216:170:0",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 150,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "4400:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 140,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4447:8:0"
									},
									"parameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4421:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 150,
												"src": "4413:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 137,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4413:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4412:14:0"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 150,
												"src": "4465:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 141,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4465:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4464:9:0"
									},
									"scope": 319,
									"src": "4391:129:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										375
									],
									"body": {
										"id": 169,
										"nodeType": "Block",
										"src": "4873:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 165,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "4894:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 166,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 155,
															"src": "4900:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 164,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 287,
														"src": "4883:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4883:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 168,
												"nodeType": "ExpressionStatement",
												"src": "4883:25:0"
											}
										]
									},
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "4526:239:0",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "2f2ff15d",
									"id": 170,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 160,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "4866:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 159,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 150,
														"src": "4853:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4853:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 162,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 158,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "4844:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "4844:28:0"
										}
									],
									"name": "grantRole",
									"nameLocation": "4779:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 157,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4835:8:0"
									},
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4797:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "4789:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 152,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4789:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4811:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "4803:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 154,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4803:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4788:31:0"
									},
									"returnParameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4873:0:0"
									},
									"scope": 319,
									"src": "4770:145:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										383
									],
									"body": {
										"id": 189,
										"nodeType": "Block",
										"src": "5253:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 185,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5275:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 186,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 175,
															"src": "5281:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 184,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 318,
														"src": "5263:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5263:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 188,
												"nodeType": "ExpressionStatement",
												"src": "5263:26:0"
											}
										]
									},
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "4921:223:0",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "d547741f",
									"id": 190,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 180,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5246:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 179,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 150,
														"src": "5233:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5233:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 182,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 178,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "5224:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "5224:28:0"
										}
									],
									"name": "revokeRole",
									"nameLocation": "5158:10:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 177,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5215:8:0"
									},
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5177:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "5169:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 172,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5191:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "5183:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5183:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5168:31:0"
									},
									"returnParameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5253:0:0"
									},
									"scope": 319,
									"src": "5149:147:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										391
									],
									"body": {
										"id": 212,
										"nodeType": "Block",
										"src": "5864:137:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 203,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 200,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 195,
																"src": "5882:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 201,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 591,
																	"src": "5893:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 202,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5893:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5882:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66",
															"id": 204,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5907:49:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																"typeString": "literal_string \"AccessControl: can only renounce roles for self\""
															},
															"value": "AccessControl: can only renounce roles for self"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																"typeString": "literal_string \"AccessControl: can only renounce roles for self\""
															}
														],
														"id": 199,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5874:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5874:83:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 206,
												"nodeType": "ExpressionStatement",
												"src": "5874:83:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 208,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 193,
															"src": "5980:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 209,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 195,
															"src": "5986:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 207,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 318,
														"src": "5968:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5968:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 211,
												"nodeType": "ExpressionStatement",
												"src": "5968:26:0"
											}
										]
									},
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "5302:480:0",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."
									},
									"functionSelector": "36568abe",
									"id": 213,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "5796:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 197,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5855:8:0"
									},
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5817:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "5809:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 192,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5809:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5831:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "5823:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5823:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5808:31:0"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5864:0:0"
									},
									"scope": 319,
									"src": "5787:214:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 226,
										"nodeType": "Block",
										"src": "6708:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 222,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "6729:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 223,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "6735:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 221,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 287,
														"src": "6718:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6718:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 225,
												"nodeType": "ExpressionStatement",
												"src": "6718:25:0"
											}
										]
									},
									"documentation": {
										"id": 214,
										"nodeType": "StructuredDocumentation",
										"src": "6007:628:0",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."
									},
									"id": 227,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupRole",
									"nameLocation": "6649:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6668:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "6660:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 215,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6660:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6682:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "6674:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6674:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6659:31:0"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6708:0:0"
									},
									"scope": 319,
									"src": "6640:110:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 254,
										"nodeType": "Block",
										"src": "6948:174:0",
										"statements": [
											{
												"assignments": [
													236
												],
												"declarations": [
													{
														"constant": false,
														"id": 236,
														"mutability": "mutable",
														"name": "previousAdminRole",
														"nameLocation": "6966:17:0",
														"nodeType": "VariableDeclaration",
														"scope": 254,
														"src": "6958:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 235,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6958:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 240,
												"initialValue": {
													"arguments": [
														{
															"id": 238,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "6999:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 237,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 150,
														"src": "6986:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6986:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6958:46:0"
											},
											{
												"expression": {
													"id": 246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 241,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "7014:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 243,
															"indexExpression": {
																"id": 242,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 230,
																"src": "7021:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7014:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$19_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 244,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "adminRole",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 18,
														"src": "7014:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 245,
														"name": "adminRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 232,
														"src": "7039:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "7014:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 247,
												"nodeType": "ExpressionStatement",
												"src": "7014:34:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 249,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "7080:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 250,
															"name": "previousAdminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 236,
															"src": "7086:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 251,
															"name": "adminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 232,
															"src": "7105:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 248,
														"name": "RoleAdminChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 331,
														"src": "7063:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32,bytes32,bytes32)"
														}
													},
													"id": 252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7063:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 253,
												"nodeType": "EmitStatement",
												"src": "7058:57:0"
											}
										]
									},
									"documentation": {
										"id": 228,
										"nodeType": "StructuredDocumentation",
										"src": "6756:114:0",
										"text": " @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."
									},
									"id": 255,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setRoleAdmin",
									"nameLocation": "6884:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6906:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "6898:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 229,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6898:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "adminRole",
												"nameLocation": "6920:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "6912:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 231,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6912:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6897:33:0"
									},
									"returnParameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6948:0:0"
									},
									"scope": 319,
									"src": "6875:247:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 286,
										"nodeType": "Block",
										"src": "7312:165:0",
										"statements": [
											{
												"condition": {
													"id": 267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7326:23:0",
													"subExpression": {
														"arguments": [
															{
																"id": 264,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 258,
																"src": "7335:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 265,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 260,
																"src": "7341:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 263,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 79,
															"src": "7327:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 266,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7327:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 285,
												"nodeType": "IfStatement",
												"src": "7322:149:0",
												"trueBody": {
													"id": 284,
													"nodeType": "Block",
													"src": "7351:120:0",
													"statements": [
														{
															"expression": {
																"id": 275,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 268,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 24,
																				"src": "7365:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 270,
																			"indexExpression": {
																				"id": 269,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 258,
																				"src": "7372:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7365:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$19_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 271,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "members",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 16,
																		"src": "7365:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 273,
																	"indexExpression": {
																		"id": 272,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 260,
																		"src": "7386:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "7365:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 274,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7397:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "7365:36:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 276,
															"nodeType": "ExpressionStatement",
															"src": "7365:36:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 278,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 258,
																		"src": "7432:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 279,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 260,
																		"src": "7438:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 280,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 591,
																			"src": "7447:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 281,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7447:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 277,
																	"name": "RoleGranted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 340,
																	"src": "7420:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 282,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7420:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 283,
															"nodeType": "EmitStatement",
															"src": "7415:45:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 256,
										"nodeType": "StructuredDocumentation",
										"src": "7128:111:0",
										"text": " @dev Grants `role` to `account`.\n Internal function without access restriction."
									},
									"id": 287,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_grantRole",
									"nameLocation": "7253:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7272:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "7264:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 257,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7264:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7286:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "7278:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7278:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7263:31:0"
									},
									"returnParameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7312:0:0"
									},
									"scope": 319,
									"src": "7244:233:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 317,
										"nodeType": "Block",
										"src": "7671:165:0",
										"statements": [
											{
												"condition": {
													"arguments": [
														{
															"id": 296,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 290,
															"src": "7693:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 297,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 292,
															"src": "7699:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 295,
														"name": "hasRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 79,
														"src": "7685:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) view returns (bool)"
														}
													},
													"id": 298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7685:22:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 316,
												"nodeType": "IfStatement",
												"src": "7681:149:0",
												"trueBody": {
													"id": 315,
													"nodeType": "Block",
													"src": "7709:121:0",
													"statements": [
														{
															"expression": {
																"id": 306,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 299,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 24,
																				"src": "7723:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 301,
																			"indexExpression": {
																				"id": 300,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 290,
																				"src": "7730:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7723:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$19_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 302,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "members",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 16,
																		"src": "7723:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 304,
																	"indexExpression": {
																		"id": 303,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 292,
																		"src": "7744:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "7723:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 305,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7755:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "7723:37:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 307,
															"nodeType": "ExpressionStatement",
															"src": "7723:37:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 309,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 290,
																		"src": "7791:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 310,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 292,
																		"src": "7797:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 311,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 591,
																			"src": "7806:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 312,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7806:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 308,
																	"name": "RoleRevoked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 349,
																	"src": "7779:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 313,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7779:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 314,
															"nodeType": "EmitStatement",
															"src": "7774:45:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "7483:114:0",
										"text": " @dev Revokes `role` from `account`.\n Internal function without access restriction."
									},
									"id": 318,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revokeRole",
									"nameLocation": "7611:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7631:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "7623:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 289,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7623:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7645:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "7637:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7637:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7622:31:0"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7671:0:0"
									},
									"scope": 319,
									"src": "7602:234:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 320,
							"src": "1806:6032:0",
							"usedErrors": []
						}
					],
					"src": "108:7731:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
					"exportedSymbols": {
						"IAccessControl": [
							392
						]
					},
					"id": 393,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 321,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "94:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAccessControl",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 322,
								"nodeType": "StructuredDocumentation",
								"src": "119:89:1",
								"text": " @dev External interface of AccessControl declared to support ERC165 detection."
							},
							"fullyImplemented": false,
							"id": 392,
							"linearizedBaseContracts": [
								392
							],
							"name": "IAccessControl",
							"nameLocation": "219:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 323,
										"nodeType": "StructuredDocumentation",
										"src": "240:292:1",
										"text": " @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"
									},
									"eventSelector": "bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
									"id": 331,
									"name": "RoleAdminChanged",
									"nameLocation": "543:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "576:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "560:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 324,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "560:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 327,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousAdminRole",
												"nameLocation": "598:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "582:33:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 326,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "582:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 329,
												"indexed": true,
												"mutability": "mutable",
												"name": "newAdminRole",
												"nameLocation": "633:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "617:28:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 328,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "617:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "559:87:1"
									},
									"src": "537:110:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 332,
										"nodeType": "StructuredDocumentation",
										"src": "653:212:1",
										"text": " @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."
									},
									"eventSelector": "2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
									"id": 340,
									"name": "RoleGranted",
									"nameLocation": "876:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 334,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "904:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "888:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 333,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "888:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "926:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "910:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 335,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "910:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 338,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "951:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "935:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 337,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "887:71:1"
									},
									"src": "870:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 341,
										"nodeType": "StructuredDocumentation",
										"src": "965:275:1",
										"text": " @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
									},
									"eventSelector": "f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b",
									"id": 349,
									"name": "RoleRevoked",
									"nameLocation": "1251:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 343,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1279:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1263:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 342,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1301:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1285:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1285:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1326:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1310:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1310:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1262:71:1"
									},
									"src": "1245:89:1"
								},
								{
									"documentation": {
										"id": 350,
										"nodeType": "StructuredDocumentation",
										"src": "1340:76:1",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 359,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "1430:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1446:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "1438:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 351,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1438:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1460:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "1452:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1437:31:1"
									},
									"returnParameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "1492:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 356,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1492:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1491:6:1"
									},
									"scope": 392,
									"src": "1421:77:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 360,
										"nodeType": "StructuredDocumentation",
										"src": "1504:184:1",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 367,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "1702:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1723:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "1715:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 361,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1715:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1714:14:1"
									},
									"returnParameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "1752:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 364,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1752:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1751:9:1"
									},
									"scope": 392,
									"src": "1693:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 368,
										"nodeType": "StructuredDocumentation",
										"src": "1767:239:1",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "2f2ff15d",
									"id": 375,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "grantRole",
									"nameLocation": "2020:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2038:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "2030:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 369,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2030:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2052:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "2044:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 371,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2044:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2029:31:1"
									},
									"returnParameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2069:0:1"
									},
									"scope": 392,
									"src": "2011:59:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 376,
										"nodeType": "StructuredDocumentation",
										"src": "2076:223:1",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "d547741f",
									"id": 383,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeRole",
									"nameLocation": "2313:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2332:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "2324:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 377,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2324:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 380,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2346:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "2338:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 379,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2338:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2323:31:1"
									},
									"returnParameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2363:0:1"
									},
									"scope": 392,
									"src": "2304:60:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "2370:480:1",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."
									},
									"functionSelector": "36568abe",
									"id": 391,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "2864:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2885:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "2877:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 385,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2877:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2899:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "2891:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2891:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2876:31:1"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2916:0:1"
									},
									"scope": 392,
									"src": "2855:62:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 393,
							"src": "209:2710:1",
							"usedErrors": []
						}
					],
					"src": "94:2826:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							432
						]
					},
					"id": 433,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 394,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 395,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:2",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 432,
							"linearizedBaseContracts": [
								432
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 398,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 432,
									"src": "1661:41:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 396,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 397,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 401,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:2",
									"nodeType": "VariableDeclaration",
									"scope": 432,
									"src": "1708:37:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 399,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 400,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 403,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 432,
									"src": "1752:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 402,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 410,
										"nodeType": "Block",
										"src": "1796:39:2",
										"statements": [
											{
												"expression": {
													"id": 408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 406,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 403,
														"src": "1806:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 407,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 398,
														"src": "1816:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 409,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:2"
											}
										]
									},
									"id": 411,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:2"
									},
									"returnParameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:2"
									},
									"scope": 432,
									"src": "1782:53:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 430,
										"nodeType": "Block",
										"src": "2236:421:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 415,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 403,
																"src": "2325:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 416,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 401,
																"src": "2336:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 418,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 414,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 420,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:2"
											},
											{
												"expression": {
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 421,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 403,
														"src": "2455:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 422,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 401,
														"src": "2465:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 424,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:2"
											},
											{
												"id": 425,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:2"
											},
											{
												"expression": {
													"id": 428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 426,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 403,
														"src": "2628:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 427,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 398,
														"src": "2638:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 429,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:2"
											}
										]
									},
									"documentation": {
										"id": 412,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:2",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 431,
									"name": "nonReentrant",
									"nameLocation": "2221:12:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 413,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:2"
									},
									"src": "2212:445:2",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 433,
							"src": "873:1786:2",
							"usedErrors": []
						}
					],
					"src": "97:2563:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							840
						],
						"IERC721": [
							548
						]
					},
					"id": 549,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 434,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 435,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 549,
							"sourceUnit": 841,
							"src": "133:47:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 437,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 840,
										"src": "271:7:3"
									},
									"id": 438,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:3"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 436,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:3",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 548,
							"linearizedBaseContracts": [
								548,
								840
							],
							"name": "IERC721",
							"nameLocation": "260:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 439,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:3",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 447,
									"name": "Transfer",
									"nameLocation": "384:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 441,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "393:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 440,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 443,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "415:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 442,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 445,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "435:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 444,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:3"
									},
									"src": "378:82:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 448,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:3",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 456,
									"name": "Approval",
									"nameLocation": "571:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 450,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 456,
												"src": "580:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 449,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 452,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 456,
												"src": "603:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 454,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 456,
												"src": "629:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 453,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:3"
									},
									"src": "565:89:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 457,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:3",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 465,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 459,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "803:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 458,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 461,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "826:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 463,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "852:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 462,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:3"
									},
									"src": "782:85:3"
								},
								{
									"documentation": {
										"id": 466,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:3",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 473,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "973:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 467,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:3"
									},
									"returnParameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "1011:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 470,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:3"
									},
									"scope": 548,
									"src": "954:74:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 474,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:3",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 481,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 481,
												"src": "1187:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 475,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:3"
									},
									"returnParameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 481,
												"src": "1227:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 478,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:3"
									},
									"scope": 548,
									"src": "1170:72:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 482,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:3",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 493,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "1844:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 483,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "1866:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 485,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "1886:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 487,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "1911:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 489,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:3"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:3"
									},
									"scope": 548,
									"src": "1809:137:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "1952:690:3",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 503,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2656:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2690:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "2682:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2682:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2712:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "2704:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 497,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2704:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2732:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "2724:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 499,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2672:73:3"
									},
									"returnParameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2754:0:3"
									},
									"scope": 548,
									"src": "2647:108:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 504,
										"nodeType": "StructuredDocumentation",
										"src": "2761:504:3",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 513,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3279:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3309:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3301:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 505,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3301:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3331:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3323:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 507,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3323:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3351:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3343:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 509,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3343:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3291:73:3"
									},
									"returnParameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3373:0:3"
									},
									"scope": 548,
									"src": "3270:104:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 514,
										"nodeType": "StructuredDocumentation",
										"src": "3380:452:3",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 521,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3846:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3862:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "3854:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3854:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3874:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "3866:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 517,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3866:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3853:29:3"
									},
									"returnParameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3891:0:3"
									},
									"scope": 548,
									"src": "3837:55:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 522,
										"nodeType": "StructuredDocumentation",
										"src": "3898:309:3",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 529,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4221:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4247:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "4239:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 523,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4239:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4262:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "4257:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 525,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4257:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4238:34:3"
									},
									"returnParameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4281:0:3"
									},
									"scope": 548,
									"src": "4212:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 530,
										"nodeType": "StructuredDocumentation",
										"src": "4288:139:3",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 537,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4441:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4461:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "4453:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 531,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4453:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4452:17:3"
									},
									"returnParameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 535,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4501:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "4493:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 534,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4493:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4492:18:3"
									},
									"scope": 548,
									"src": "4432:79:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 538,
										"nodeType": "StructuredDocumentation",
										"src": "4517:138:3",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 547,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4669:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4694:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "4686:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 539,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4686:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4709:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "4701:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4701:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4685:33:3"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "4742:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 544,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4742:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4741:6:3"
									},
									"scope": 548,
									"src": "4660:88:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 549,
							"src": "250:4500:3",
							"usedErrors": []
						}
					],
					"src": "108:4643:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							840
						],
						"IERC721": [
							548
						],
						"IERC721Enumerable": [
							579
						]
					},
					"id": 580,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 550,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "129:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 551,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 580,
							"sourceUnit": 549,
							"src": "154:24:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 553,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 548,
										"src": "348:7:4"
									},
									"id": 554,
									"nodeType": "InheritanceSpecifier",
									"src": "348:7:4"
								}
							],
							"canonicalName": "IERC721Enumerable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 552,
								"nodeType": "StructuredDocumentation",
								"src": "180:136:4",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 579,
							"linearizedBaseContracts": [
								579,
								548,
								840
							],
							"name": "IERC721Enumerable",
							"nameLocation": "327:17:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 555,
										"nodeType": "StructuredDocumentation",
										"src": "362:82:4",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 560,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "458:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "469:2:4"
									},
									"returnParameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "495:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "495:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "494:9:4"
									},
									"scope": 579,
									"src": "449:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 561,
										"nodeType": "StructuredDocumentation",
										"src": "510:171:4",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 570,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "695:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "723:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "715:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 562,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "738:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "730:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 564,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "730:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:30:4"
									},
									"returnParameters": {
										"id": 569,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "768:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 567,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:9:4"
									},
									"scope": 579,
									"src": "686:91:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 571,
										"nodeType": "StructuredDocumentation",
										"src": "783:164:4",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 578,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "961:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "982:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "974:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 572,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "974:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:15:4"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "1012:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 575,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1012:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1011:9:4"
									},
									"scope": 579,
									"src": "952:69:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 580,
							"src": "317:706:4",
							"usedErrors": []
						}
					],
					"src": "129:895:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							601
						]
					},
					"id": 602,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 581,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 582,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 601,
							"linearizedBaseContracts": [
								601
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 590,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 587,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 586,
												"id": 589,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 591,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 591,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 584,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 601,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 599,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 596,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 597,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 595,
												"id": 598,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 600,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 600,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 593,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 601,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 602,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Strings": [
							804
						]
					},
					"id": 805,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 603,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 604,
								"nodeType": "StructuredDocumentation",
								"src": "111:34:6",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 804,
							"linearizedBaseContracts": [
								804
							],
							"name": "Strings",
							"nameLocation": "154:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 607,
									"mutability": "constant",
									"name": "_HEX_SYMBOLS",
									"nameLocation": "193:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 804,
									"src": "168:58:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 605,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "168:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 606,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "208:18:6",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 685,
										"nodeType": "Block",
										"src": "399:632:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 615,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 610,
														"src": "601:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 616,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "610:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "601:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 621,
												"nodeType": "IfStatement",
												"src": "597:51:6",
												"trueBody": {
													"id": 620,
													"nodeType": "Block",
													"src": "613:35:6",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 618,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "634:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 614,
															"id": 619,
															"nodeType": "Return",
															"src": "627:10:6"
														}
													]
												}
											},
											{
												"assignments": [
													623
												],
												"declarations": [
													{
														"constant": false,
														"id": 623,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "665:4:6",
														"nodeType": "VariableDeclaration",
														"scope": 685,
														"src": "657:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 622,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "657:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 625,
												"initialValue": {
													"id": 624,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 610,
													"src": "672:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "657:20:6"
											},
											{
												"assignments": [
													627
												],
												"declarations": [
													{
														"constant": false,
														"id": 627,
														"mutability": "mutable",
														"name": "digits",
														"nameLocation": "695:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 685,
														"src": "687:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 626,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "687:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 628,
												"nodeType": "VariableDeclarationStatement",
												"src": "687:14:6"
											},
											{
												"body": {
													"id": 639,
													"nodeType": "Block",
													"src": "729:57:6",
													"statements": [
														{
															"expression": {
																"id": 633,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "743:8:6",
																"subExpression": {
																	"id": 632,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 627,
																	"src": "743:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 634,
															"nodeType": "ExpressionStatement",
															"src": "743:8:6"
														},
														{
															"expression": {
																"id": 637,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 635,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 623,
																	"src": "765:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 636,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "773:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "765:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 638,
															"nodeType": "ExpressionStatement",
															"src": "765:10:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 629,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 623,
														"src": "718:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 630,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "726:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "718:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 640,
												"nodeType": "WhileStatement",
												"src": "711:75:6"
											},
											{
												"assignments": [
													642
												],
												"declarations": [
													{
														"constant": false,
														"id": 642,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "808:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 685,
														"src": "795:19:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 641,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "795:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 647,
												"initialValue": {
													"arguments": [
														{
															"id": 645,
															"name": "digits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "827:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 644,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "817:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 643,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "821:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:17:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "795:39:6"
											},
											{
												"body": {
													"id": 678,
													"nodeType": "Block",
													"src": "863:131:6",
													"statements": [
														{
															"expression": {
																"id": 653,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 651,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 627,
																	"src": "877:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 652,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "887:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "877:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 654,
															"nodeType": "ExpressionStatement",
															"src": "877:11:6"
														},
														{
															"expression": {
																"id": 672,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 655,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 642,
																		"src": "902:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 657,
																	"indexExpression": {
																		"id": 656,
																		"name": "digits",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 627,
																		"src": "909:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "902:14:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 669,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 662,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "932:2:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 667,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 665,
																									"name": "value",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 610,
																									"src": "945:5:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "%",
																								"rightExpression": {
																									"hexValue": "3130",
																									"id": 666,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "953:2:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_10_by_1",
																										"typeString": "int_const 10"
																									},
																									"value": "10"
																								},
																								"src": "945:10:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 664,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "937:7:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint256_$",
																								"typeString": "type(uint256)"
																							},
																							"typeName": {
																								"id": 663,
																								"name": "uint256",
																								"nodeType": "ElementaryTypeName",
																								"src": "937:7:6",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 668,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "937:19:6",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "932:24:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 661,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "926:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 660,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "926:5:6",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 670,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "926:31:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 659,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "919:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 658,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "919:6:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 671,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "919:39:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "902:56:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 673,
															"nodeType": "ExpressionStatement",
															"src": "902:56:6"
														},
														{
															"expression": {
																"id": 676,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 674,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 610,
																	"src": "972:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 675,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "972:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 677,
															"nodeType": "ExpressionStatement",
															"src": "972:11:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 648,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 610,
														"src": "851:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 649,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "860:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "851:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 679,
												"nodeType": "WhileStatement",
												"src": "844:150:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 682,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "1017:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 681,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1010:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 680,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1010:6:6",
															"typeDescriptions": {}
														}
													},
													"id": 683,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1010:14:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 614,
												"id": 684,
												"nodeType": "Return",
												"src": "1003:21:6"
											}
										]
									},
									"documentation": {
										"id": 608,
										"nodeType": "StructuredDocumentation",
										"src": "233:90:6",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 686,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "337:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "354:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "346:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 609,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "346:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "345:15:6"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "384:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 612,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "384:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "383:15:6"
									},
									"scope": 804,
									"src": "328:703:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 726,
										"nodeType": "Block",
										"src": "1210:255:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 694,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 689,
														"src": "1224:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 695,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1233:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1224:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 700,
												"nodeType": "IfStatement",
												"src": "1220:54:6",
												"trueBody": {
													"id": 699,
													"nodeType": "Block",
													"src": "1236:38:6",
													"statements": [
														{
															"expression": {
																"hexValue": "30783030",
																"id": 697,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1257:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
																	"typeString": "literal_string \"0x00\""
																},
																"value": "0x00"
															},
															"functionReturnParameters": 693,
															"id": 698,
															"nodeType": "Return",
															"src": "1250:13:6"
														}
													]
												}
											},
											{
												"assignments": [
													702
												],
												"declarations": [
													{
														"constant": false,
														"id": 702,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "1291:4:6",
														"nodeType": "VariableDeclaration",
														"scope": 726,
														"src": "1283:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 701,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1283:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 704,
												"initialValue": {
													"id": 703,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 689,
													"src": "1298:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1283:20:6"
											},
											{
												"assignments": [
													706
												],
												"declarations": [
													{
														"constant": false,
														"id": 706,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "1321:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 726,
														"src": "1313:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 705,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1313:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 708,
												"initialValue": {
													"hexValue": "30",
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1330:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1313:18:6"
											},
											{
												"body": {
													"id": 719,
													"nodeType": "Block",
													"src": "1359:57:6",
													"statements": [
														{
															"expression": {
																"id": 713,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1373:8:6",
																"subExpression": {
																	"id": 712,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 706,
																	"src": "1373:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 714,
															"nodeType": "ExpressionStatement",
															"src": "1373:8:6"
														},
														{
															"expression": {
																"id": 717,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 715,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 702,
																	"src": "1395:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 716,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1404:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1395:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 718,
															"nodeType": "ExpressionStatement",
															"src": "1395:10:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 711,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 709,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 702,
														"src": "1348:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 710,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1356:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1348:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 720,
												"nodeType": "WhileStatement",
												"src": "1341:75:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 722,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 689,
															"src": "1444:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 723,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 706,
															"src": "1451:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 721,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															727,
															803
														],
														"referencedDeclaration": 803,
														"src": "1432:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1432:26:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 693,
												"id": 725,
												"nodeType": "Return",
												"src": "1425:33:6"
											}
										]
									},
									"documentation": {
										"id": 687,
										"nodeType": "StructuredDocumentation",
										"src": "1037:94:6",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 727,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1145:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1165:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "1157:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 688,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:15:6"
									},
									"returnParameters": {
										"id": 693,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 692,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "1195:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 691,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1195:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:15:6"
									},
									"scope": 804,
									"src": "1136:329:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 802,
										"nodeType": "Block",
										"src": "1678:351:6",
										"statements": [
											{
												"assignments": [
													738
												],
												"declarations": [
													{
														"constant": false,
														"id": 738,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1701:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 802,
														"src": "1688:19:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 737,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1688:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 747,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 745,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 743,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 741,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1720:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 742,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 732,
																	"src": "1724:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1720:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 744,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1733:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1720:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 740,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1710:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 739,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1714:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1710:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1688:47:6"
											},
											{
												"expression": {
													"id": 752,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 748,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 738,
															"src": "1745:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 750,
														"indexExpression": {
															"hexValue": "30",
															"id": 749,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1752:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1745:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 751,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1745:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 753,
												"nodeType": "ExpressionStatement",
												"src": "1745:15:6"
											},
											{
												"expression": {
													"id": 758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 754,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 738,
															"src": "1770:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 756,
														"indexExpression": {
															"hexValue": "31",
															"id": 755,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1777:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1770:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 757,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1782:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1770:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 759,
												"nodeType": "ExpressionStatement",
												"src": "1770:15:6"
											},
											{
												"body": {
													"id": 788,
													"nodeType": "Block",
													"src": "1840:87:6",
													"statements": [
														{
															"expression": {
																"id": 782,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 774,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 738,
																		"src": "1854:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 776,
																	"indexExpression": {
																		"id": 775,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 761,
																		"src": "1861:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1854:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 777,
																		"name": "_HEX_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 607,
																		"src": "1866:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 781,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 780,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 778,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 730,
																			"src": "1879:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 779,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1887:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1879:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1866:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1854:37:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 783,
															"nodeType": "ExpressionStatement",
															"src": "1854:37:6"
														},
														{
															"expression": {
																"id": 786,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 784,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 730,
																	"src": "1905:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 785,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1905:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 787,
															"nodeType": "ExpressionStatement",
															"src": "1905:11:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 768,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 761,
														"src": "1828:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 769,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1832:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1828:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 789,
												"initializationExpression": {
													"assignments": [
														761
													],
													"declarations": [
														{
															"constant": false,
															"id": 761,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1808:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 789,
															"src": "1800:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 760,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1800:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 767,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 766,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 764,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 762,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1812:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 763,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 732,
																"src": "1816:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1812:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 765,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1825:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1812:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1800:26:6"
												},
												"loopExpression": {
													"expression": {
														"id": 772,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1835:3:6",
														"subExpression": {
															"id": 771,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 761,
															"src": "1837:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 773,
													"nodeType": "ExpressionStatement",
													"src": "1835:3:6"
												},
												"nodeType": "ForStatement",
												"src": "1795:132:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 791,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 730,
																"src": "1944:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 792,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1953:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1944:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1956:34:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 790,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1936:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1936:55:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 796,
												"nodeType": "ExpressionStatement",
												"src": "1936:55:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 799,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 738,
															"src": "2015:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 798,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2008:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 797,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2008:6:6",
															"typeDescriptions": {}
														}
													},
													"id": 800,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2008:14:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 736,
												"id": 801,
												"nodeType": "Return",
												"src": "2001:21:6"
											}
										]
									},
									"documentation": {
										"id": 728,
										"nodeType": "StructuredDocumentation",
										"src": "1471:112:6",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 803,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1597:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 730,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1617:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "1609:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 729,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1609:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 732,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1632:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "1624:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 731,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1608:31:6"
									},
									"returnParameters": {
										"id": 736,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 735,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "1663:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 734,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1663:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1662:15:6"
									},
									"scope": 804,
									"src": "1588:441:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 805,
							"src": "146:1885:6",
							"usedErrors": []
						}
					],
					"src": "86:1946:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							828
						],
						"IERC165": [
							840
						]
					},
					"id": 829,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 806,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 807,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 829,
							"sourceUnit": 841,
							"src": "124:23:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 809,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 840,
										"src": "754:7:7"
									},
									"id": 810,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:7"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 808,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:7",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 828,
							"linearizedBaseContracts": [
								828,
								840
							],
							"name": "ERC165",
							"nameLocation": "744:6:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										839
									],
									"body": {
										"id": 826,
										"nodeType": "Block",
										"src": "920:64:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 824,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 819,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 813,
														"src": "937:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 821,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 840,
																	"src": "957:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$840_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$840_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 820,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 822,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$840",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 823,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 818,
												"id": 825,
												"nodeType": "Return",
												"src": "930:47:7"
											}
										]
									},
									"documentation": {
										"id": 811,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:7",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 827,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 815,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:7"
									},
									"parameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 813,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 827,
												"src": "856:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 812,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:7"
									},
									"returnParameters": {
										"id": 818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 817,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 827,
												"src": "914:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 816,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:7"
									},
									"scope": 828,
									"src": "829:155:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 829,
							"src": "726:260:7",
							"usedErrors": []
						}
					],
					"src": "99:888:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							840
						]
					},
					"id": 841,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 830,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 831,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:8",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 840,
							"linearizedBaseContracts": [
								840
							],
							"name": "IERC165",
							"nameLocation": "415:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 832,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:8",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 839,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 839,
												"src": "801:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 833,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:8"
									},
									"returnParameters": {
										"id": 838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 839,
												"src": "844:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 836,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:8"
									},
									"scope": 840,
									"src": "774:76:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 841,
							"src": "405:447:8",
							"usedErrors": []
						}
					],
					"src": "100:753:8"
				},
				"id": 8
			},
			"MintNagaKids.sol": {
				"ast": {
					"absolutePath": "MintNagaKids.sol",
					"exportedSymbols": {
						"AccessControl": [
							319
						],
						"Context": [
							601
						],
						"ERC165": [
							828
						],
						"IAccessControl": [
							392
						],
						"IERC165": [
							840
						],
						"IERC721": [
							548
						],
						"IERC721Enumerable": [
							579
						],
						"MintNagaKids": [
							945
						],
						"ReentrancyGuard": [
							432
						],
						"Strings": [
							804
						]
					},
					"id": 946,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 842,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".15"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 843,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 946,
							"sourceUnit": 433,
							"src": "61:62:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"id": 844,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 946,
							"sourceUnit": 580,
							"src": "125:79:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/AccessControl.sol",
							"file": "@openzeppelin/contracts/access/AccessControl.sol",
							"id": 845,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 946,
							"sourceUnit": 320,
							"src": "206:58:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 846,
										"name": "AccessControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 319,
										"src": "293:13:9"
									},
									"id": 847,
									"nodeType": "InheritanceSpecifier",
									"src": "293:13:9"
								},
								{
									"baseName": {
										"id": 848,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 432,
										"src": "308:15:9"
									},
									"id": 849,
									"nodeType": "InheritanceSpecifier",
									"src": "308:15:9"
								}
							],
							"canonicalName": "MintNagaKids",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 945,
							"linearizedBaseContracts": [
								945,
								432,
								319,
								828,
								840,
								392,
								601
							],
							"name": "MintNagaKids",
							"nameLocation": "277:12:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "27c25c20",
									"id": 852,
									"mutability": "mutable",
									"name": "nagaKidsContract",
									"nameLocation": "358:16:9",
									"nodeType": "VariableDeclaration",
									"scope": 945,
									"src": "333:41:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC721Enumerable_$579",
										"typeString": "contract IERC721Enumerable"
									},
									"typeName": {
										"id": 851,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 850,
											"name": "IERC721Enumerable",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 579,
											"src": "333:17:9"
										},
										"referencedDeclaration": 579,
										"src": "333:17:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Enumerable_$579",
											"typeString": "contract IERC721Enumerable"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a6f5f014",
									"id": 854,
									"mutability": "mutable",
									"name": "isFreeMintOpen",
									"nameLocation": "393:14:9",
									"nodeType": "VariableDeclaration",
									"scope": 945,
									"src": "381:26:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 853,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "381:4:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "94f4504d",
									"id": 856,
									"mutability": "mutable",
									"name": "isWhitelistOpen",
									"nameLocation": "426:15:9",
									"nodeType": "VariableDeclaration",
									"scope": 945,
									"src": "414:27:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 855,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "414:4:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 872,
										"nodeType": "Block",
										"src": "493:105:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 863,
															"name": "DEFAULT_ADMIN_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "515:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"expression": {
																"id": 864,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "535:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 865,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "535:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 862,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 287,
														"src": "504:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 866,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "504:42:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 867,
												"nodeType": "ExpressionStatement",
												"src": "504:42:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 869,
															"name": "_nagaKids",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "580:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721Enumerable_$579",
																"typeString": "contract IERC721Enumerable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC721Enumerable_$579",
																"typeString": "contract IERC721Enumerable"
															}
														],
														"id": 868,
														"name": "changeNagaKidsContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 887,
														"src": "557:22:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC721Enumerable_$579_$returns$__$",
															"typeString": "function (contract IERC721Enumerable)"
														}
													},
													"id": 870,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "557:33:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 871,
												"nodeType": "ExpressionStatement",
												"src": "557:33:9"
											}
										]
									},
									"id": 873,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "_nagaKids",
												"nameLocation": "482:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 873,
												"src": "464:27:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC721Enumerable_$579",
													"typeString": "contract IERC721Enumerable"
												},
												"typeName": {
													"id": 858,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 857,
														"name": "IERC721Enumerable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 579,
														"src": "464:17:9"
													},
													"referencedDeclaration": 579,
													"src": "464:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC721Enumerable_$579",
														"typeString": "contract IERC721Enumerable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:29:9"
									},
									"returnParameters": {
										"id": 861,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "493:0:9"
									},
									"scope": 945,
									"src": "452:146:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 886,
										"nodeType": "Block",
										"src": "726:47:9",
										"statements": [
											{
												"expression": {
													"id": 884,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 882,
														"name": "nagaKidsContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 852,
														"src": "737:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721Enumerable_$579",
															"typeString": "contract IERC721Enumerable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 883,
														"name": "_nagaKids",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 876,
														"src": "756:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721Enumerable_$579",
															"typeString": "contract IERC721Enumerable"
														}
													},
													"src": "737:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC721Enumerable_$579",
														"typeString": "contract IERC721Enumerable"
													}
												},
												"id": 885,
												"nodeType": "ExpressionStatement",
												"src": "737:28:9"
											}
										]
									},
									"functionSelector": "61aec205",
									"id": 887,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 879,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "701:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 880,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 878,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "692:8:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "692:28:9"
										}
									],
									"name": "changeNagaKidsContract",
									"nameLocation": "615:22:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 876,
												"mutability": "mutable",
												"name": "_nagaKids",
												"nameLocation": "656:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 887,
												"src": "638:27:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC721Enumerable_$579",
													"typeString": "contract IERC721Enumerable"
												},
												"typeName": {
													"id": 875,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 874,
														"name": "IERC721Enumerable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 579,
														"src": "638:17:9"
													},
													"referencedDeclaration": 579,
													"src": "638:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC721Enumerable_$579",
														"typeString": "contract IERC721Enumerable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "637:29:9"
									},
									"returnParameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "726:0:9"
									},
									"scope": 945,
									"src": "606:167:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 899,
										"nodeType": "Block",
										"src": "887:44:9",
										"statements": [
											{
												"expression": {
													"id": 897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 895,
														"name": "isWhitelistOpen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 856,
														"src": "898:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 896,
														"name": "_isOpen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 889,
														"src": "916:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "898:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 898,
												"nodeType": "ExpressionStatement",
												"src": "898:25:9"
											}
										]
									},
									"functionSelector": "dd31a7ba",
									"id": 900,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 892,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "862:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 893,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 891,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "853:8:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "853:28:9"
										}
									],
									"name": "changeWhitelistMintOpen",
									"nameLocation": "790:23:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 890,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "_isOpen",
												"nameLocation": "819:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "814:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 888,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "814:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "813:14:9"
									},
									"returnParameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "887:0:9"
									},
									"scope": 945,
									"src": "781:150:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 912,
										"nodeType": "Block",
										"src": "1040:43:9",
										"statements": [
											{
												"expression": {
													"id": 910,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 908,
														"name": "isFreeMintOpen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 854,
														"src": "1051:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 909,
														"name": "_isOpen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 902,
														"src": "1068:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1051:24:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 911,
												"nodeType": "ExpressionStatement",
												"src": "1051:24:9"
											}
										]
									},
									"functionSelector": "28438f68",
									"id": 913,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 905,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "1015:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 906,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 904,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "1006:8:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1006:28:9"
										}
									],
									"name": "changeFreeMintOpen",
									"nameLocation": "948:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "_isOpen",
												"nameLocation": "972:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 913,
												"src": "967:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 901,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "967:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "966:14:9"
									},
									"returnParameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:0:9"
									},
									"scope": 945,
									"src": "939:144:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 933,
										"nodeType": "Block",
										"src": "1144:140:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 921,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 919,
																"name": "isWhitelistOpen",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 856,
																"src": "1163:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "74727565",
																"id": 920,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1182:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "1163:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "57686974656c697374206e6f74206f70656e20746f206d696e742e",
															"id": 922,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1188:29:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04c899bcc4f5150e1689f9a8071396f43ad4f348d6b97ffd095d25c890be42b8",
																"typeString": "literal_string \"Whitelist not open to mint.\""
															},
															"value": "Whitelist not open to mint."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04c899bcc4f5150e1689f9a8071396f43ad4f348d6b97ffd095d25c890be42b8",
																"typeString": "literal_string \"Whitelist not open to mint.\""
															}
														],
														"id": 918,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1155:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1155:63:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 924,
												"nodeType": "ExpressionStatement",
												"src": "1155:63:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 929,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 926,
																	"name": "getTotalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 944,
																	"src": "1237:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 927,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1237:16:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "31313131",
																"id": 928,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1256:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1111_by_1",
																	"typeString": "int_const 1111"
																},
																"value": "1111"
															},
															"src": "1237:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f76657220737570706c79",
															"id": 930,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1262:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6",
																"typeString": "literal_string \"Over supply\""
															},
															"value": "Over supply"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6",
																"typeString": "literal_string \"Over supply\""
															}
														],
														"id": 925,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1229:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1229:47:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 932,
												"nodeType": "ExpressionStatement",
												"src": "1229:47:9"
											}
										]
									},
									"functionSelector": "804f43cd",
									"id": 934,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 916,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 915,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 431,
												"src": "1131:12:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1131:12:9"
										}
									],
									"name": "whitelistMint",
									"nameLocation": "1100:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 914,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1113:2:9"
									},
									"returnParameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1144:0:9"
									},
									"scope": 945,
									"src": "1091:193:9",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 943,
										"nodeType": "Block",
										"src": "1348:56:9",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 939,
															"name": "nagaKidsContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 852,
															"src": "1366:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721Enumerable_$579",
																"typeString": "contract IERC721Enumerable"
															}
														},
														"id": 940,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "totalSupply",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 560,
														"src": "1366:28:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
															"typeString": "function () view external returns (uint256)"
														}
													},
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1366:30:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 938,
												"id": 942,
												"nodeType": "Return",
												"src": "1359:37:9"
											}
										]
									},
									"functionSelector": "c4e41b22",
									"id": 944,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTotalSupply",
									"nameLocation": "1301:14:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1315:2:9"
									},
									"returnParameters": {
										"id": 938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "1339:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 936,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1339:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1338:9:9"
									},
									"scope": 945,
									"src": "1292:112:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 946,
							"src": "268:1264:9",
							"usedErrors": []
						}
					],
					"src": "33:1501:9"
				},
				"id": 9
			}
		}
	}
}