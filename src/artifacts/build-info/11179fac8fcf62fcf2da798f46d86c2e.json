{
	"id": "11179fac8fcf62fcf2da798f46d86c2e",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.15",
	"solcLongVersion": "0.8.15+commit.e14f2714",
	"input": {
		"language": "Solidity",
		"sources": {
			"MintNagaKids.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\nimport \"./Whitelist.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"./INagaKidsNFT.sol\";\r\n\r\ncontract MintNagaKids is Whitelist,AccessControl, ReentrancyGuard {\r\n\r\n    INagaKidsNFT public nagaKidsContract;\r\n    bool public isFreeMintOpen;\r\n    bool public isWhitelistOpen;\r\n\r\n    constructor(INagaKidsNFT _nagaKids) {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        changeNagaKidsContract(_nagaKids);\r\n    }\r\n\r\n    modifier Paused() {\r\n        require(isPause() == false,\"NagaKids was Paused.\");\r\n        _;\r\n    }\r\n\r\n    function changeNagaKidsContract(INagaKidsNFT _nagaKids) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        nagaKidsContract = _nagaKids;\r\n    }\r\n\r\n    function changeWhitelistMintOpen(bool _isOpen) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        isWhitelistOpen = _isOpen;\r\n    }\r\n\r\n    function changeFreeMintOpen(bool _isOpen) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        isFreeMintOpen = _isOpen;\r\n    }\r\n    \r\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n       merkleRoot = _merkleRoot;\r\n    }\r\n\r\n    function whitelistMint(uint256 amount) public payable nonReentrant Paused {\r\n        require(isWhitelistOpen == true, \"Whitelist not open to mint.\");\r\n        require(getTotalSupply() < 1111, \"Over supply\");\r\n        require(nagaKidsContract.hasRole(nagaKidsContract.MINTER_ROLE(),address(this)) == true,\"This Contract not have permission to mint.\");\r\n        nagaKidsContract.safeMint(msg.sender);\r\n    }\r\n\r\n    function getTotalSupply() public view returns (uint256) {\r\n        return nagaKidsContract.totalSupply();\r\n    }\r\n\r\n    function getMaxSupply() public view returns (uint256) {\r\n        return nagaKidsContract.maxSupply();\r\n    }\r\n\r\n    function isPause() public view returns (bool) {\r\n        return nagaKidsContract.paused();\r\n    }\r\n}\r\n"
			},
			"INagaKidsNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\r\n\r\ninterface INagaKidsNFT is IERC721,IAccessControl {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n    function maxSupply() external view returns (uint256);\r\n    function paused() external view returns (bool);\r\n    function safeMint(address to) external;\r\n    function PAUSER_ROLE() external view returns (bytes32);\r\n    function MINTER_ROLE() external view returns (bytes32);\r\n\r\n}"
			},
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"Whitelist.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\ncontract Whitelist {\r\n\r\n    bytes32 public merkleRoot;\r\n\r\n    function isWhitelist(\r\n        bytes32[] calldata _proof,\r\n        address _address,\r\n        uint256 _amount\r\n    ) external view returns (bool) {\r\n        if (merkleRoot == 0) {\r\n            return false;\r\n        }\r\n\r\n        return\r\n            MerkleProof.verify(\r\n                _proof,\r\n                merkleRoot,\r\n                keccak256(abi.encodePacked(_address, _amount))\r\n            );\r\n    }\r\n\r\n}\r\n"
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"AccessControl": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.",
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://861c3abaa2b388a0228469080470d2254e8e91fd09aa0abda8b9ef3babf03ee5\",\"dweb:/ipfs/QmZFg88WPesuMo6GMtf3fi9NHQ5tENYLDZsFQSWgoq13TN\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 24,
								"contract": "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
								"label": "_roles",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControl.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)19_storage"
							},
							"t_struct(RoleData)19_storage": {
								"encoding": "inplace",
								"label": "struct AccessControl.RoleData",
								"members": [
									{
										"astId": 16,
										"contract": "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
										"label": "members",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 18,
										"contract": "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"IAccessControl": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "External interface of AccessControl declared to support ERC165 detection.",
						"events": {
							"RoleAdminChanged(bytes32,bytes32,bytes32)": {
								"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
							},
							"RoleGranted(bytes32,address,address)": {
								"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
							},
							"RoleRevoked(bytes32,address,address)": {
								"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
							}
						},
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 403,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220482475a97023f85002d88b36969440a2f71b0286ad4e8b89549651f5f3d8d2c164736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220482475a97023f85002d88b36969440a2f71b0286ad4e8b89549651f5f3d8d2c164736f6c634300080f0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE 0x24 PUSH22 0xA97023F85002D88B36969440A2F71B0286AD4E8B8954 SWAP7 MLOAD CREATE2 RETURN 0xD8 0xD2 0xC1 PUSH5 0x736F6C6343 STOP ADDMOD 0xF STOP CALLER ",
							"sourceMap": "146:1885:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;146:1885:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220482475a97023f85002d88b36969440a2f71b0286ad4e8b89549651f5f3d8d2c164736f6c634300080f0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE 0x24 PUSH22 0xA97023F85002D88B36969440A2F71B0286AD4E8B8954 SWAP7 MLOAD CREATE2 RETURN 0xD8 0xD2 0xC1 PUSH5 0x736F6C6343 STOP ADDMOD 0xF STOP CALLER ",
							"sourceMap": "146:1885:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220482475a97023f85002d88b36969440a2f71b0286ad4e8b89549651f5f3d8d2c164736f6c634300080f0033",
									".code": [
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/AccessControl.sol",
								"@openzeppelin/contracts/access/IAccessControl.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"INagaKidsNFT.sol",
								"MintNagaKids.sol",
								"Whitelist.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"MerkleProof": {
					"abi": [],
					"devdoc": {
						"details": "These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":800:2577  library MerkleProof {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":800:2577  library MerkleProof {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e53668fa5fa11d3d3dd2408463979970c27be388d0f7df26a4a92e9b7b8c470464736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e53668fa5fa11d3d3dd2408463979970c27be388d0f7df26a4a92e9b7b8c470464736f6c634300080f0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 CALLDATASIZE PUSH9 0xFA5FA11D3D3DD24084 PUSH4 0x979970C2 PUSH28 0xE388D0F7DF26A4A92E9B7B8C470464736F6C634300080F0033000000 ",
							"sourceMap": "800:1777:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;800:1777:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e53668fa5fa11d3d3dd2408463979970c27be388d0f7df26a4a92e9b7b8c470464736f6c634300080f0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 CALLDATASIZE PUSH9 0xFA5FA11D3D3DD24084 PUSH4 0x979970C2 PUSH28 0xE388D0F7DF26A4A92E9B7B8C470464736F6C634300080F0033000000 ",
							"sourceMap": "800:1777:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_efficientHash(bytes32,bytes32)": "infinite",
								"processProof(bytes32[] memory,bytes32)": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e53668fa5fa11d3d3dd2408463979970c27be388d0f7df26a4a92e9b7b8c470464736f6c634300080f0033",
									".code": [
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/AccessControl.sol",
								"@openzeppelin/contracts/access/IAccessControl.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"INagaKidsNFT.sol",
								"MintNagaKids.sol",
								"Whitelist.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1aa68fa19422863cc91d23b5896917dbe79175ed47b591148aaeb3e98cb49752\",\"dweb:/ipfs/QmeY64vTRbGhdXcytRKusfJsAfNF4aqr9e1SGBGdCYvW2j\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"INagaKidsNFT.sol": {
				"INagaKidsNFT": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "MINTER_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PAUSER_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "safeMint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"MINTER_ROLE()": "d5391393",
							"PAUSER_ROLE()": "e63ab1e9",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"isApprovedForAll(address,address)": "e985e9c5",
							"maxSupply()": "d5abeb01",
							"ownerOf(uint256)": "6352211e",
							"paused()": "5c975abb",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"safeMint(address)": "40d097c3",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"INagaKidsNFT.sol\":\"INagaKidsNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"INagaKidsNFT.sol\":{\"keccak256\":\"0xe96108ed4b125ef13341e3ac371d44cc3b1cea2b277a2a1bfcf11f0b9b121c32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f5a04eafc03ad2e9905ebd2878263af3daf1a5f6ac2a49ba3d5a82d0fc1b544\",\"dweb:/ipfs/QmeCQGpp4fiCGq68L2mFqGYCx6S1iDmHBUciJj1SEdqJB1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"MintNagaKids.sol": {
				"MintNagaKids": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract INagaKidsNFT",
									"name": "_nagaKids",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "_isOpen",
									"type": "bool"
								}
							],
							"name": "changeFreeMintOpen",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract INagaKidsNFT",
									"name": "_nagaKids",
									"type": "address"
								}
							],
							"name": "changeNagaKidsContract",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "_isOpen",
									"type": "bool"
								}
							],
							"name": "changeWhitelistMintOpen",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getMaxSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTotalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isFreeMintOpen",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isPause",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32[]",
									"name": "_proof",
									"type": "bytes32[]"
								},
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "isWhitelist",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isWhitelistOpen",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "merkleRoot",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nagaKidsContract",
							"outputs": [
								{
									"internalType": "contract INagaKidsNFT",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_merkleRoot",
									"type": "bytes32"
								}
							],
							"name": "setMerkleRoot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "whitelistMint",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"MintNagaKids.sol\":244:1981  contract MintNagaKids is Whitelist,AccessControl, ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n    /* \"MintNagaKids.sol\":431:572  constructor(INagaKidsNFT _nagaKids) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1813  _status */\n  0x02\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  sstore\n    /* \"MintNagaKids.sol\":478:520  _grantRole(DEFAULT_ADMIN_ROLE, msg.sender) */\n  tag_8\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n  0x00\n    /* \"MintNagaKids.sol\":509:519  msg.sender */\n  caller\n    /* \"MintNagaKids.sol\":478:488  _grantRole */\n  tag_9\n    /* \"MintNagaKids.sol\":478:520  _grantRole(DEFAULT_ADMIN_ROLE, msg.sender) */\n  jump\t// in\ntag_8:\n    /* \"MintNagaKids.sol\":531:564  changeNagaKidsContract(_nagaKids) */\n  tag_10\n    /* \"MintNagaKids.sol\":554:563  _nagaKids */\n  dup2\n    /* \"MintNagaKids.sol\":531:553  changeNagaKidsContract */\n  tag_11\n    /* \"MintNagaKids.sol\":531:564  changeNagaKidsContract(_nagaKids) */\n  jump\t// in\ntag_10:\n    /* \"MintNagaKids.sol\":431:572  constructor(INagaKidsNFT _nagaKids) {... */\n  pop\n    /* \"MintNagaKids.sol\":244:1981  contract MintNagaKids is Whitelist,AccessControl, ReentrancyGuard {... */\n  jump(tag_69)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7244:7477  function _grantRole(bytes32 role, address account) internal virtual {... */\ntag_9:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2981:2985  bool */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n  dup3\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3010  _roles */\n  0x01\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n  0x20\n  swap1\n  dup2\n  mstore\n  0x40\n  dup1\n  dup4\n  keccak256\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3033  _roles[role].members[account] */\n  dup6\n  and\n  dup5\n  mstore\n  swap1\n  swap2\n  mstore\n  swap1\n  keccak256\n  sload\n  0xff\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7322:7471  if (!hasRole(role, account)) {... */\n  tag_16\n  jumpi\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7377  _roles[role] */\n  0x00\n  dup3\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7397:7401  true */\n  0x01\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7377  _roles[role] */\n  0x20\n  dup2\n  dup2\n  mstore\n  0x40\n  dup1\n  dup5\n  keccak256\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7394  _roles[role].members[account] */\n  dup7\n  and\n  dup1\n  dup7\n  mstore\n  swap3\n  mstore\n  dup1\n  dup5\n  keccak256\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7401  _roles[role].members[account] = true */\n  dup1\n  sload\n  not(0xff)\n  and\n  swap1\n  swap4\n  or\n  swap1\n  swap3\n  sstore\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n  swap1\n  mload\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n  swap3\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7377  _roles[role] */\n  dup6\n  swap2\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n  0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n  swap2\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7377  _roles[role] */\n  swap1\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n  log4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7322:7471  if (!hasRole(role, account)) {... */\ntag_16:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7244:7477  function _grantRole(bytes32 role, address account) internal virtual {... */\n  pop\n  pop\n  jump\t// out\n    /* \"MintNagaKids.sol\":687:826  function changeNagaKidsContract(INagaKidsNFT _nagaKids) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\ntag_11:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n  tag_20\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n  dup2\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n  tag_21\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n  jump\t// in\ntag_20:\n  pop\n    /* \"MintNagaKids.sol\":790:806  nagaKidsContract */\n  0x03\n    /* \"MintNagaKids.sol\":790:818  nagaKidsContract = _nagaKids */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"MintNagaKids.sol\":687:826  function changeNagaKidsContract(INagaKidsNFT _nagaKids) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3334:3437  function _checkRole(bytes32 role) internal view virtual {... */\ntag_21:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3400:3430  _checkRole(role, _msgSender()) */\n  tag_26\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3411:3415  role */\n  dup2\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3400:3410  _checkRole */\n  tag_28\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3400:3430  _checkRole(role, _msgSender()) */\n  jump\t// in\ntag_26:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3334:3437  function _checkRole(bytes32 role) internal view virtual {... */\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3718:4210  function _checkRole(bytes32 role, address account) internal view virtual {... */\ntag_28:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2981:2985  bool */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n  dup3\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3010  _roles */\n  0x01\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n  0x20\n  swap1\n  dup2\n  mstore\n  0x40\n  dup1\n  dup4\n  keccak256\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3033  _roles[role].members[account] */\n  dup6\n  and\n  dup5\n  mstore\n  swap1\n  swap2\n  mstore\n  swap1\n  keccak256\n  sload\n  0xff\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3801:4204  if (!hasRole(role, account)) {... */\n  tag_16\n  jumpi\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n  tag_32\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4017:4024  account */\n  dup2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4027:4029  20 */\n  0x14\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4008  Strings.toHexString */\n  or(tag_0_119, shl(0x20, tag_33))\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n  0x20\n  shr\n  jump\t// in\ntag_32:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4101:4139  Strings.toHexString(uint256(role), 32) */\n  tag_34\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4129:4133  role */\n  dup4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4136:4138  32 */\n  0x20\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4101:4120  Strings.toHexString */\n  tag_0_119\n  tag_33\n  dup3\n  shl\n  or\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":4101:4139  Strings.toHexString(uint256(role), 32) */\n  dup2\n  shr\n  jump\t// in\ntag_34:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3896:4161  abi.encodePacked(... */\n  add(0x20, mload(0x40))\n  tag_35\n  swap3\n  swap2\n  swap1\n  tag_36\n  jump\t// in\ntag_35:\n  0x40\n  dup1\n  mload\n  not(0x1f)\n  dup2\n  dup5\n  sub\n  add\n  dup2\n  mstore\n  swap1\n  dup3\n  swap1\n  mstore\n  shl(0xe5, 0x461bcd)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3844:4193  revert(... */\n  dup3\n  mstore\n  tag_37\n  swap2\n  0x04\n  add\n  tag_38\n  jump\t// in\ntag_37:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1588:2029  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\ntag_33:\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1663:1676  string memory */\n  0x60\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1688:1707  bytes memory buffer */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1730  2 * length */\n  tag_40\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1724:1730  length */\n  dup4\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1721  2 */\n  0x02\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1730  2 * length */\n  tag_41\n  jump\t// in\ntag_40:\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1734  2 * length + 2 */\n  tag_42\n  swap1\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1733:1734  2 */\n  0x02\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1734  2 * length + 2 */\n  tag_43\n  jump\t// in\ntag_42:\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1710:1735  new bytes(2 * length + 2) */\n  dup2\n  gt\n  iszero\n  tag_45\n  jumpi\n  tag_45\n  tag_46\n  jump\t// in\ntag_45:\n  mload(0x40)\n  swap1\n  dup1\n  dup3\n  mstore\n  dup1\n  0x1f\n  add\n  not(0x1f)\n  and\n  0x20\n  add\n  dup3\n  add\n  0x40\n  mstore\n  dup1\n  iszero\n  tag_47\n  jumpi\n  0x20\n  dup3\n  add\n  dup2\n  dup1\n  calldatasize\n  dup4\n  calldatacopy\n  add\n  swap1\n  pop\ntag_47:\n  pop\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1688:1735  bytes memory buffer = new bytes(2 * length + 2) */\n  swap1\n  pop\n  shl(0xfc, 0x03)\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1751  buffer */\n  dup2\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1752:1753  0 */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1754  buffer[0] */\n  dup2\n  mload\n  dup2\n  lt\n  tag_49\n  jumpi\n  tag_49\n  tag_50\n  jump\t// in\ntag_49:\n  0x20\n  add\n  add\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1760  buffer[0] = \"0\" */\n  swap1\n  not(sub(shl(0xf8, 0x01), 0x01))\n  and\n  swap1\n  dup2\n  0x00\n  byte\n  swap1\n  mstore8\n  pop\n  shl(0xfb, 0x0f)\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1776  buffer */\n  dup2\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1777:1778  1 */\n  0x01\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1779  buffer[1] */\n  dup2\n  mload\n  dup2\n  lt\n  tag_52\n  jumpi\n  tag_52\n  tag_50\n  jump\t// in\ntag_52:\n  0x20\n  add\n  add\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1785  buffer[1] = \"x\" */\n  swap1\n  not(sub(shl(0xf8, 0x01), 0x01))\n  and\n  swap1\n  dup2\n  0x00\n  byte\n  swap1\n  mstore8\n  pop\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1800:1809  uint256 i */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1822  2 * length */\n  tag_56\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1816:1822  length */\n  dup5\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1813  2 */\n  0x02\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1822  2 * length */\n  tag_41\n  jump\t// in\ntag_56:\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1826  2 * length + 1 */\n  tag_57\n  swap1\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1825:1826  1 */\n  0x01\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1826  2 * length + 1 */\n  tag_43\n  jump\t// in\ntag_57:\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1800:1826  uint256 i = 2 * length + 1 */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\ntag_53:\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1832:1833  1 */\n  0x01\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1828:1829  i */\n  dup2\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1828:1833  i > 1 */\n  gt\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n  iszero\n  tag_54\n  jumpi\n  shl(0x81, 0x181899199a1a9b1b9c1cb0b131b232b3)\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1879:1884  value */\n  dup6\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1887:1890  0xf */\n  0x0f\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1879:1890  value & 0xf */\n  and\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1866:1891  _HEX_SYMBOLS[value & 0xf] */\n  0x10\n  dup2\n  lt\n  tag_59\n  jumpi\n  tag_59\n  tag_50\n  jump\t// in\ntag_59:\n  byte\n  0xf8\n  shl\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1860  buffer */\n  dup3\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1861:1862  i */\n  dup3\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1863  buffer[i] */\n  dup2\n  mload\n  dup2\n  lt\n  tag_61\n  jumpi\n  tag_61\n  tag_50\n  jump\t// in\ntag_61:\n  0x20\n  add\n  add\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1891  buffer[i] = _HEX_SYMBOLS[value & 0xf] */\n  swap1\n  not(sub(shl(0xf8, 0x01), 0x01))\n  and\n  swap1\n  dup2\n  0x00\n  byte\n  swap1\n  mstore8\n  pop\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1915:1916  4 */\n  0x04\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1905:1916  value >>= 4 */\n  swap5\n  swap1\n  swap5\n  shr\n  swap4\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1835:1838  --i */\n  tag_62\n  dup2\n  tag_63\n  jump\t// in\ntag_62:\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n  jump(tag_53)\ntag_54:\n  pop\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1944:1954  value == 0 */\n  dup4\n  iszero\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n  tag_64\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":2816:2818   */\n  0x20\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":2798:2819   */\n  dup2\n  swap1\n  mstore\n    /* \"#utility.yul\":2835:2853   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":2828:2858   */\n  mstore\n    /* \"#utility.yul\":2894:2928   */\n  0x537472696e67733a20686578206c656e67746820696e73756666696369656e74\n    /* \"#utility.yul\":2874:2892   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":2867:2929   */\n  mstore\n    /* \"#utility.yul\":2946:2964   */\n  0x64\n  add\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n  tag_37\n    /* \"#utility.yul\":2614:2970   */\n  jump\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\ntag_64:\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":2015:2021  buffer */\n  swap4\n    /* \"@openzeppelin/contracts/utils/Strings.sol\":1588:2029  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:324   */\ntag_3:\n    /* \"#utility.yul\":104:110   */\n  0x00\n    /* \"#utility.yul\":157:159   */\n  0x20\n    /* \"#utility.yul\":145:154   */\n  dup3\n    /* \"#utility.yul\":136:143   */\n  dup5\n    /* \"#utility.yul\":132:155   */\n  sub\n    /* \"#utility.yul\":128:160   */\n  slt\n    /* \"#utility.yul\":125:177   */\n  iszero\n  tag_71\n  jumpi\n    /* \"#utility.yul\":173:174   */\n  0x00\n    /* \"#utility.yul\":170:171   */\n  dup1\n    /* \"#utility.yul\":163:175   */\n  revert\n    /* \"#utility.yul\":125:177   */\ntag_71:\n    /* \"#utility.yul\":199:215   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":244:275   */\n  dup2\n  and\n    /* \"#utility.yul\":234:276   */\n  dup2\n  eq\n    /* \"#utility.yul\":224:294   */\n  tag_64\n  jumpi\n    /* \"#utility.yul\":290:291   */\n  0x00\n    /* \"#utility.yul\":287:288   */\n  dup1\n    /* \"#utility.yul\":280:292   */\n  revert\n    /* \"#utility.yul\":329:587   */\ntag_67:\n    /* \"#utility.yul\":401:402   */\n  0x00\n    /* \"#utility.yul\":411:524   */\ntag_74:\n    /* \"#utility.yul\":425:431   */\n  dup4\n    /* \"#utility.yul\":422:423   */\n  dup2\n    /* \"#utility.yul\":419:432   */\n  lt\n    /* \"#utility.yul\":411:524   */\n  iszero\n  tag_76\n  jumpi\n    /* \"#utility.yul\":501:512   */\n  dup2\n  dup2\n  add\n    /* \"#utility.yul\":495:513   */\n  mload\n    /* \"#utility.yul\":482:493   */\n  dup4\n  dup3\n  add\n    /* \"#utility.yul\":475:514   */\n  mstore\n    /* \"#utility.yul\":447:449   */\n  0x20\n    /* \"#utility.yul\":440:450   */\n  add\n    /* \"#utility.yul\":411:524   */\n  jump(tag_74)\ntag_76:\n    /* \"#utility.yul\":542:548   */\n  dup4\n    /* \"#utility.yul\":539:540   */\n  dup2\n    /* \"#utility.yul\":536:549   */\n  gt\n    /* \"#utility.yul\":533:581   */\n  iszero\n  tag_77\n  jumpi\n    /* \"#utility.yul\":577:578   */\n  0x00\n    /* \"#utility.yul\":568:574   */\n  dup5\n    /* \"#utility.yul\":563:566   */\n  dup5\n    /* \"#utility.yul\":559:575   */\n  add\n    /* \"#utility.yul\":552:579   */\n  mstore\n    /* \"#utility.yul\":533:581   */\ntag_77:\n  pop\n    /* \"#utility.yul\":329:587   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":592:1378   */\ntag_36:\n    /* \"#utility.yul\":1003:1028   */\n  0x416363657373436f6e74726f6c3a206163636f756e7420000000000000000000\n    /* \"#utility.yul\":998:1001   */\n  dup2\n    /* \"#utility.yul\":991:1029   */\n  mstore\n    /* \"#utility.yul\":973:976   */\n  0x00\n    /* \"#utility.yul\":1058:1064   */\n  dup4\n    /* \"#utility.yul\":1052:1065   */\n  mload\n    /* \"#utility.yul\":1074:1136   */\n  tag_79\n    /* \"#utility.yul\":1129:1135   */\n  dup2\n    /* \"#utility.yul\":1124:1126   */\n  0x17\n    /* \"#utility.yul\":1119:1122   */\n  dup6\n    /* \"#utility.yul\":1115:1127   */\n  add\n    /* \"#utility.yul\":1108:1112   */\n  0x20\n    /* \"#utility.yul\":1100:1106   */\n  dup9\n    /* \"#utility.yul\":1096:1113   */\n  add\n    /* \"#utility.yul\":1074:1136   */\n  tag_67\n  jump\t// in\ntag_79:\n  shl(0x7d, 0x01034b99036b4b9b9b4b733903937b6329)\n    /* \"#utility.yul\":1195:1197   */\n  0x17\n    /* \"#utility.yul\":1155:1171   */\n  swap2\n  dup5\n  add\n    /* \"#utility.yul\":1187:1198   */\n  swap2\n  dup3\n  add\n    /* \"#utility.yul\":1180:1220   */\n  mstore\n    /* \"#utility.yul\":1245:1258   */\n  dup4\n  mload\n    /* \"#utility.yul\":1267:1330   */\n  tag_80\n    /* \"#utility.yul\":1245:1258   */\n  dup2\n    /* \"#utility.yul\":1316:1318   */\n  0x28\n    /* \"#utility.yul\":1308:1319   */\n  dup5\n  add\n    /* \"#utility.yul\":1301:1305   */\n  0x20\n    /* \"#utility.yul\":1289:1306   */\n  dup9\n  add\n    /* \"#utility.yul\":1267:1330   */\n  tag_67\n  jump\t// in\ntag_80:\n    /* \"#utility.yul\":1350:1367   */\n  add\n    /* \"#utility.yul\":1369:1371   */\n  0x28\n    /* \"#utility.yul\":1346:1372   */\n  add\n  swap5\n    /* \"#utility.yul\":592:1378   */\n  swap4\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1383:1766   */\ntag_38:\n    /* \"#utility.yul\":1532:1534   */\n  0x20\n    /* \"#utility.yul\":1521:1530   */\n  dup2\n    /* \"#utility.yul\":1514:1535   */\n  mstore\n    /* \"#utility.yul\":1495:1499   */\n  0x00\n    /* \"#utility.yul\":1564:1570   */\n  dup3\n    /* \"#utility.yul\":1558:1571   */\n  mload\n    /* \"#utility.yul\":1607:1613   */\n  dup1\n    /* \"#utility.yul\":1602:1604   */\n  0x20\n    /* \"#utility.yul\":1591:1600   */\n  dup5\n    /* \"#utility.yul\":1587:1605   */\n  add\n    /* \"#utility.yul\":1580:1614   */\n  mstore\n    /* \"#utility.yul\":1623:1689   */\n  tag_82\n    /* \"#utility.yul\":1682:1688   */\n  dup2\n    /* \"#utility.yul\":1677:1679   */\n  0x40\n    /* \"#utility.yul\":1666:1675   */\n  dup6\n    /* \"#utility.yul\":1662:1680   */\n  add\n    /* \"#utility.yul\":1657:1659   */\n  0x20\n    /* \"#utility.yul\":1649:1655   */\n  dup8\n    /* \"#utility.yul\":1645:1660   */\n  add\n    /* \"#utility.yul\":1623:1689   */\n  tag_67\n  jump\t// in\ntag_82:\n    /* \"#utility.yul\":1750:1752   */\n  0x1f\n    /* \"#utility.yul\":1729:1744   */\n  add\n  not(0x1f)\n    /* \"#utility.yul\":1725:1754   */\n  and\n    /* \"#utility.yul\":1710:1755   */\n  swap2\n  swap1\n  swap2\n  add\n    /* \"#utility.yul\":1757:1759   */\n  0x40\n    /* \"#utility.yul\":1706:1760   */\n  add\n  swap3\n    /* \"#utility.yul\":1383:1766   */\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1771:1898   */\ntag_68:\n    /* \"#utility.yul\":1832:1842   */\n  0x4e487b71\n    /* \"#utility.yul\":1827:1830   */\n  0xe0\n    /* \"#utility.yul\":1823:1843   */\n  shl\n    /* \"#utility.yul\":1820:1821   */\n  0x00\n    /* \"#utility.yul\":1813:1844   */\n  mstore\n    /* \"#utility.yul\":1863:1867   */\n  0x11\n    /* \"#utility.yul\":1860:1861   */\n  0x04\n    /* \"#utility.yul\":1853:1868   */\n  mstore\n    /* \"#utility.yul\":1887:1891   */\n  0x24\n    /* \"#utility.yul\":1884:1885   */\n  0x00\n    /* \"#utility.yul\":1877:1892   */\n  revert\n    /* \"#utility.yul\":1903:2071   */\ntag_41:\n    /* \"#utility.yul\":1943:1950   */\n  0x00\n    /* \"#utility.yul\":2009:2010   */\n  dup2\n    /* \"#utility.yul\":2005:2006   */\n  0x00\n    /* \"#utility.yul\":2001:2007   */\n  not\n    /* \"#utility.yul\":1997:2011   */\n  div\n    /* \"#utility.yul\":1994:1995   */\n  dup4\n    /* \"#utility.yul\":1991:2012   */\n  gt\n    /* \"#utility.yul\":1986:1987   */\n  dup3\n    /* \"#utility.yul\":1979:1988   */\n  iszero\n    /* \"#utility.yul\":1972:1989   */\n  iszero\n    /* \"#utility.yul\":1968:2013   */\n  and\n    /* \"#utility.yul\":1965:2036   */\n  iszero\n  tag_86\n  jumpi\n    /* \"#utility.yul\":2016:2034   */\n  tag_86\n  tag_68\n  jump\t// in\ntag_86:\n  pop\n    /* \"#utility.yul\":2056:2065   */\n  mul\n  swap1\n    /* \"#utility.yul\":1903:2071   */\n  jump\t// out\n    /* \"#utility.yul\":2076:2204   */\ntag_43:\n    /* \"#utility.yul\":2116:2119   */\n  0x00\n    /* \"#utility.yul\":2147:2148   */\n  dup3\n    /* \"#utility.yul\":2143:2149   */\n  not\n    /* \"#utility.yul\":2140:2141   */\n  dup3\n    /* \"#utility.yul\":2137:2150   */\n  gt\n    /* \"#utility.yul\":2134:2173   */\n  iszero\n  tag_89\n  jumpi\n    /* \"#utility.yul\":2153:2171   */\n  tag_89\n  tag_68\n  jump\t// in\ntag_89:\n  pop\n    /* \"#utility.yul\":2189:2198   */\n  add\n  swap1\n    /* \"#utility.yul\":2076:2204   */\n  jump\t// out\n    /* \"#utility.yul\":2209:2336   */\ntag_46:\n    /* \"#utility.yul\":2270:2280   */\n  0x4e487b71\n    /* \"#utility.yul\":2265:2268   */\n  0xe0\n    /* \"#utility.yul\":2261:2281   */\n  shl\n    /* \"#utility.yul\":2258:2259   */\n  0x00\n    /* \"#utility.yul\":2251:2282   */\n  mstore\n    /* \"#utility.yul\":2301:2305   */\n  0x41\n    /* \"#utility.yul\":2298:2299   */\n  0x04\n    /* \"#utility.yul\":2291:2306   */\n  mstore\n    /* \"#utility.yul\":2325:2329   */\n  0x24\n    /* \"#utility.yul\":2322:2323   */\n  0x00\n    /* \"#utility.yul\":2315:2330   */\n  revert\n    /* \"#utility.yul\":2341:2468   */\ntag_50:\n    /* \"#utility.yul\":2402:2412   */\n  0x4e487b71\n    /* \"#utility.yul\":2397:2400   */\n  0xe0\n    /* \"#utility.yul\":2393:2413   */\n  shl\n    /* \"#utility.yul\":2390:2391   */\n  0x00\n    /* \"#utility.yul\":2383:2414   */\n  mstore\n    /* \"#utility.yul\":2433:2437   */\n  0x32\n    /* \"#utility.yul\":2430:2431   */\n  0x04\n    /* \"#utility.yul\":2423:2438   */\n  mstore\n    /* \"#utility.yul\":2457:2461   */\n  0x24\n    /* \"#utility.yul\":2454:2455   */\n  0x00\n    /* \"#utility.yul\":2447:2462   */\n  revert\n    /* \"#utility.yul\":2473:2609   */\ntag_63:\n    /* \"#utility.yul\":2512:2515   */\n  0x00\n    /* \"#utility.yul\":2540:2545   */\n  dup2\n    /* \"#utility.yul\":2530:2569   */\n  tag_94\n  jumpi\n    /* \"#utility.yul\":2549:2567   */\n  tag_94\n  tag_68\n  jump\t// in\ntag_94:\n  pop\n  not(0x00)\n    /* \"#utility.yul\":2585:2603   */\n  add\n  swap1\n    /* \"#utility.yul\":2473:2609   */\n  jump\t// out\n    /* \"#utility.yul\":2614:2970   */\ntag_69:\n    /* \"MintNagaKids.sol\":244:1981  contract MintNagaKids is Whitelist,AccessControl, ReentrancyGuard {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"MintNagaKids.sol\":244:1981  contract MintNagaKids is Whitelist,AccessControl, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x868ff4a2\n      gt\n      tag_22\n      jumpi\n      dup1\n      0xc4e41b22\n      gt\n      tag_23\n      jumpi\n      dup1\n      0xc4e41b22\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xd547741f\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xdd31a7ba\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xfeb2386e\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xff0938a7\n      eq\n      tag_21\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n      dup1\n      0x868ff4a2\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x91d14854\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x94f4504d\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xa217fddf\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xa6f5f014\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup1\n      0x2f2ff15d\n      gt\n      tag_24\n      jumpi\n      dup1\n      0x2f2ff15d\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x36568abe\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x4c0f38c2\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x61aec205\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x7cb64759\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_24:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x248a9ca3\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x27c25c20\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x28438f68\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x2eb4a7ab\n      eq\n      tag_6\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      pop\n      tag_26\n      tag_27\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_27:\n      tag_29\n      jump\t// in\n    tag_26:\n      mload(0x40)\n        /* \"#utility.yul\":470:484   */\n      swap1\n      iszero\n        /* \"#utility.yul\":463:485   */\n      iszero\n        /* \"#utility.yul\":445:486   */\n      dup2\n      mstore\n        /* \"#utility.yul\":433:435   */\n      0x20\n        /* \"#utility.yul\":418:436   */\n      add\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4391:4520  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      pop\n      tag_33\n      tag_34\n      calldatasize\n      0x04\n      tag_35\n      jump\t// in\n    tag_34:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4465:4472  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4503  _roles[role] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4497  _roles */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4503  _roles[role] */\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4513  _roles[role].adminRole */\n      add\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4391:4520  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n      jump\n    tag_33:\n      mload(0x40)\n        /* \"#utility.yul\":828:853   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":816:818   */\n      0x20\n        /* \"#utility.yul\":801:819   */\n      add\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4391:4520  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n      tag_30\n        /* \"#utility.yul\":682:859   */\n      jump\n        /* \"MintNagaKids.sol\":319:355  INagaKidsNFT public nagaKidsContract */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_39\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_39:\n      pop\n      sload(0x03)\n      tag_40\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_40:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1048:1080   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1030:1081   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1018:1020   */\n      0x20\n        /* \"#utility.yul\":1003:1021   */\n      add\n        /* \"MintNagaKids.sol\":319:355  INagaKidsNFT public nagaKidsContract */\n      tag_30\n        /* \"#utility.yul\":864:1087   */\n      jump\n        /* \"MintNagaKids.sol\":969:1090  function changeFreeMintOpen(bool _isOpen) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      pop\n      tag_45\n      tag_46\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_46:\n      tag_48\n      jump\t// in\n    tag_45:\n      stop\n        /* \"Whitelist.sol\":161:186  bytes32 public merkleRoot */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_49\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_49:\n      pop\n      tag_33\n      sload(0x00)\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4770:4915  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      pop\n      tag_45\n      tag_55\n      calldatasize\n      0x04\n      tag_56\n      jump\t// in\n    tag_55:\n      tag_57\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5787:6001  function renounceRole(bytes32 role, address account) public virtual override {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_58\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_58:\n      pop\n      tag_45\n      tag_60\n      calldatasize\n      0x04\n      tag_56\n      jump\t// in\n    tag_60:\n      tag_61\n      jump\t// in\n        /* \"MintNagaKids.sol\":1765:1873  function getMaxSupply() public view returns (uint256) {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_62\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_62:\n      pop\n      tag_33\n      tag_64\n      jump\t// in\n        /* \"MintNagaKids.sol\":687:826  function changeNagaKidsContract(INagaKidsNFT _nagaKids) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n      tag_45\n      tag_69\n      calldatasize\n      0x04\n      tag_70\n      jump\t// in\n    tag_69:\n      tag_71\n      jump\t// in\n        /* \"MintNagaKids.sol\":1102:1224  function setMerkleRoot(bytes32 _merkleRoot) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_72\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_72:\n      pop\n      tag_45\n      tag_74\n      calldatasize\n      0x04\n      tag_35\n      jump\t// in\n    tag_74:\n      tag_75\n      jump\t// in\n        /* \"MintNagaKids.sol\":1232:1637  function whitelistMint(uint256 amount) public payable nonReentrant Paused {... */\n    tag_12:\n      tag_45\n      tag_77\n      calldatasize\n      0x04\n      tag_35\n      jump\t// in\n    tag_77:\n      tag_79\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_80\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_80:\n      pop\n      tag_26\n      tag_82\n      calldatasize\n      0x04\n      tag_56\n      jump\t// in\n    tag_82:\n      tag_83\n      jump\t// in\n        /* \"MintNagaKids.sol\":395:422  bool public isWhitelistOpen */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_85\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_85:\n      pop\n      sload(0x03)\n      tag_26\n      swap1\n      shl(0xa8, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2027:2076  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_89\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_89:\n      pop\n      tag_33\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2027:2076  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n      dup2\n      jump\n        /* \"MintNagaKids.sol\":362:388  bool public isFreeMintOpen */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_93\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_93:\n      pop\n      sload(0x03)\n      tag_26\n      swap1\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\n        /* \"MintNagaKids.sol\":1645:1757  function getTotalSupply() public view returns (uint256) {... */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_97\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_97:\n      pop\n      tag_33\n      tag_99\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5149:5296  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_101\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_101:\n      pop\n      tag_45\n      tag_103\n      calldatasize\n      0x04\n      tag_56\n      jump\t// in\n    tag_103:\n      tag_104\n      jump\t// in\n        /* \"MintNagaKids.sol\":834:961  function changeWhitelistMintOpen(bool _isOpen) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_105\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_105:\n      pop\n      tag_45\n      tag_107\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_107:\n      tag_108\n      jump\t// in\n        /* \"Whitelist.sol\":195:604  function isWhitelist(... */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_109\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_109:\n      pop\n      tag_26\n      tag_111\n      calldatasize\n      0x04\n      tag_112\n      jump\t// in\n    tag_111:\n      tag_113\n      jump\t// in\n        /* \"MintNagaKids.sol\":1881:1978  function isPause() public view returns (bool) {... */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_115\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_115:\n      pop\n      tag_26\n      tag_117\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_29:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2691:2695  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2714:2761  interfaceId == type(IAccessControl).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x7965db0b)\n      eq\n      dup1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2714:2801  interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      tag_122\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      dup4\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2765:2801  super.supportsInterface(interfaceId) */\n    tag_122:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2707:2801  return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      swap3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"MintNagaKids.sol\":969:1090  function changeFreeMintOpen(bool _isOpen) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_126\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_127\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_126:\n      pop\n        /* \"MintNagaKids.sol\":1058:1072  isFreeMintOpen */\n      0x03\n        /* \"MintNagaKids.sol\":1058:1082  isFreeMintOpen = _isOpen */\n      dup1\n      sload\n      swap2\n      iszero\n      iszero\n      shl(0xa0, 0x01)\n      mul\n      not(shl(0xa0, 0xff))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"MintNagaKids.sol\":969:1090  function changeFreeMintOpen(bool _isOpen) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4770:4915  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_57:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4465:4472  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4503  _roles[role] */\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4497  _roles */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4503  _roles[role] */\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4513  _roles[role].adminRole */\n      add\n      sload\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_131\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_127\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_131:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4883:4908  _grantRole(role, account) */\n      tag_133\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4894:4898  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4900:4907  account */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4883:4893  _grantRole */\n      tag_134\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4883:4908  _grantRole(role, account) */\n      jump\t// in\n    tag_133:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4770:4915  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5787:6001  function renounceRole(bytes32 role, address account) public virtual override {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5882:5905  account == _msgSender() */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5882:5905  account == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5874:5957  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n      tag_138\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3587:3589   */\n      0x20\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5874:5957  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3569:3590   */\n      mstore\n        /* \"#utility.yul\":3626:3628   */\n      0x2f\n        /* \"#utility.yul\":3606:3624   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3599:3629   */\n      mstore\n        /* \"#utility.yul\":3665:3699   */\n      0x416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365\n        /* \"#utility.yul\":3645:3663   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3638:3700   */\n      mstore\n      shl(0x89, 0x103937b632b9903337b91039b2b633)\n        /* \"#utility.yul\":3716:3734   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3709:3754   */\n      mstore\n        /* \"#utility.yul\":3771:3790   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5874:5957  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n    tag_139:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_138:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5968:5994  _revokeRole(role, account) */\n      tag_141\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5980:5984  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5986:5993  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5968:5979  _revokeRole */\n      tag_142\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5968:5994  _revokeRole(role, account) */\n      jump\t// in\n    tag_141:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5787:6001  function renounceRole(bytes32 role, address account) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"MintNagaKids.sol\":1765:1873  function getMaxSupply() public view returns (uint256) {... */\n    tag_64:\n        /* \"MintNagaKids.sol\":1837:1853  nagaKidsContract */\n      sload(0x03)\n        /* \"MintNagaKids.sol\":1837:1865  nagaKidsContract.maxSupply() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0xd5abeb01)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"MintNagaKids.sol\":1810:1817  uint256 */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"MintNagaKids.sol\":1837:1853  nagaKidsContract */\n      and\n      swap2\n        /* \"MintNagaKids.sol\":1837:1863  nagaKidsContract.maxSupply */\n      0xd5abeb01\n      swap2\n        /* \"MintNagaKids.sol\":1837:1865  nagaKidsContract.maxSupply() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"MintNagaKids.sol\":1837:1853  nagaKidsContract */\n      dup7\n        /* \"MintNagaKids.sol\":1837:1865  nagaKidsContract.maxSupply() */\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_145\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_145:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_146\n      swap2\n      swap1\n      tag_147\n      jump\t// in\n    tag_146:\n        /* \"MintNagaKids.sol\":1830:1865  return nagaKidsContract.maxSupply() */\n      swap1\n      pop\n        /* \"MintNagaKids.sol\":1765:1873  function getMaxSupply() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"MintNagaKids.sol\":687:826  function changeNagaKidsContract(INagaKidsNFT _nagaKids) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_71:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_149\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_127\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_149:\n      pop\n        /* \"MintNagaKids.sol\":790:806  nagaKidsContract */\n      0x03\n        /* \"MintNagaKids.sol\":790:818  nagaKidsContract = _nagaKids */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"MintNagaKids.sol\":687:826  function changeNagaKidsContract(INagaKidsNFT _nagaKids) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n      jump\t// out\n        /* \"MintNagaKids.sol\":1102:1224  function setMerkleRoot(bytes32 _merkleRoot) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_75:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_152\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_127\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_152:\n      pop\n        /* \"MintNagaKids.sol\":1192:1202  merkleRoot */\n      0x00\n        /* \"MintNagaKids.sol\":1192:1216  merkleRoot = _merkleRoot */\n      sstore\n        /* \"MintNagaKids.sol\":1102:1224  function setMerkleRoot(bytes32 _merkleRoot) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n      jump\t// out\n        /* \"MintNagaKids.sol\":1232:1637  function whitelistMint(uint256 amount) public payable nonReentrant Paused {... */\n    tag_79:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      sub\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_155\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4192:4194   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4174:4195   */\n      mstore\n        /* \"#utility.yul\":4231:4233   */\n      0x1f\n        /* \"#utility.yul\":4211:4229   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4204:4234   */\n      mstore\n        /* \"#utility.yul\":4270:4303   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":4250:4268   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4243:4304   */\n      mstore\n        /* \"#utility.yul\":4321:4339   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_139\n        /* \"#utility.yul\":3990:4345   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_155:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      dup1\n      sstore\n        /* \"MintNagaKids.sol\":617:626  isPause() */\n      tag_159\n        /* \"MintNagaKids.sol\":617:624  isPause */\n      tag_117\n        /* \"MintNagaKids.sol\":617:626  isPause() */\n      jump\t// in\n    tag_159:\n        /* \"MintNagaKids.sol\":617:635  isPause() == false */\n      iszero\n        /* \"MintNagaKids.sol\":609:659  require(isPause() == false,\"NagaKids was Paused.\") */\n      tag_160\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4552:4554   */\n      0x20\n        /* \"MintNagaKids.sol\":609:659  require(isPause() == false,\"NagaKids was Paused.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4534:4555   */\n      mstore\n        /* \"#utility.yul\":4591:4593   */\n      0x14\n        /* \"#utility.yul\":4571:4589   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4564:4594   */\n      mstore\n      shl(0x61, 0x2730b3b0a5b4b239903bb0b9902830bab9b2b217)\n        /* \"#utility.yul\":4610:4628   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4603:4653   */\n      mstore\n        /* \"#utility.yul\":4670:4688   */\n      0x64\n      add\n        /* \"MintNagaKids.sol\":609:659  require(isPause() == false,\"NagaKids was Paused.\") */\n      tag_139\n        /* \"#utility.yul\":4350:4694   */\n      jump\n        /* \"MintNagaKids.sol\":609:659  require(isPause() == false,\"NagaKids was Paused.\") */\n    tag_160:\n        /* \"MintNagaKids.sol\":1325:1340  isWhitelistOpen */\n      sload(0x03)\n      shl(0xa8, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"MintNagaKids.sol\":1325:1348  isWhitelistOpen == true */\n      iszero\n      iszero\n        /* \"MintNagaKids.sol\":1344:1348  true */\n      0x01\n        /* \"MintNagaKids.sol\":1325:1348  isWhitelistOpen == true */\n      eq\n        /* \"MintNagaKids.sol\":1317:1380  require(isWhitelistOpen == true, \"Whitelist not open to mint.\") */\n      tag_164\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4901:4903   */\n      0x20\n        /* \"MintNagaKids.sol\":1317:1380  require(isWhitelistOpen == true, \"Whitelist not open to mint.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4883:4904   */\n      mstore\n        /* \"#utility.yul\":4940:4942   */\n      0x1b\n        /* \"#utility.yul\":4920:4938   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4913:4943   */\n      mstore\n        /* \"#utility.yul\":4979:5008   */\n      0x57686974656c697374206e6f74206f70656e20746f206d696e742e0000000000\n        /* \"#utility.yul\":4959:4977   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4952:5009   */\n      mstore\n        /* \"#utility.yul\":5026:5044   */\n      0x64\n      add\n        /* \"MintNagaKids.sol\":1317:1380  require(isWhitelistOpen == true, \"Whitelist not open to mint.\") */\n      tag_139\n        /* \"#utility.yul\":4699:5050   */\n      jump\n        /* \"MintNagaKids.sol\":1317:1380  require(isWhitelistOpen == true, \"Whitelist not open to mint.\") */\n    tag_164:\n        /* \"MintNagaKids.sol\":1418:1422  1111 */\n      0x0457\n        /* \"MintNagaKids.sol\":1399:1415  getTotalSupply() */\n      tag_167\n        /* \"MintNagaKids.sol\":1399:1413  getTotalSupply */\n      tag_99\n        /* \"MintNagaKids.sol\":1399:1415  getTotalSupply() */\n      jump\t// in\n    tag_167:\n        /* \"MintNagaKids.sol\":1399:1422  getTotalSupply() < 1111 */\n      lt\n        /* \"MintNagaKids.sol\":1391:1438  require(getTotalSupply() < 1111, \"Over supply\") */\n      tag_168\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5257:5259   */\n      0x20\n        /* \"MintNagaKids.sol\":1391:1438  require(getTotalSupply() < 1111, \"Over supply\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5239:5260   */\n      mstore\n        /* \"#utility.yul\":5296:5298   */\n      0x0b\n        /* \"#utility.yul\":5276:5294   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5269:5299   */\n      mstore\n      shl(0xa8, 0x4f76657220737570706c79)\n        /* \"#utility.yul\":5315:5333   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5308:5349   */\n      mstore\n        /* \"#utility.yul\":5366:5384   */\n      0x64\n      add\n        /* \"MintNagaKids.sol\":1391:1438  require(getTotalSupply() < 1111, \"Over supply\") */\n      tag_139\n        /* \"#utility.yul\":5055:5390   */\n      jump\n        /* \"MintNagaKids.sol\":1391:1438  require(getTotalSupply() < 1111, \"Over supply\") */\n    tag_168:\n        /* \"MintNagaKids.sol\":1457:1473  nagaKidsContract */\n      sload(0x03)\n        /* \"MintNagaKids.sol\":1482:1512  nagaKidsContract.MINTER_ROLE() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0xd5391393)\n      dup2\n      mstore\n      swap1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"MintNagaKids.sol\":1457:1473  nagaKidsContract */\n      swap1\n      swap3\n      and\n      swap2\n        /* \"MintNagaKids.sol\":1457:1481  nagaKidsContract.hasRole */\n      0x91d14854\n      swap2\n        /* \"MintNagaKids.sol\":1457:1473  nagaKidsContract */\n      dup4\n      swap2\n        /* \"MintNagaKids.sol\":1482:1510  nagaKidsContract.MINTER_ROLE */\n      0xd5391393\n      swap2\n        /* \"MintNagaKids.sol\":1482:1512  nagaKidsContract.MINTER_ROLE() */\n      0x04\n      dup1\n      dup3\n      add\n      swap3\n      0x20\n      swap3\n      swap1\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"MintNagaKids.sol\":1457:1473  nagaKidsContract */\n      dup7\n        /* \"MintNagaKids.sol\":1482:1512  nagaKidsContract.MINTER_ROLE() */\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_172\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_172:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_173\n      swap2\n      swap1\n      tag_147\n      jump\t// in\n    tag_173:\n        /* \"MintNagaKids.sol\":1457:1527  nagaKidsContract.hasRole(nagaKidsContract.MINTER_ROLE(),address(this)) */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup5\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":5758:5783   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"MintNagaKids.sol\":1521:1525  this */\n      address\n        /* \"#utility.yul\":5799:5817   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5792:5852   */\n      mstore\n        /* \"#utility.yul\":5731:5749   */\n      0x44\n      add\n        /* \"MintNagaKids.sol\":1457:1527  nagaKidsContract.hasRole(nagaKidsContract.MINTER_ROLE(),address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_178\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_178:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_179\n      swap2\n      swap1\n      tag_180\n      jump\t// in\n    tag_179:\n        /* \"MintNagaKids.sol\":1457:1535  nagaKidsContract.hasRole(nagaKidsContract.MINTER_ROLE(),address(this)) == true */\n      iszero\n      iszero\n        /* \"MintNagaKids.sol\":1531:1535  true */\n      0x01\n        /* \"MintNagaKids.sol\":1457:1535  nagaKidsContract.hasRole(nagaKidsContract.MINTER_ROLE(),address(this)) == true */\n      eq\n        /* \"MintNagaKids.sol\":1449:1581  require(nagaKidsContract.hasRole(nagaKidsContract.MINTER_ROLE(),address(this)) == true,\"This Contract not have permission to mint.\") */\n      tag_181\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6315:6317   */\n      0x20\n        /* \"MintNagaKids.sol\":1449:1581  require(nagaKidsContract.hasRole(nagaKidsContract.MINTER_ROLE(),address(this)) == true,\"This Contract not have permission to mint.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6297:6318   */\n      mstore\n        /* \"#utility.yul\":6354:6356   */\n      0x2a\n        /* \"#utility.yul\":6334:6352   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6327:6357   */\n      mstore\n        /* \"#utility.yul\":6393:6427   */\n      0x5468697320436f6e7472616374206e6f742068617665207065726d697373696f\n        /* \"#utility.yul\":6373:6391   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6366:6428   */\n      mstore\n      shl(0xb1, 0x37103a379036b4b73a17)\n        /* \"#utility.yul\":6444:6462   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6437:6477   */\n      mstore\n        /* \"#utility.yul\":6494:6513   */\n      0x84\n      add\n        /* \"MintNagaKids.sol\":1449:1581  require(nagaKidsContract.hasRole(nagaKidsContract.MINTER_ROLE(),address(this)) == true,\"This Contract not have permission to mint.\") */\n      tag_139\n        /* \"#utility.yul\":6113:6519   */\n      jump\n        /* \"MintNagaKids.sol\":1449:1581  require(nagaKidsContract.hasRole(nagaKidsContract.MINTER_ROLE(),address(this)) == true,\"This Contract not have permission to mint.\") */\n    tag_181:\n        /* \"MintNagaKids.sol\":1592:1608  nagaKidsContract */\n      sload(0x03)\n        /* \"MintNagaKids.sol\":1592:1629  nagaKidsContract.safeMint(msg.sender) */\n      mload(0x40)\n      shl(0xe0, 0x40d097c3)\n      dup2\n      mstore\n        /* \"MintNagaKids.sol\":1618:1628  msg.sender */\n      caller\n        /* \"MintNagaKids.sol\":1592:1629  nagaKidsContract.safeMint(msg.sender) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1030:1081   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"MintNagaKids.sol\":1592:1608  nagaKidsContract */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"MintNagaKids.sol\":1592:1617  nagaKidsContract.safeMint */\n      0x40d097c3\n      swap1\n        /* \"#utility.yul\":1003:1021   */\n      0x24\n      add\n        /* \"MintNagaKids.sol\":1592:1629  nagaKidsContract.safeMint(msg.sender) */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_186\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_186:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_188\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_188:\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n      pop\n      pop\n      pop\n        /* \"MintNagaKids.sol\":1232:1637  function whitelistMint(uint256 amount) public payable nonReentrant Paused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n    tag_83:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2981:2985  bool */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n      swap2\n      dup3\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3010  _roles */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3004:3033  _roles[role].members[account] */\n      swap4\n      swap1\n      swap4\n      and\n      dup5\n      mstore\n      swap2\n      swap1\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n      jump\t// out\n        /* \"MintNagaKids.sol\":1645:1757  function getTotalSupply() public view returns (uint256) {... */\n    tag_99:\n        /* \"MintNagaKids.sol\":1719:1735  nagaKidsContract */\n      sload(0x03)\n        /* \"MintNagaKids.sol\":1719:1749  nagaKidsContract.totalSupply() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x18160ddd)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"MintNagaKids.sol\":1692:1699  uint256 */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"MintNagaKids.sol\":1719:1735  nagaKidsContract */\n      and\n      swap2\n        /* \"MintNagaKids.sol\":1719:1747  nagaKidsContract.totalSupply */\n      0x18160ddd\n      swap2\n        /* \"MintNagaKids.sol\":1719:1749  nagaKidsContract.totalSupply() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"MintNagaKids.sol\":1719:1735  nagaKidsContract */\n      dup7\n        /* \"MintNagaKids.sol\":1719:1749  nagaKidsContract.totalSupply() */\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_145\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5149:5296  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_104:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4465:4472  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4503  _roles[role] */\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4497  _roles */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4503  _roles[role] */\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4491:4513  _roles[role].adminRole */\n      add\n      sload\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_196\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_127\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_196:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5263:5289  _revokeRole(role, account) */\n      tag_133\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5275:5279  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5281:5288  account */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5263:5274  _revokeRole */\n      tag_142\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5263:5289  _revokeRole(role, account) */\n      jump\t// in\n        /* \"MintNagaKids.sol\":834:961  function changeWhitelistMintOpen(bool _isOpen) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_108:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_200\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_127\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_200:\n      pop\n        /* \"MintNagaKids.sol\":928:943  isWhitelistOpen */\n      0x03\n        /* \"MintNagaKids.sol\":928:953  isWhitelistOpen = _isOpen */\n      dup1\n      sload\n      swap2\n      iszero\n      iszero\n      shl(0xa8, 0x01)\n      mul\n      not(shl(0xa8, 0xff))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"MintNagaKids.sol\":834:961  function changeWhitelistMintOpen(bool _isOpen) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n      jump\t// out\n        /* \"Whitelist.sol\":195:604  function isWhitelist(... */\n    tag_113:\n        /* \"Whitelist.sol\":335:339  bool */\n      0x00\n        /* \"Whitelist.sol\":356:366  merkleRoot */\n      dup1\n      sload\n        /* \"Whitelist.sol\":356:371  merkleRoot == 0 */\n      dup2\n      sub\n        /* \"Whitelist.sol\":352:412  if (merkleRoot == 0) {... */\n      tag_203\n      jumpi\n      pop\n        /* \"Whitelist.sol\":395:400  false */\n      0x00\n        /* \"Whitelist.sol\":388:400  return false */\n      jump(tag_202)\n        /* \"Whitelist.sol\":352:412  if (merkleRoot == 0) {... */\n    tag_203:\n        /* \"Whitelist.sol\":444:596  MerkleProof.verify(... */\n      tag_204\n        /* \"Whitelist.sol\":481:487  _proof */\n      dup6\n      dup6\n        /* \"Whitelist.sol\":444:596  MerkleProof.verify(... */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      dup3\n      swap1\n      mstore\n      pop\n        /* \"Whitelist.sol\":506:516  merkleRoot */\n      sload\n        /* \"Whitelist.sol\":545:580  abi.encodePacked(_address, _amount) */\n      mload(0x40)\n      not(0xffffffffffffffffffffffff)\n        /* \"#utility.yul\":6909:6911   */\n      0x60\n        /* \"#utility.yul\":6905:6920   */\n      dup12\n      swap1\n      shl\n        /* \"#utility.yul\":6901:6954   */\n      and\n        /* \"Whitelist.sol\":545:580  abi.encodePacked(_address, _amount) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":6889:6955   */\n      mstore\n        /* \"#utility.yul\":6971:6983   */\n      0x34\n      dup2\n      add\n        /* \"#utility.yul\":6964:6992   */\n      dup10\n      swap1\n      mstore\n        /* \"Whitelist.sol\":506:516  merkleRoot */\n      swap1\n      swap4\n      pop\n        /* \"#utility.yul\":7008:7020   */\n      0x54\n      add\n      swap2\n      pop\n        /* \"Whitelist.sol\":545:580  abi.encodePacked(_address, _amount) */\n      tag_205\n      swap1\n      pop\n        /* \"#utility.yul\":6732:7026   */\n      jump\n        /* \"Whitelist.sol\":545:580  abi.encodePacked(_address, _amount) */\n    tag_205:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"Whitelist.sol\":535:581  keccak256(abi.encodePacked(_address, _amount)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"Whitelist.sol\":444:462  MerkleProof.verify */\n      tag_207\n        /* \"Whitelist.sol\":444:596  MerkleProof.verify(... */\n      jump\t// in\n    tag_204:\n        /* \"Whitelist.sol\":424:596  return... */\n      swap1\n      pop\n        /* \"Whitelist.sol\":195:604  function isWhitelist(... */\n    tag_202:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"MintNagaKids.sol\":1881:1978  function isPause() public view returns (bool) {... */\n    tag_117:\n        /* \"MintNagaKids.sol\":1945:1961  nagaKidsContract */\n      sload(0x03)\n        /* \"MintNagaKids.sol\":1945:1970  nagaKidsContract.paused() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x5c975abb)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"MintNagaKids.sol\":1921:1925  bool */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"MintNagaKids.sol\":1945:1961  nagaKidsContract */\n      and\n      swap2\n        /* \"MintNagaKids.sol\":1945:1968  nagaKidsContract.paused */\n      0x5c975abb\n      swap2\n        /* \"MintNagaKids.sol\":1945:1970  nagaKidsContract.paused() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"MintNagaKids.sol\":1945:1961  nagaKidsContract */\n      dup7\n        /* \"MintNagaKids.sol\":1945:1970  nagaKidsContract.paused() */\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_210\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_210:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_146\n      swap2\n      swap1\n      tag_180\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1588:2029  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n    tag_119:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1663:1676  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1688:1707  bytes memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1730  2 * length */\n      tag_213\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1724:1730  length */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1721  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1730  2 * length */\n      tag_214\n      jump\t// in\n    tag_213:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1734  2 * length + 2 */\n      tag_215\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1733:1734  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1734  2 * length + 2 */\n      tag_216\n      jump\t// in\n    tag_215:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1710:1735  new bytes(2 * length + 2) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_218\n      jumpi\n      tag_218\n      tag_219\n      jump\t// in\n    tag_218:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_220\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_220:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1688:1735  bytes memory buffer = new bytes(2 * length + 2) */\n      swap1\n      pop\n      shl(0xfc, 0x03)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1751  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1752:1753  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1754  buffer[0] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_222\n      jumpi\n      tag_222\n      tag_223\n      jump\t// in\n    tag_222:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1760  buffer[0] = \"0\" */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n      shl(0xfb, 0x0f)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1776  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1777:1778  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1779  buffer[1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_225\n      jumpi\n      tag_225\n      tag_223\n      jump\t// in\n    tag_225:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1785  buffer[1] = \"x\" */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1800:1809  uint256 i */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1822  2 * length */\n      tag_229\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1816:1822  length */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1813  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1822  2 * length */\n      tag_214\n      jump\t// in\n    tag_229:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1826  2 * length + 1 */\n      tag_230\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1825:1826  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1826  2 * length + 1 */\n      tag_216\n      jump\t// in\n    tag_230:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1800:1826  uint256 i = 2 * length + 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n    tag_226:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1832:1833  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1828:1829  i */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1828:1833  i > 1 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n      iszero\n      tag_227\n      jumpi\n      shl(0x81, 0x181899199a1a9b1b9c1cb0b131b232b3)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1879:1884  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1887:1890  0xf */\n      0x0f\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1879:1890  value & 0xf */\n      and\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1866:1891  _HEX_SYMBOLS[value & 0xf] */\n      0x10\n      dup2\n      lt\n      tag_232\n      jumpi\n      tag_232\n      tag_223\n      jump\t// in\n    tag_232:\n      byte\n      0xf8\n      shl\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1860  buffer */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1861:1862  i */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1863  buffer[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_234\n      jumpi\n      tag_234\n      tag_223\n      jump\t// in\n    tag_234:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1891  buffer[i] = _HEX_SYMBOLS[value & 0xf] */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1915:1916  4 */\n      0x04\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1905:1916  value >>= 4 */\n      swap5\n      swap1\n      swap5\n      shr\n      swap4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1835:1838  --i */\n      tag_235\n      dup2\n      tag_236\n      jump\t// in\n    tag_235:\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n      jump(tag_226)\n    tag_227:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1944:1954  value == 0 */\n      dup4\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n      tag_237\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8076:8078   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8058:8079   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":8095:8113   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8088:8118   */\n      mstore\n        /* \"#utility.yul\":8154:8188   */\n      0x537472696e67733a20686578206c656e67746820696e73756666696369656e74\n        /* \"#utility.yul\":8134:8152   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8127:8189   */\n      mstore\n        /* \"#utility.yul\":8206:8224   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n      tag_139\n        /* \"#utility.yul\":7874:8230   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n    tag_237:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":2015:2021  buffer */\n      swap4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1588:2029  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3334:3437  function _checkRole(bytes32 role) internal view virtual {... */\n    tag_127:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3400:3430  _checkRole(role, _msgSender()) */\n      tag_242\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3411:3415  role */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3400:3410  _checkRole */\n      tag_244\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3400:3430  _checkRole(role, _msgSender()) */\n      jump\t// in\n    tag_242:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3334:3437  function _checkRole(bytes32 role) internal view virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7244:7477  function _grantRole(bytes32 role, address account) internal virtual {... */\n    tag_134:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7327:7349  hasRole(role, account) */\n      tag_246\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7335:7339  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7341:7348  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7327:7334  hasRole */\n      tag_83\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7327:7349  hasRole(role, account) */\n      jump\t// in\n    tag_246:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7322:7471  if (!hasRole(role, account)) {... */\n      tag_141\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7377  _roles[role] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7397:7401  true */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7377  _roles[role] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7394  _roles[role].members[account] */\n      dup7\n      and\n      dup1\n      dup7\n      mstore\n      swap3\n      mstore\n      dup1\n      dup5\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7401  _roles[role].members[account] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      swap4\n      or\n      swap1\n      swap3\n      sstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n      swap1\n      mload\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7377  _roles[role] */\n      dup6\n      swap2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n      0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n      swap2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7365:7377  _roles[role] */\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n      log4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7244:7477  function _grantRole(bytes32 role, address account) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7602:7836  function _revokeRole(bytes32 role, address account) internal virtual {... */\n    tag_142:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7685:7707  hasRole(role, account) */\n      tag_251\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7693:7697  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7699:7706  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7685:7692  hasRole */\n      tag_83\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7685:7707  hasRole(role, account) */\n      jump\t// in\n    tag_251:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7681:7830  if (hasRole(role, account)) {... */\n      iszero\n      tag_141\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7755:7760  false */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7723:7735  _roles[role] */\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7723:7729  _roles */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7723:7735  _roles[role] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7723:7752  _roles[role].members[account] */\n      dup6\n      and\n      dup1\n      dup6\n      mstore\n      swap3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7723:7760  _roles[role].members[account] = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7779:7819  RoleRevoked(role, account, _msgSender()) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7723:7735  _roles[role] */\n      dup6\n      swap2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7779:7819  RoleRevoked(role, account, _msgSender()) */\n      0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b\n      swap2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7755:7760  false */\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7779:7819  RoleRevoked(role, account, _msgSender()) */\n      log4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7602:7836  function _revokeRole(bytes32 role, address account) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1154:1338  function verify(... */\n    tag_207:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1275:1279  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1327:1331  root */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1323  processProof(proof, leaf) */\n      tag_255\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1311:1316  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1318:1322  leaf */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1310  processProof */\n      tag_256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1323  processProof(proof, leaf) */\n      jump\t// in\n    tag_255:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1331  processProof(proof, leaf) == root */\n      eq\n      swap5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1154:1338  function verify(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3718:4210  function _checkRole(bytes32 role, address account) internal view virtual {... */\n    tag_244:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3806:3828  hasRole(role, account) */\n      tag_258\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3814:3818  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3820:3827  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3806:3813  hasRole */\n      tag_83\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3806:3828  hasRole(role, account) */\n      jump\t// in\n    tag_258:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3801:4204  if (!hasRole(role, account)) {... */\n      tag_141\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n      tag_260\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4017:4024  account */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4027:4029  20 */\n      0x14\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4008  Strings.toHexString */\n      tag_119\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n      jump\t// in\n    tag_260:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4101:4139  Strings.toHexString(uint256(role), 32) */\n      tag_261\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4129:4133  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4136:4138  32 */\n      0x20\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4101:4120  Strings.toHexString */\n      tag_119\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4101:4139  Strings.toHexString(uint256(role), 32) */\n      jump\t// in\n    tag_261:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3896:4161  abi.encodePacked(... */\n      add(0x20, mload(0x40))\n      tag_262\n      swap3\n      swap2\n      swap1\n      tag_263\n      jump\t// in\n    tag_262:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3844:4193  revert(... */\n      dup3\n      mstore\n      tag_139\n      swap2\n      0x04\n      add\n      tag_265\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1689:2351  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n    tag_256:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1772:1779  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1814:1818  leaf */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1772:1779  bytes32 */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1828:2316  for (uint256 i = 0; i < proof.length; i++) {... */\n    tag_267:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1852:1857  proof */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1852:1864  proof.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1848:1849  i */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1848:1864  i < proof.length */\n      lt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1828:2316  for (uint256 i = 0; i < proof.length; i++) {... */\n      iszero\n      tag_268\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1885:1905  bytes32 proofElement */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1908:1913  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1914:1915  i */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1908:1916  proof[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_271\n      jumpi\n      tag_271\n      tag_223\n      jump\t// in\n    tag_271:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1885:1916  bytes32 proofElement = proof[i] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1950:1962  proofElement */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1934:1946  computedHash */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1934:1962  computedHash <= proofElement */\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1930:2306  if (computedHash <= proofElement) {... */\n      tag_272\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2425:2438  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2473:2488  mstore(0x00, a) */\n      dup4\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2508:2512  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2501:2516  mstore(0x20, b) */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2554:2558  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2538:2559  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2060:2117  computedHash = _efficientHash(computedHash, proofElement) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1930:2306  if (computedHash <= proofElement) {... */\n      jump(tag_275)\n    tag_272:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2425:2438  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2473:2488  mstore(0x00, a) */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2508:2512  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2501:2516  mstore(0x20, b) */\n      dup5\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2554:2558  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2538:2559  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2234:2291  computedHash = _efficientHash(proofElement, computedHash) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1930:2306  if (computedHash <= proofElement) {... */\n    tag_275:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1866:1869  i++ */\n      dup1\n      tag_277\n      dup2\n      tag_278\n      jump\t// in\n    tag_277:\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1828:2316  for (uint256 i = 0; i < proof.length; i++) {... */\n      jump(tag_267)\n    tag_268:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2332:2344  computedHash */\n      swap4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1689:2351  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:300   */\n    tag_28:\n        /* \"#utility.yul\":72:78   */\n      0x00\n        /* \"#utility.yul\":125:127   */\n      0x20\n        /* \"#utility.yul\":113:122   */\n      dup3\n        /* \"#utility.yul\":104:111   */\n      dup5\n        /* \"#utility.yul\":100:123   */\n      sub\n        /* \"#utility.yul\":96:128   */\n      slt\n        /* \"#utility.yul\":93:145   */\n      iszero\n      tag_286\n      jumpi\n        /* \"#utility.yul\":141:142   */\n      0x00\n        /* \"#utility.yul\":138:139   */\n      dup1\n        /* \"#utility.yul\":131:143   */\n      revert\n        /* \"#utility.yul\":93:145   */\n    tag_286:\n        /* \"#utility.yul\":167:190   */\n      dup2\n      calldataload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":219:251   */\n      dup2\n      and\n        /* \"#utility.yul\":209:252   */\n      dup2\n      eq\n        /* \"#utility.yul\":199:270   */\n      tag_237\n      jumpi\n        /* \"#utility.yul\":266:267   */\n      0x00\n        /* \"#utility.yul\":263:264   */\n      dup1\n        /* \"#utility.yul\":256:268   */\n      revert\n        /* \"#utility.yul\":497:677   */\n    tag_35:\n        /* \"#utility.yul\":556:562   */\n      0x00\n        /* \"#utility.yul\":609:611   */\n      0x20\n        /* \"#utility.yul\":597:606   */\n      dup3\n        /* \"#utility.yul\":588:595   */\n      dup5\n        /* \"#utility.yul\":584:607   */\n      sub\n        /* \"#utility.yul\":580:612   */\n      slt\n        /* \"#utility.yul\":577:629   */\n      iszero\n      tag_290\n      jumpi\n        /* \"#utility.yul\":625:626   */\n      0x00\n        /* \"#utility.yul\":622:623   */\n      dup1\n        /* \"#utility.yul\":615:627   */\n      revert\n        /* \"#utility.yul\":577:629   */\n    tag_290:\n      pop\n        /* \"#utility.yul\":648:671   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":497:677   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1092:1210   */\n    tag_280:\n        /* \"#utility.yul\":1178:1183   */\n      dup1\n        /* \"#utility.yul\":1171:1184   */\n      iszero\n        /* \"#utility.yul\":1164:1185   */\n      iszero\n        /* \"#utility.yul\":1157:1162   */\n      dup2\n        /* \"#utility.yul\":1154:1186   */\n      eq\n        /* \"#utility.yul\":1144:1204   */\n      tag_242\n      jumpi\n        /* \"#utility.yul\":1200:1201   */\n      0x00\n        /* \"#utility.yul\":1197:1198   */\n      dup1\n        /* \"#utility.yul\":1190:1202   */\n      revert\n        /* \"#utility.yul\":1215:1456   */\n    tag_47:\n        /* \"#utility.yul\":1271:1277   */\n      0x00\n        /* \"#utility.yul\":1324:1326   */\n      0x20\n        /* \"#utility.yul\":1312:1321   */\n      dup3\n        /* \"#utility.yul\":1303:1310   */\n      dup5\n        /* \"#utility.yul\":1299:1322   */\n      sub\n        /* \"#utility.yul\":1295:1327   */\n      slt\n        /* \"#utility.yul\":1292:1344   */\n      iszero\n      tag_296\n      jumpi\n        /* \"#utility.yul\":1340:1341   */\n      0x00\n        /* \"#utility.yul\":1337:1338   */\n      dup1\n        /* \"#utility.yul\":1330:1342   */\n      revert\n        /* \"#utility.yul\":1292:1344   */\n    tag_296:\n        /* \"#utility.yul\":1379:1388   */\n      dup2\n        /* \"#utility.yul\":1366:1389   */\n      calldataload\n        /* \"#utility.yul\":1398:1426   */\n      tag_237\n        /* \"#utility.yul\":1420:1425   */\n      dup2\n        /* \"#utility.yul\":1398:1426   */\n      tag_280\n      jump\t// in\n        /* \"#utility.yul\":1461:1592   */\n    tag_281:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1536:1567   */\n      dup2\n      and\n        /* \"#utility.yul\":1526:1568   */\n      dup2\n      eq\n        /* \"#utility.yul\":1516:1586   */\n      tag_242\n      jumpi\n        /* \"#utility.yul\":1582:1583   */\n      0x00\n        /* \"#utility.yul\":1579:1580   */\n      dup1\n        /* \"#utility.yul\":1572:1584   */\n      revert\n        /* \"#utility.yul\":1597:1912   */\n    tag_56:\n        /* \"#utility.yul\":1665:1671   */\n      0x00\n        /* \"#utility.yul\":1673:1679   */\n      dup1\n        /* \"#utility.yul\":1726:1728   */\n      0x40\n        /* \"#utility.yul\":1714:1723   */\n      dup4\n        /* \"#utility.yul\":1705:1712   */\n      dup6\n        /* \"#utility.yul\":1701:1724   */\n      sub\n        /* \"#utility.yul\":1697:1729   */\n      slt\n        /* \"#utility.yul\":1694:1746   */\n      iszero\n      tag_301\n      jumpi\n        /* \"#utility.yul\":1742:1743   */\n      0x00\n        /* \"#utility.yul\":1739:1740   */\n      dup1\n        /* \"#utility.yul\":1732:1744   */\n      revert\n        /* \"#utility.yul\":1694:1746   */\n    tag_301:\n        /* \"#utility.yul\":1778:1787   */\n      dup3\n        /* \"#utility.yul\":1765:1788   */\n      calldataload\n        /* \"#utility.yul\":1755:1788   */\n      swap2\n      pop\n        /* \"#utility.yul\":1838:1840   */\n      0x20\n        /* \"#utility.yul\":1827:1836   */\n      dup4\n        /* \"#utility.yul\":1823:1841   */\n      add\n        /* \"#utility.yul\":1810:1842   */\n      calldataload\n        /* \"#utility.yul\":1851:1882   */\n      tag_302\n        /* \"#utility.yul\":1876:1881   */\n      dup2\n        /* \"#utility.yul\":1851:1882   */\n      tag_281\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":1901:1906   */\n      dup1\n        /* \"#utility.yul\":1891:1906   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":1597:1912   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2099:2366   */\n    tag_70:\n        /* \"#utility.yul\":2178:2184   */\n      0x00\n        /* \"#utility.yul\":2231:2233   */\n      0x20\n        /* \"#utility.yul\":2219:2228   */\n      dup3\n        /* \"#utility.yul\":2210:2217   */\n      dup5\n        /* \"#utility.yul\":2206:2229   */\n      sub\n        /* \"#utility.yul\":2202:2234   */\n      slt\n        /* \"#utility.yul\":2199:2251   */\n      iszero\n      tag_305\n      jumpi\n        /* \"#utility.yul\":2247:2248   */\n      0x00\n        /* \"#utility.yul\":2244:2245   */\n      dup1\n        /* \"#utility.yul\":2237:2249   */\n      revert\n        /* \"#utility.yul\":2199:2251   */\n    tag_305:\n        /* \"#utility.yul\":2286:2295   */\n      dup2\n        /* \"#utility.yul\":2273:2296   */\n      calldataload\n        /* \"#utility.yul\":2305:2336   */\n      tag_237\n        /* \"#utility.yul\":2330:2335   */\n      dup2\n        /* \"#utility.yul\":2305:2336   */\n      tag_281\n      jump\t// in\n        /* \"#utility.yul\":2556:3380   */\n    tag_112:\n        /* \"#utility.yul\":2660:2666   */\n      0x00\n        /* \"#utility.yul\":2668:2674   */\n      dup1\n        /* \"#utility.yul\":2676:2682   */\n      0x00\n        /* \"#utility.yul\":2684:2690   */\n      dup1\n        /* \"#utility.yul\":2737:2739   */\n      0x60\n        /* \"#utility.yul\":2725:2734   */\n      dup6\n        /* \"#utility.yul\":2716:2723   */\n      dup8\n        /* \"#utility.yul\":2712:2735   */\n      sub\n        /* \"#utility.yul\":2708:2740   */\n      slt\n        /* \"#utility.yul\":2705:2757   */\n      iszero\n      tag_310\n      jumpi\n        /* \"#utility.yul\":2753:2754   */\n      0x00\n        /* \"#utility.yul\":2750:2751   */\n      dup1\n        /* \"#utility.yul\":2743:2755   */\n      revert\n        /* \"#utility.yul\":2705:2757   */\n    tag_310:\n        /* \"#utility.yul\":2793:2802   */\n      dup5\n        /* \"#utility.yul\":2780:2803   */\n      calldataload\n        /* \"#utility.yul\":2822:2840   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2863:2865   */\n      dup1\n        /* \"#utility.yul\":2855:2861   */\n      dup3\n        /* \"#utility.yul\":2852:2866   */\n      gt\n        /* \"#utility.yul\":2849:2883   */\n      iszero\n      tag_311\n      jumpi\n        /* \"#utility.yul\":2879:2880   */\n      0x00\n        /* \"#utility.yul\":2876:2877   */\n      dup1\n        /* \"#utility.yul\":2869:2881   */\n      revert\n        /* \"#utility.yul\":2849:2883   */\n    tag_311:\n        /* \"#utility.yul\":2917:2923   */\n      dup2\n        /* \"#utility.yul\":2906:2915   */\n      dup8\n        /* \"#utility.yul\":2902:2924   */\n      add\n        /* \"#utility.yul\":2892:2924   */\n      swap2\n      pop\n        /* \"#utility.yul\":2962:2969   */\n      dup8\n        /* \"#utility.yul\":2955:2959   */\n      0x1f\n        /* \"#utility.yul\":2951:2953   */\n      dup4\n        /* \"#utility.yul\":2947:2960   */\n      add\n        /* \"#utility.yul\":2943:2970   */\n      slt\n        /* \"#utility.yul\":2933:2988   */\n      tag_312\n      jumpi\n        /* \"#utility.yul\":2984:2985   */\n      0x00\n        /* \"#utility.yul\":2981:2982   */\n      dup1\n        /* \"#utility.yul\":2974:2986   */\n      revert\n        /* \"#utility.yul\":2933:2988   */\n    tag_312:\n        /* \"#utility.yul\":3024:3026   */\n      dup2\n        /* \"#utility.yul\":3011:3027   */\n      calldataload\n        /* \"#utility.yul\":3050:3052   */\n      dup2\n        /* \"#utility.yul\":3042:3048   */\n      dup2\n        /* \"#utility.yul\":3039:3053   */\n      gt\n        /* \"#utility.yul\":3036:3070   */\n      iszero\n      tag_313\n      jumpi\n        /* \"#utility.yul\":3066:3067   */\n      0x00\n        /* \"#utility.yul\":3063:3064   */\n      dup1\n        /* \"#utility.yul\":3056:3068   */\n      revert\n        /* \"#utility.yul\":3036:3070   */\n    tag_313:\n        /* \"#utility.yul\":3121:3128   */\n      dup9\n        /* \"#utility.yul\":3114:3118   */\n      0x20\n        /* \"#utility.yul\":3104:3110   */\n      dup3\n        /* \"#utility.yul\":3101:3102   */\n      0x05\n        /* \"#utility.yul\":3097:3111   */\n      shl\n        /* \"#utility.yul\":3093:3095   */\n      dup6\n        /* \"#utility.yul\":3089:3112   */\n      add\n        /* \"#utility.yul\":3085:3119   */\n      add\n        /* \"#utility.yul\":3082:3129   */\n      gt\n        /* \"#utility.yul\":3079:3146   */\n      iszero\n      tag_314\n      jumpi\n        /* \"#utility.yul\":3142:3143   */\n      0x00\n        /* \"#utility.yul\":3139:3140   */\n      dup1\n        /* \"#utility.yul\":3132:3144   */\n      revert\n        /* \"#utility.yul\":3079:3146   */\n    tag_314:\n        /* \"#utility.yul\":3173:3177   */\n      0x20\n        /* \"#utility.yul\":3165:3178   */\n      swap3\n      dup4\n      add\n      swap7\n      pop\n        /* \"#utility.yul\":3197:3203   */\n      swap5\n      pop\n      pop\n        /* \"#utility.yul\":3238:3258   */\n      dup6\n      add\n        /* \"#utility.yul\":3225:3259   */\n      calldataload\n        /* \"#utility.yul\":3268:3299   */\n      tag_315\n        /* \"#utility.yul\":3225:3259   */\n      dup2\n        /* \"#utility.yul\":3268:3299   */\n      tag_281\n      jump\t// in\n    tag_315:\n        /* \"#utility.yul\":2556:3380   */\n      swap4\n      swap7\n      swap3\n      swap6\n      pop\n        /* \"#utility.yul\":3318:3323   */\n      swap3\n      swap4\n        /* \"#utility.yul\":3370:3372   */\n      0x40\n        /* \"#utility.yul\":3355:3373   */\n      add\n        /* \"#utility.yul\":3342:3374   */\n      calldataload\n      swap3\n      pop\n      pop\n        /* \"#utility.yul\":2556:3380   */\n      jump\t// out\n        /* \"#utility.yul\":3801:3985   */\n    tag_147:\n        /* \"#utility.yul\":3871:3877   */\n      0x00\n        /* \"#utility.yul\":3924:3926   */\n      0x20\n        /* \"#utility.yul\":3912:3921   */\n      dup3\n        /* \"#utility.yul\":3903:3910   */\n      dup5\n        /* \"#utility.yul\":3899:3922   */\n      sub\n        /* \"#utility.yul\":3895:3927   */\n      slt\n        /* \"#utility.yul\":3892:3944   */\n      iszero\n      tag_318\n      jumpi\n        /* \"#utility.yul\":3940:3941   */\n      0x00\n        /* \"#utility.yul\":3937:3938   */\n      dup1\n        /* \"#utility.yul\":3930:3942   */\n      revert\n        /* \"#utility.yul\":3892:3944   */\n    tag_318:\n      pop\n        /* \"#utility.yul\":3963:3979   */\n      mload\n      swap2\n        /* \"#utility.yul\":3801:3985   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5863:6108   */\n    tag_180:\n        /* \"#utility.yul\":5930:5936   */\n      0x00\n        /* \"#utility.yul\":5983:5985   */\n      0x20\n        /* \"#utility.yul\":5971:5980   */\n      dup3\n        /* \"#utility.yul\":5962:5969   */\n      dup5\n        /* \"#utility.yul\":5958:5981   */\n      sub\n        /* \"#utility.yul\":5954:5986   */\n      slt\n        /* \"#utility.yul\":5951:6003   */\n      iszero\n      tag_327\n      jumpi\n        /* \"#utility.yul\":5999:6000   */\n      0x00\n        /* \"#utility.yul\":5996:5997   */\n      dup1\n        /* \"#utility.yul\":5989:6001   */\n      revert\n        /* \"#utility.yul\":5951:6003   */\n    tag_327:\n        /* \"#utility.yul\":6031:6040   */\n      dup2\n        /* \"#utility.yul\":6025:6041   */\n      mload\n        /* \"#utility.yul\":6050:6078   */\n      tag_237\n        /* \"#utility.yul\":6072:6077   */\n      dup2\n        /* \"#utility.yul\":6050:6078   */\n      tag_280\n      jump\t// in\n        /* \"#utility.yul\":7031:7158   */\n    tag_282:\n        /* \"#utility.yul\":7092:7102   */\n      0x4e487b71\n        /* \"#utility.yul\":7087:7090   */\n      0xe0\n        /* \"#utility.yul\":7083:7103   */\n      shl\n        /* \"#utility.yul\":7080:7081   */\n      0x00\n        /* \"#utility.yul\":7073:7104   */\n      mstore\n        /* \"#utility.yul\":7123:7127   */\n      0x11\n        /* \"#utility.yul\":7120:7121   */\n      0x04\n        /* \"#utility.yul\":7113:7128   */\n      mstore\n        /* \"#utility.yul\":7147:7151   */\n      0x24\n        /* \"#utility.yul\":7144:7145   */\n      0x00\n        /* \"#utility.yul\":7137:7152   */\n      revert\n        /* \"#utility.yul\":7163:7331   */\n    tag_214:\n        /* \"#utility.yul\":7203:7210   */\n      0x00\n        /* \"#utility.yul\":7269:7270   */\n      dup2\n        /* \"#utility.yul\":7265:7266   */\n      0x00\n        /* \"#utility.yul\":7261:7267   */\n      not\n        /* \"#utility.yul\":7257:7271   */\n      div\n        /* \"#utility.yul\":7254:7255   */\n      dup4\n        /* \"#utility.yul\":7251:7272   */\n      gt\n        /* \"#utility.yul\":7246:7247   */\n      dup3\n        /* \"#utility.yul\":7239:7248   */\n      iszero\n        /* \"#utility.yul\":7232:7249   */\n      iszero\n        /* \"#utility.yul\":7228:7273   */\n      and\n        /* \"#utility.yul\":7225:7296   */\n      iszero\n      tag_335\n      jumpi\n        /* \"#utility.yul\":7276:7294   */\n      tag_335\n      tag_282\n      jump\t// in\n    tag_335:\n      pop\n        /* \"#utility.yul\":7316:7325   */\n      mul\n      swap1\n        /* \"#utility.yul\":7163:7331   */\n      jump\t// out\n        /* \"#utility.yul\":7336:7464   */\n    tag_216:\n        /* \"#utility.yul\":7376:7379   */\n      0x00\n        /* \"#utility.yul\":7407:7408   */\n      dup3\n        /* \"#utility.yul\":7403:7409   */\n      not\n        /* \"#utility.yul\":7400:7401   */\n      dup3\n        /* \"#utility.yul\":7397:7410   */\n      gt\n        /* \"#utility.yul\":7394:7433   */\n      iszero\n      tag_338\n      jumpi\n        /* \"#utility.yul\":7413:7431   */\n      tag_338\n      tag_282\n      jump\t// in\n    tag_338:\n      pop\n        /* \"#utility.yul\":7449:7458   */\n      add\n      swap1\n        /* \"#utility.yul\":7336:7464   */\n      jump\t// out\n        /* \"#utility.yul\":7469:7596   */\n    tag_219:\n        /* \"#utility.yul\":7530:7540   */\n      0x4e487b71\n        /* \"#utility.yul\":7525:7528   */\n      0xe0\n        /* \"#utility.yul\":7521:7541   */\n      shl\n        /* \"#utility.yul\":7518:7519   */\n      0x00\n        /* \"#utility.yul\":7511:7542   */\n      mstore\n        /* \"#utility.yul\":7561:7565   */\n      0x41\n        /* \"#utility.yul\":7558:7559   */\n      0x04\n        /* \"#utility.yul\":7551:7566   */\n      mstore\n        /* \"#utility.yul\":7585:7589   */\n      0x24\n        /* \"#utility.yul\":7582:7583   */\n      0x00\n        /* \"#utility.yul\":7575:7590   */\n      revert\n        /* \"#utility.yul\":7601:7728   */\n    tag_223:\n        /* \"#utility.yul\":7662:7672   */\n      0x4e487b71\n        /* \"#utility.yul\":7657:7660   */\n      0xe0\n        /* \"#utility.yul\":7653:7673   */\n      shl\n        /* \"#utility.yul\":7650:7651   */\n      0x00\n        /* \"#utility.yul\":7643:7674   */\n      mstore\n        /* \"#utility.yul\":7693:7697   */\n      0x32\n        /* \"#utility.yul\":7690:7691   */\n      0x04\n        /* \"#utility.yul\":7683:7698   */\n      mstore\n        /* \"#utility.yul\":7717:7721   */\n      0x24\n        /* \"#utility.yul\":7714:7715   */\n      0x00\n        /* \"#utility.yul\":7707:7722   */\n      revert\n        /* \"#utility.yul\":7733:7869   */\n    tag_236:\n        /* \"#utility.yul\":7772:7775   */\n      0x00\n        /* \"#utility.yul\":7800:7805   */\n      dup2\n        /* \"#utility.yul\":7790:7829   */\n      tag_343\n      jumpi\n        /* \"#utility.yul\":7809:7827   */\n      tag_343\n      tag_282\n      jump\t// in\n    tag_343:\n      pop\n      not(0x00)\n        /* \"#utility.yul\":7845:7863   */\n      add\n      swap1\n        /* \"#utility.yul\":7733:7869   */\n      jump\t// out\n        /* \"#utility.yul\":8235:8493   */\n    tag_283:\n        /* \"#utility.yul\":8307:8308   */\n      0x00\n        /* \"#utility.yul\":8317:8430   */\n    tag_346:\n        /* \"#utility.yul\":8331:8337   */\n      dup4\n        /* \"#utility.yul\":8328:8329   */\n      dup2\n        /* \"#utility.yul\":8325:8338   */\n      lt\n        /* \"#utility.yul\":8317:8430   */\n      iszero\n      tag_348\n      jumpi\n        /* \"#utility.yul\":8407:8418   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":8401:8419   */\n      mload\n        /* \"#utility.yul\":8388:8399   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":8381:8420   */\n      mstore\n        /* \"#utility.yul\":8353:8355   */\n      0x20\n        /* \"#utility.yul\":8346:8356   */\n      add\n        /* \"#utility.yul\":8317:8430   */\n      jump(tag_346)\n    tag_348:\n        /* \"#utility.yul\":8448:8454   */\n      dup4\n        /* \"#utility.yul\":8445:8446   */\n      dup2\n        /* \"#utility.yul\":8442:8455   */\n      gt\n        /* \"#utility.yul\":8439:8487   */\n      iszero\n      tag_349\n      jumpi\n        /* \"#utility.yul\":8483:8484   */\n      0x00\n        /* \"#utility.yul\":8474:8480   */\n      dup5\n        /* \"#utility.yul\":8469:8472   */\n      dup5\n        /* \"#utility.yul\":8465:8481   */\n      add\n        /* \"#utility.yul\":8458:8485   */\n      mstore\n        /* \"#utility.yul\":8439:8487   */\n    tag_349:\n      pop\n        /* \"#utility.yul\":8235:8493   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8498:9284   */\n    tag_263:\n        /* \"#utility.yul\":8909:8934   */\n      0x416363657373436f6e74726f6c3a206163636f756e7420000000000000000000\n        /* \"#utility.yul\":8904:8907   */\n      dup2\n        /* \"#utility.yul\":8897:8935   */\n      mstore\n        /* \"#utility.yul\":8879:8882   */\n      0x00\n        /* \"#utility.yul\":8964:8970   */\n      dup4\n        /* \"#utility.yul\":8958:8971   */\n      mload\n        /* \"#utility.yul\":8980:9042   */\n      tag_351\n        /* \"#utility.yul\":9035:9041   */\n      dup2\n        /* \"#utility.yul\":9030:9032   */\n      0x17\n        /* \"#utility.yul\":9025:9028   */\n      dup6\n        /* \"#utility.yul\":9021:9033   */\n      add\n        /* \"#utility.yul\":9014:9018   */\n      0x20\n        /* \"#utility.yul\":9006:9012   */\n      dup9\n        /* \"#utility.yul\":9002:9019   */\n      add\n        /* \"#utility.yul\":8980:9042   */\n      tag_283\n      jump\t// in\n    tag_351:\n      shl(0x7d, 0x01034b99036b4b9b9b4b733903937b6329)\n        /* \"#utility.yul\":9101:9103   */\n      0x17\n        /* \"#utility.yul\":9061:9077   */\n      swap2\n      dup5\n      add\n        /* \"#utility.yul\":9093:9104   */\n      swap2\n      dup3\n      add\n        /* \"#utility.yul\":9086:9126   */\n      mstore\n        /* \"#utility.yul\":9151:9164   */\n      dup4\n      mload\n        /* \"#utility.yul\":9173:9236   */\n      tag_352\n        /* \"#utility.yul\":9151:9164   */\n      dup2\n        /* \"#utility.yul\":9222:9224   */\n      0x28\n        /* \"#utility.yul\":9214:9225   */\n      dup5\n      add\n        /* \"#utility.yul\":9207:9211   */\n      0x20\n        /* \"#utility.yul\":9195:9212   */\n      dup9\n      add\n        /* \"#utility.yul\":9173:9236   */\n      tag_283\n      jump\t// in\n    tag_352:\n        /* \"#utility.yul\":9256:9273   */\n      add\n        /* \"#utility.yul\":9275:9277   */\n      0x28\n        /* \"#utility.yul\":9252:9278   */\n      add\n      swap5\n        /* \"#utility.yul\":8498:9284   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9289:9672   */\n    tag_265:\n        /* \"#utility.yul\":9438:9440   */\n      0x20\n        /* \"#utility.yul\":9427:9436   */\n      dup2\n        /* \"#utility.yul\":9420:9441   */\n      mstore\n        /* \"#utility.yul\":9401:9405   */\n      0x00\n        /* \"#utility.yul\":9470:9476   */\n      dup3\n        /* \"#utility.yul\":9464:9477   */\n      mload\n        /* \"#utility.yul\":9513:9519   */\n      dup1\n        /* \"#utility.yul\":9508:9510   */\n      0x20\n        /* \"#utility.yul\":9497:9506   */\n      dup5\n        /* \"#utility.yul\":9493:9511   */\n      add\n        /* \"#utility.yul\":9486:9520   */\n      mstore\n        /* \"#utility.yul\":9529:9595   */\n      tag_354\n        /* \"#utility.yul\":9588:9594   */\n      dup2\n        /* \"#utility.yul\":9583:9585   */\n      0x40\n        /* \"#utility.yul\":9572:9581   */\n      dup6\n        /* \"#utility.yul\":9568:9586   */\n      add\n        /* \"#utility.yul\":9563:9565   */\n      0x20\n        /* \"#utility.yul\":9555:9561   */\n      dup8\n        /* \"#utility.yul\":9551:9566   */\n      add\n        /* \"#utility.yul\":9529:9595   */\n      tag_283\n      jump\t// in\n    tag_354:\n        /* \"#utility.yul\":9656:9658   */\n      0x1f\n        /* \"#utility.yul\":9635:9650   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":9631:9660   */\n      and\n        /* \"#utility.yul\":9616:9661   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":9663:9665   */\n      0x40\n        /* \"#utility.yul\":9612:9666   */\n      add\n      swap3\n        /* \"#utility.yul\":9289:9672   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9677:9812   */\n    tag_278:\n        /* \"#utility.yul\":9716:9719   */\n      0x00\n        /* \"#utility.yul\":9737:9754   */\n      0x01\n      dup3\n      add\n        /* \"#utility.yul\":9734:9777   */\n      tag_357\n      jumpi\n        /* \"#utility.yul\":9757:9775   */\n      tag_357\n      tag_282\n      jump\t// in\n    tag_357:\n      pop\n        /* \"#utility.yul\":9804:9805   */\n      0x01\n        /* \"#utility.yul\":9793:9806   */\n      add\n      swap1\n        /* \"#utility.yul\":9677:9812   */\n      jump\t// out\n\n    auxdata: 0xa264697066735822122083a54643ee3298e758f18ed76080bdc09c2eb8fcd6487e36c7451ab4543f7c0e64736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_411": {
									"entryPoint": null,
									"id": 411,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_994": {
									"entryPoint": null,
									"id": 994,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_checkRole_135": {
									"entryPoint": 288,
									"id": 135,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkRole_92": {
									"entryPoint": 273,
									"id": 92,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_grantRole_287": {
									"entryPoint": 88,
									"id": 287,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_560": {
									"entryPoint": null,
									"id": 560,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@changeNagaKidsContract_1020": {
									"entryPoint": 225,
									"id": 1020,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@hasRole_79": {
									"entryPoint": null,
									"id": 79,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toHexString_772": {
									"entryPoint": 454,
									"id": 772,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_contract$_INagaKidsNFT_$958_fromMemory": {
									"entryPoint": 902,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 996,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1117,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1226,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1192,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 945,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"decrement_t_uint256": {
									"entryPoint": 1297,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1170,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 1275,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1253,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2972:12",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:12",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "115:209:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "161:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "170:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "173:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "163:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "163:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "163:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "136:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "145:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "132:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "132:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "157:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "128:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "128:32:12"
															},
															"nodeType": "YulIf",
															"src": "125:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "186:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "205:9:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "199:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "199:16:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "190:5:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "278:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "287:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "290:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "280:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "280:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "280:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "237:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "248:5:12"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "263:3:12",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "268:1:12",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "259:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "259:11:12"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "272:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "255:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "255:19:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "244:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "244:31:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "234:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "234:42:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "227:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "227:50:12"
															},
															"nodeType": "YulIf",
															"src": "224:70:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "303:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "313:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "303:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_INagaKidsNFT_$958_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "81:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "92:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "104:6:12",
														"type": ""
													}
												],
												"src": "14:310:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "382:205:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "392:10:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "401:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "396:1:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "461:63:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "486:3:12"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "491:1:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "482:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "482:11:12"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "505:3:12"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "510:1:12"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "501:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "501:11:12"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "495:5:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "495:18:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "475:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "475:39:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "475:39:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "422:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "425:6:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "419:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "419:13:12"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "433:19:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "435:15:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "444:1:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "447:2:12",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "440:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "440:10:12"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "435:1:12"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "415:3:12",
																"statements": []
															},
															"src": "411:113:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "550:31:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "563:3:12"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "568:6:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "559:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "559:16:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "577:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "552:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "552:27:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "552:27:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "539:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "542:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "536:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "536:13:12"
															},
															"nodeType": "YulIf",
															"src": "533:48:12"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "360:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "365:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "370:6:12",
														"type": ""
													}
												],
												"src": "329:258:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "981:397:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "998:3:12"
																	},
																	{
																		"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1003:25:12",
																		"type": "",
																		"value": "AccessControl: account "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "991:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "991:38:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "991:38:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1038:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1058:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1052:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1052:13:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1042:6:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1100:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1108:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1096:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1096:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1119:3:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1124:2:12",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1115:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:12:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1129:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "1074:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1074:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1074:62:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1145:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1159:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1164:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1155:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1155:16:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1149:2:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1191:2:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1195:2:12",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1187:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1187:11:12"
																	},
																	{
																		"hexValue": "206973206d697373696e6720726f6c6520",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1200:19:12",
																		"type": "",
																		"value": " is missing role "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1180:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1180:40:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1180:40:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1229:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1251:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1245:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1245:13:12"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "1233:8:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "1293:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1301:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1289:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1289:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1312:2:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1316:2:12",
																				"type": "",
																				"value": "40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1308:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1308:11:12"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "1321:8:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "1267:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1267:63:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1267:63:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1339:33:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1354:2:12"
																			},
																			{
																				"name": "length_1",
																				"nodeType": "YulIdentifier",
																				"src": "1358:8:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1350:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1350:17:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1369:2:12",
																		"type": "",
																		"value": "40"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1346:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1346:26:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1339:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "949:3:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "954:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "962:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "973:3:12",
														"type": ""
													}
												],
												"src": "592:786:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1504:262:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1521:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1532:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1514:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1514:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1514:21:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1544:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1564:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1558:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1558:13:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1548:6:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1591:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1602:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1587:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1587:18:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1607:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1580:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1580:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1580:34:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1649:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1657:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1645:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1645:15:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1666:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1677:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1662:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1662:18:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1682:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "1623:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1623:66:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1623:66:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1698:62:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1714:9:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1733:6:12"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1741:2:12",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1729:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1729:15:12"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1750:2:12",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1746:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1746:7:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1725:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1725:29:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1710:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1710:45:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1757:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1706:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1706:54:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1698:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1473:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1484:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1495:4:12",
														"type": ""
													}
												],
												"src": "1383:383:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1803:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1820:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1827:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1832:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1823:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1823:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1813:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1813:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1813:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1860:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1863:4:12",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1853:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1853:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1853:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1884:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1887:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1877:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1877:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1877:15:12"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "1771:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1955:116:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2014:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2016:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2016:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2016:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "1986:1:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1979:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1979:9:12"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1972:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1972:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "1994:1:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2005:1:12",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2001:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2001:6:12"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2009:1:12"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "1997:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1997:14:12"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1991:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1991:21:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1968:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1968:45:12"
															},
															"nodeType": "YulIf",
															"src": "1965:71:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2045:20:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2060:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2063:1:12"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2056:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2056:9:12"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "2045:7:12"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "1934:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "1937:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "1943:7:12",
														"type": ""
													}
												],
												"src": "1903:168:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2124:80:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2151:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2153:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2153:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2153:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2140:1:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2147:1:12"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2143:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2143:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2137:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2137:13:12"
															},
															"nodeType": "YulIf",
															"src": "2134:39:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2182:16:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2193:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2196:1:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2189:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2189:9:12"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2182:3:12"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2107:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2110:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2116:3:12",
														"type": ""
													}
												],
												"src": "2076:128:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2241:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2258:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2265:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2270:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2261:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2261:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2251:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2251:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2251:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2298:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2301:4:12",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2291:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2291:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2291:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2322:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2325:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2315:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2315:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2315:15:12"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "2209:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2373:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2390:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2397:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2402:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2393:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2393:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2383:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2383:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2383:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2430:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2433:4:12",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2423:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2423:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2423:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2454:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2457:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2447:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2447:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2447:15:12"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "2341:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2520:89:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2547:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2549:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2549:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2549:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2540:5:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2533:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2533:13:12"
															},
															"nodeType": "YulIf",
															"src": "2530:39:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2578:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2589:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2600:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2596:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2596:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2585:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2585:18:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "2578:3:12"
																}
															]
														}
													]
												},
												"name": "decrement_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2502:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "2512:3:12",
														"type": ""
													}
												],
												"src": "2473:136:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2788:182:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2805:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2816:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2798:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2798:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2798:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2839:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2850:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2835:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2835:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2855:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2828:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2828:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2828:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2878:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2889:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2874:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2874:18:12"
																	},
																	{
																		"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2894:34:12",
																		"type": "",
																		"value": "Strings: hex length insufficient"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2867:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2867:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2867:62:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2938:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2950:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2961:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2946:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2946:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2938:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2765:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2779:4:12",
														"type": ""
													}
												],
												"src": "2614:356:12"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_INagaKidsNFT_$958_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n}",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b506040516200162038038062001620833981016040819052620000349162000386565b60016002556200004660003362000058565b6200005181620000e1565b506200052b565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620000dd5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45b5050565b6000620000ee8162000111565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b6200011d813362000120565b50565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620000dd576200016c816001600160a01b03166014620001c660201b62000a2c1760201c565b6200018283602062000a2c620001c6821b17811c565b60405160200162000195929190620003e4565b60408051601f198184030181529082905262461bcd60e51b8252620001bd916004016200045d565b60405180910390fd5b60606000620001d7836002620004a8565b620001e4906002620004ca565b6001600160401b03811115620001fe57620001fe620004e5565b6040519080825280601f01601f19166020018201604052801562000229576020820181803683370190505b509050600360fc1b81600081518110620002475762000247620004fb565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620002795762000279620004fb565b60200101906001600160f81b031916908160001a90535060006200029f846002620004a8565b620002ac906001620004ca565b90505b60018111156200032e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620002e457620002e4620004fb565b1a60f81b828281518110620002fd57620002fd620004fb565b60200101906001600160f81b031916908160001a90535060049490941c93620003268162000511565b9050620002af565b5083156200037f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620001bd565b9392505050565b6000602082840312156200039957600080fd5b81516001600160a01b03811681146200037f57600080fd5b60005b83811015620003ce578181015183820152602001620003b4565b83811115620003de576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516200041e816017850160208801620003b1565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162000451816028840160208801620003b1565b01602801949350505050565b60208152600082518060208401526200047e816040850160208701620003b1565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615620004c557620004c562000492565b500290565b60008219821115620004e057620004e062000492565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008162000523576200052362000492565b506000190190565b6110e5806200053b6000396000f3fe60806040526004361061011f5760003560e01c8063868ff4a2116100a0578063c4e41b2211610064578063c4e41b2214610327578063d547741f1461033c578063dd31a7ba1461035c578063feb2386e1461037c578063ff0938a71461039c57600080fd5b8063868ff4a21461029d57806391d14854146102b057806394f4504d146102d0578063a217fddf146102f1578063a6f5f0141461030657600080fd5b80632f2ff15d116100e75780632f2ff15d1461020857806336568abe146102285780634c0f38c21461024857806361aec2051461025d5780637cb647591461027d57600080fd5b806301ffc9a714610124578063248a9ca31461015957806327c25c201461019857806328438f68146101d05780632eb4a7ab146101f2575b600080fd5b34801561013057600080fd5b5061014461013f366004610d9c565b6103b1565b60405190151581526020015b60405180910390f35b34801561016557600080fd5b5061018a610174366004610dc6565b6000908152600160208190526040909120015490565b604051908152602001610150565b3480156101a457600080fd5b506003546101b8906001600160a01b031681565b6040516001600160a01b039091168152602001610150565b3480156101dc57600080fd5b506101f06101eb366004610ded565b6103e8565b005b3480156101fe57600080fd5b5061018a60005481565b34801561021457600080fd5b506101f0610223366004610e1f565b610412565b34801561023457600080fd5b506101f0610243366004610e1f565b61043d565b34801561025457600080fd5b5061018a6104c0565b34801561026957600080fd5b506101f0610278366004610e4f565b610533565b34801561028957600080fd5b506101f0610298366004610dc6565b610561565b6101f06102ab366004610dc6565b610572565b3480156102bc57600080fd5b506101446102cb366004610e1f565b61085c565b3480156102dc57600080fd5b5060035461014490600160a81b900460ff1681565b3480156102fd57600080fd5b5061018a600081565b34801561031257600080fd5b5060035461014490600160a01b900460ff1681565b34801561033357600080fd5b5061018a610887565b34801561034857600080fd5b506101f0610357366004610e1f565b6108d1565b34801561036857600080fd5b506101f0610377366004610ded565b6108f7565b34801561038857600080fd5b50610144610397366004610e6c565b610921565b3480156103a857600080fd5b506101446109be565b60006001600160e01b03198216637965db0b60e01b14806103e257506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006103f381610bcf565b5060038054911515600160a01b0260ff60a01b19909216919091179055565b6000828152600160208190526040909120015461042e81610bcf565b6104388383610bdc565b505050565b6001600160a01b03811633146104b25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104bc8282610c47565b5050565b6003546040805163d5abeb0160e01b815290516000926001600160a01b03169163d5abeb019160048083019260209291908290030181865afa15801561050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052e9190610ef8565b905090565b600061053e81610bcf565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b600061056c81610bcf565b50600055565b60028054036105c35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104a9565b600280556105cf6109be565b156106135760405162461bcd60e51b81526020600482015260146024820152732730b3b0a5b4b239903bb0b9902830bab9b2b21760611b60448201526064016104a9565b600354600160a81b900460ff1615156001146106715760405162461bcd60e51b815260206004820152601b60248201527f57686974656c697374206e6f74206f70656e20746f206d696e742e000000000060448201526064016104a9565b61045761067c610887565b106106b75760405162461bcd60e51b815260206004820152600b60248201526a4f76657220737570706c7960a81b60448201526064016104a9565b6003546040805163d539139360e01b815290516001600160a01b03909216916391d1485491839163d5391393916004808201926020929091908290030181865afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190610ef8565b6040516001600160e01b031960e084901b1681526004810191909152306024820152604401602060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190610f11565b15156001146107f75760405162461bcd60e51b815260206004820152602a60248201527f5468697320436f6e7472616374206e6f742068617665207065726d697373696f60448201526937103a379036b4b73a1760b11b60648201526084016104a9565b6003546040516340d097c360e01b81523360048201526001600160a01b03909116906340d097c390602401600060405180830381600087803b15801561083c57600080fd5b505af1158015610850573d6000803e3d6000fd5b50506001600255505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801561050a573d6000803e3d6000fd5b600082815260016020819052604090912001546108ed81610bcf565b6104388383610c47565b600061090281610bcf565b5060038054911515600160a81b0260ff60a81b19909216919091179055565b600080548103610933575060006109b6565b6109b38585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250546040516bffffffffffffffffffffffff1960608b901b1660208201526034810189905290935060540191506109989050565b60405160208183030381529060405280519060200120610cae565b90505b949350505050565b60035460408051635c975abb60e01b815290516000926001600160a01b031691635c975abb9160048083019260209291908290030181865afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052e9190610f11565b60606000610a3b836002610f44565b610a46906002610f63565b67ffffffffffffffff811115610a5e57610a5e610f7b565b6040519080825280601f01601f191660200182016040528015610a88576020820181803683370190505b509050600360fc1b81600081518110610aa357610aa3610f91565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610ad257610ad2610f91565b60200101906001600160f81b031916908160001a9053506000610af6846002610f44565b610b01906001610f63565b90505b6001811115610b79576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610b3557610b35610f91565b1a60f81b828281518110610b4b57610b4b610f91565b60200101906001600160f81b031916908160001a90535060049490941c93610b7281610fa7565b9050610b04565b508315610bc85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104a9565b9392505050565b610bd98133610cc4565b50565b610be6828261085c565b6104bc5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b610c51828261085c565b156104bc5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600082610cbb8584610d28565b14949350505050565b610cce828261085c565b6104bc57610ce6816001600160a01b03166014610a2c565b610cf1836020610a2c565b604051602001610d02929190610fee565b60408051601f198184030181529082905262461bcd60e51b82526104a991600401611063565b600081815b8451811015610d94576000858281518110610d4a57610d4a610f91565b60200260200101519050808311610d705760008381526020829052604090209250610d81565b600081815260208490526040902092505b5080610d8c81611096565b915050610d2d565b509392505050565b600060208284031215610dae57600080fd5b81356001600160e01b031981168114610bc857600080fd5b600060208284031215610dd857600080fd5b5035919050565b8015158114610bd957600080fd5b600060208284031215610dff57600080fd5b8135610bc881610ddf565b6001600160a01b0381168114610bd957600080fd5b60008060408385031215610e3257600080fd5b823591506020830135610e4481610e0a565b809150509250929050565b600060208284031215610e6157600080fd5b8135610bc881610e0a565b60008060008060608587031215610e8257600080fd5b843567ffffffffffffffff80821115610e9a57600080fd5b818701915087601f830112610eae57600080fd5b813581811115610ebd57600080fd5b8860208260051b8501011115610ed257600080fd5b60209283019650945050850135610ee881610e0a565b9396929550929360400135925050565b600060208284031215610f0a57600080fd5b5051919050565b600060208284031215610f2357600080fd5b8151610bc881610ddf565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610f5e57610f5e610f2e565b500290565b60008219821115610f7657610f76610f2e565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610fb657610fb6610f2e565b506000190190565b60005b83811015610fd9578181015183820152602001610fc1565b83811115610fe8576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611026816017850160208801610fbe565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611057816028840160208801610fbe565b01602801949350505050565b6020815260008251806020840152611082816040850160208701610fbe565b601f01601f19169190910160400192915050565b6000600182016110a8576110a8610f2e565b506001019056fea264697066735822122083a54643ee3298e758f18ed76080bdc09c2eb8fcd6487e36c7451ab4543f7c0e64736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1620 CODESIZE SUB DUP1 PUSH3 0x1620 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x386 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x2 SSTORE PUSH3 0x46 PUSH1 0x0 CALLER PUSH3 0x58 JUMP JUMPDEST PUSH3 0x51 DUP2 PUSH3 0xE1 JUMP JUMPDEST POP PUSH3 0x52B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0xDD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP7 MSTORE SWAP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP2 SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xEE DUP2 PUSH3 0x111 JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH3 0x11D DUP2 CALLER PUSH3 0x120 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0xDD JUMPI PUSH3 0x16C DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH3 0x1C6 PUSH1 0x20 SHL PUSH3 0xA2C OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x182 DUP4 PUSH1 0x20 PUSH3 0xA2C PUSH3 0x1C6 DUP3 SHL OR DUP2 SHR JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x195 SWAP3 SWAP2 SWAP1 PUSH3 0x3E4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH3 0x1BD SWAP2 PUSH1 0x4 ADD PUSH3 0x45D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH3 0x1D7 DUP4 PUSH1 0x2 PUSH3 0x4A8 JUMP JUMPDEST PUSH3 0x1E4 SWAP1 PUSH1 0x2 PUSH3 0x4CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x1FE JUMPI PUSH3 0x1FE PUSH3 0x4E5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x229 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x247 JUMPI PUSH3 0x247 PUSH3 0x4FB JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x279 JUMPI PUSH3 0x279 PUSH3 0x4FB JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH3 0x29F DUP5 PUSH1 0x2 PUSH3 0x4A8 JUMP JUMPDEST PUSH3 0x2AC SWAP1 PUSH1 0x1 PUSH3 0x4CA JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x32E JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH3 0x2E4 JUMPI PUSH3 0x2E4 PUSH3 0x4FB JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x2FD JUMPI PUSH3 0x2FD PUSH3 0x4FB JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH3 0x326 DUP2 PUSH3 0x511 JUMP JUMPDEST SWAP1 POP PUSH3 0x2AF JUMP JUMPDEST POP DUP4 ISZERO PUSH3 0x37F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x1BD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x399 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x3CE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x3B4 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x3DE JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH3 0x41E DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x3B1 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH3 0x451 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x3B1 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x47E DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x3B1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x4C5 JUMPI PUSH3 0x4C5 PUSH3 0x492 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x4E0 JUMPI PUSH3 0x4E0 PUSH3 0x492 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH3 0x523 JUMPI PUSH3 0x523 PUSH3 0x492 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x10E5 DUP1 PUSH3 0x53B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x11F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x868FF4A2 GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xC4E41B22 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xC4E41B22 EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0xDD31A7BA EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0xFEB2386E EQ PUSH2 0x37C JUMPI DUP1 PUSH4 0xFF0938A7 EQ PUSH2 0x39C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x868FF4A2 EQ PUSH2 0x29D JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2B0 JUMPI DUP1 PUSH4 0x94F4504D EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0xA6F5F014 EQ PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x4C0F38C2 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0x61AEC205 EQ PUSH2 0x25D JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x27D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x124 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x27C25C20 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x28438F68 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x1F2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x144 PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0xD9C JUMP JUMPDEST PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x165 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x174 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC6 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x150 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x1B8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x150 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0xDED JUMP JUMPDEST PUSH2 0x3E8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x412 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x43D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x4C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x533 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x298 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC6 JUMP JUMPDEST PUSH2 0x561 JUMP JUMPDEST PUSH2 0x1F0 PUSH2 0x2AB CALLDATASIZE PUSH1 0x4 PUSH2 0xDC6 JUMP JUMPDEST PUSH2 0x572 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x144 PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x85C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x144 SWAP1 PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x144 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x887 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x357 CALLDATASIZE PUSH1 0x4 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x8D1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x377 CALLDATASIZE PUSH1 0x4 PUSH2 0xDED JUMP JUMPDEST PUSH2 0x8F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x144 PUSH2 0x397 CALLDATASIZE PUSH1 0x4 PUSH2 0xE6C JUMP JUMPDEST PUSH2 0x921 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x144 PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x3E2 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F3 DUP2 PUSH2 0xBCF JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH2 0x42E DUP2 PUSH2 0xBCF JUMP JUMPDEST PUSH2 0x438 DUP4 DUP4 PUSH2 0xBDC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x4B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4BC DUP3 DUP3 PUSH2 0xC47 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD5ABEB01 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xD5ABEB01 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x50A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x52E SWAP2 SWAP1 PUSH2 0xEF8 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x53E DUP2 PUSH2 0xBCF JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56C DUP2 PUSH2 0xBCF JUMP JUMPDEST POP PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD SUB PUSH2 0x5C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A9 JUMP JUMPDEST PUSH1 0x2 DUP1 SSTORE PUSH2 0x5CF PUSH2 0x9BE JUMP JUMPDEST ISZERO PUSH2 0x613 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2730B3B0A5B4B239903BB0B9902830BAB9B2B217 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A9 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x671 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57686974656C697374206E6F74206F70656E20746F206D696E742E0000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A9 JUMP JUMPDEST PUSH2 0x457 PUSH2 0x67C PUSH2 0x887 JUMP JUMPDEST LT PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x4F76657220737570706C79 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A9 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD5391393 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x91D14854 SWAP2 DUP4 SWAP2 PUSH4 0xD5391393 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x709 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x72D SWAP2 SWAP1 PUSH2 0xEF8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x793 SWAP2 SWAP1 PUSH2 0xF11 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x7F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468697320436F6E7472616374206E6F742068617665207065726D697373696F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x37103A379036B4B73A17 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A9 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x40D097C3 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x40D097C3 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x83C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x850 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 PUSH1 0x2 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x50A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH2 0x8ED DUP2 PUSH2 0xBCF JUMP JUMPDEST PUSH2 0x438 DUP4 DUP4 PUSH2 0xC47 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 DUP2 PUSH2 0xBCF JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA8 SHL MUL PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SUB PUSH2 0x933 JUMPI POP PUSH1 0x0 PUSH2 0x9B6 JUMP JUMPDEST PUSH2 0x9B3 DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SLOAD PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP12 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP10 SWAP1 MSTORE SWAP1 SWAP4 POP PUSH1 0x54 ADD SWAP2 POP PUSH2 0x998 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xCAE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x5C975ABB PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x5C975ABB SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA08 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x52E SWAP2 SWAP1 PUSH2 0xF11 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xA3B DUP4 PUSH1 0x2 PUSH2 0xF44 JUMP JUMPDEST PUSH2 0xA46 SWAP1 PUSH1 0x2 PUSH2 0xF63 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA5E JUMPI PUSH2 0xA5E PUSH2 0xF7B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA88 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xAA3 JUMPI PUSH2 0xAA3 PUSH2 0xF91 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xAD2 JUMPI PUSH2 0xAD2 PUSH2 0xF91 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0xAF6 DUP5 PUSH1 0x2 PUSH2 0xF44 JUMP JUMPDEST PUSH2 0xB01 SWAP1 PUSH1 0x1 PUSH2 0xF63 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xB79 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0xB35 JUMPI PUSH2 0xB35 PUSH2 0xF91 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB4B JUMPI PUSH2 0xB4B PUSH2 0xF91 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0xB72 DUP2 PUSH2 0xFA7 JUMP JUMPDEST SWAP1 POP PUSH2 0xB04 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xBC8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xBD9 DUP2 CALLER PUSH2 0xCC4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xBE6 DUP3 DUP3 PUSH2 0x85C JUMP JUMPDEST PUSH2 0x4BC JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP7 MSTORE SWAP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0xC51 DUP3 DUP3 PUSH2 0x85C JUMP JUMPDEST ISZERO PUSH2 0x4BC JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xCBB DUP6 DUP5 PUSH2 0xD28 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xCCE DUP3 DUP3 PUSH2 0x85C JUMP JUMPDEST PUSH2 0x4BC JUMPI PUSH2 0xCE6 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0xA2C JUMP JUMPDEST PUSH2 0xCF1 DUP4 PUSH1 0x20 PUSH2 0xA2C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD02 SWAP3 SWAP2 SWAP1 PUSH2 0xFEE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x4A9 SWAP2 PUSH1 0x4 ADD PUSH2 0x1063 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xD94 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD4A JUMPI PUSH2 0xD4A PUSH2 0xF91 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0xD70 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP PUSH2 0xD81 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0xD8C DUP2 PUSH2 0x1096 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD2D JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xBC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xBD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBC8 DUP2 PUSH2 0xDDF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xE44 DUP2 PUSH2 0xE0A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBC8 DUP2 PUSH2 0xE0A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xEBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xED2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP7 POP SWAP5 POP POP DUP6 ADD CALLDATALOAD PUSH2 0xEE8 DUP2 PUSH2 0xE0A JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x40 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBC8 DUP2 PUSH2 0xDDF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xF5E JUMPI PUSH2 0xF5E PUSH2 0xF2E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xF76 JUMPI PUSH2 0xF76 PUSH2 0xF2E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xFB6 JUMPI PUSH2 0xFB6 PUSH2 0xF2E JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFD9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xFC1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xFE8 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x1026 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xFBE JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x1057 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xFBE JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1082 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x10A8 JUMPI PUSH2 0x10A8 PUSH2 0xF2E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 0xA5 CHAINID NUMBER 0xEE ORIGIN SWAP9 0xE7 PC CALL DUP15 0xD7 PUSH1 0x80 0xBD 0xC0 SWAP13 0x2E 0xB8 0xFC 0xD6 BASEFEE PUSH31 0x36C7451AB4543F7C0E64736F6C634300080F00330000000000000000000000 ",
							"sourceMap": "244:1737:10:-:0;;;431:141;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1701:1:2;1806:7;:22;478:42:10;2072:4:0;509:10:10;478;:42::i;:::-;531:33;554:9;531:22;:33::i;:::-;431:141;244:1737;;7244:233:0;2981:4;3004:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;7322:149;;7365:12;;;;7397:4;7365:12;;;;;;;;-1:-1:-1;;;;;7365:29:0;;;;;;;;;;:36;;-1:-1:-1;;7365:36:0;;;;;;;7420:40;;719:10:4;;7365:12:0;;7420:40;;7365:12;7420:40;7322:149;7244:233;;:::o;687:139:10:-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;790:16:10::1;:28:::0;;-1:-1:-1;;;;;;790:28:10::1;-1:-1:-1::0;;;;;790:28:10;;;::::1;::::0;;;::::1;::::0;;687:139::o;3334:103:0:-;3400:30;3411:4;719:10:4;3400::0;:30::i;:::-;3334:103;:::o;3718:492::-;2981:4;3004:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;3801:403;;3989:41;4017:7;-1:-1:-1;;;;;3989:41:0;4027:2;3989:19;;;;;:41;;:::i;:::-;4101:38;4129:4;4136:2;4101:19;;;;;:38;;:::i;:::-;3896:265;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3896:265:0;;;;;;;;;;-1:-1:-1;;;3844:349:0;;;;;;;:::i;:::-;;;;;;;;1588:441:5;1663:13;1688:19;1720:10;1724:6;1720:1;:10;:::i;:::-;:14;;1733:1;1720:14;:::i;:::-;-1:-1:-1;;;;;1710:25:5;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1710:25:5;;1688:47;;-1:-1:-1;;;1745:6:5;1752:1;1745:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1745:15:5;;;;;;;;;-1:-1:-1;;;1770:6:5;1777:1;1770:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1770:15:5;;;;;;;;-1:-1:-1;1800:9:5;1812:10;1816:6;1812:1;:10;:::i;:::-;:14;;1825:1;1812:14;:::i;:::-;1800:26;;1795:132;1832:1;1828;:5;1795:132;;;-1:-1:-1;;;1879:5:5;1887:3;1879:11;1866:25;;;;;;;:::i;:::-;;;;1854:6;1861:1;1854:9;;;;;;;;:::i;:::-;;;;:37;-1:-1:-1;;;;;1854:37:5;;;;;;;;-1:-1:-1;1915:1:5;1905:11;;;;;1835:3;;;:::i;:::-;;;1795:132;;;-1:-1:-1;1944:10:5;;1936:55;;;;-1:-1:-1;;;1936:55:5;;2816:2:12;1936:55:5;;;2798:21:12;;;2835:18;;;2828:30;2894:34;2874:18;;;2867:62;2946:18;;1936:55:5;2614:356:12;1936:55:5;2015:6;1588:441;-1:-1:-1;;;1588:441:5:o;14:310:12:-;104:6;157:2;145:9;136:7;132:23;128:32;125:52;;;173:1;170;163:12;125:52;199:16;;-1:-1:-1;;;;;244:31:12;;234:42;;224:70;;290:1;287;280:12;329:258;401:1;411:113;425:6;422:1;419:13;411:113;;;501:11;;;495:18;482:11;;;475:39;447:2;440:10;411:113;;;542:6;539:1;536:13;533:48;;;577:1;568:6;563:3;559:16;552:27;533:48;;329:258;;;:::o;592:786::-;1003:25;998:3;991:38;973:3;1058:6;1052:13;1074:62;1129:6;1124:2;1119:3;1115:12;1108:4;1100:6;1096:17;1074:62;:::i;:::-;-1:-1:-1;;;1195:2:12;1155:16;;;1187:11;;;1180:40;1245:13;;1267:63;1245:13;1316:2;1308:11;;1301:4;1289:17;;1267:63;:::i;:::-;1350:17;1369:2;1346:26;;592:786;-1:-1:-1;;;;592:786:12:o;1383:383::-;1532:2;1521:9;1514:21;1495:4;1564:6;1558:13;1607:6;1602:2;1591:9;1587:18;1580:34;1623:66;1682:6;1677:2;1666:9;1662:18;1657:2;1649:6;1645:15;1623:66;:::i;:::-;1750:2;1729:15;-1:-1:-1;;1725:29:12;1710:45;;;;1757:2;1706:54;;1383:383;-1:-1:-1;;1383:383:12:o;1771:127::-;1832:10;1827:3;1823:20;1820:1;1813:31;1863:4;1860:1;1853:15;1887:4;1884:1;1877:15;1903:168;1943:7;2009:1;2005;2001:6;1997:14;1994:1;1991:21;1986:1;1979:9;1972:17;1968:45;1965:71;;;2016:18;;:::i;:::-;-1:-1:-1;2056:9:12;;1903:168::o;2076:128::-;2116:3;2147:1;2143:6;2140:1;2137:13;2134:39;;;2153:18;;:::i;:::-;-1:-1:-1;2189:9:12;;2076:128::o;2209:127::-;2270:10;2265:3;2261:20;2258:1;2251:31;2301:4;2298:1;2291:15;2325:4;2322:1;2315:15;2341:127;2402:10;2397:3;2393:20;2390:1;2383:31;2433:4;2430:1;2423:15;2457:4;2454:1;2447:15;2473:136;2512:3;2540:5;2530:39;;2549:18;;:::i;:::-;-1:-1:-1;;;2585:18:12;;2473:136::o;2614:356::-;244:1737:10;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DEFAULT_ADMIN_ROLE_27": {
									"entryPoint": null,
									"id": 27,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkRole_135": {
									"entryPoint": 3268,
									"id": 135,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkRole_92": {
									"entryPoint": 3023,
									"id": 92,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_efficientHash_865": {
									"entryPoint": null,
									"id": 865,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_grantRole_287": {
									"entryPoint": 3036,
									"id": 287,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_560": {
									"entryPoint": null,
									"id": 560,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revokeRole_318": {
									"entryPoint": 3143,
									"id": 318,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@changeFreeMintOpen_1046": {
									"entryPoint": 1000,
									"id": 1046,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changeNagaKidsContract_1020": {
									"entryPoint": 1331,
									"id": 1020,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changeWhitelistMintOpen_1033": {
									"entryPoint": 2295,
									"id": 1033,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@getMaxSupply_1127": {
									"entryPoint": 1216,
									"id": 1127,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getRoleAdmin_150": {
									"entryPoint": null,
									"id": 150,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getTotalSupply_1117": {
									"entryPoint": 2183,
									"id": 1117,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@grantRole_170": {
									"entryPoint": 1042,
									"id": 170,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@hasRole_79": {
									"entryPoint": 2140,
									"id": 79,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isFreeMintOpen_975": {
									"entryPoint": null,
									"id": 975,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isPause_1137": {
									"entryPoint": 2494,
									"id": 1137,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isWhitelistOpen_977": {
									"entryPoint": null,
									"id": 977,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isWhitelist_1176": {
									"entryPoint": 2337,
									"id": 1176,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@merkleRoot_1143": {
									"entryPoint": null,
									"id": 1143,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@nagaKidsContract_973": {
									"entryPoint": null,
									"id": 973,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@processProof_854": {
									"entryPoint": 3368,
									"id": 854,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@renounceRole_213": {
									"entryPoint": 1085,
									"id": 213,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@revokeRole_190": {
									"entryPoint": 2257,
									"id": 190,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@setMerkleRoot_1059": {
									"entryPoint": 1377,
									"id": 1059,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@supportsInterface_60": {
									"entryPoint": 945,
									"id": 60,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_889": {
									"entryPoint": null,
									"id": 889,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toHexString_772": {
									"entryPoint": 2604,
									"id": 772,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@verify_797": {
									"entryPoint": 3246,
									"id": 797,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@whitelistMint_1107": {
									"entryPoint": 1394,
									"id": 1107,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256": {
									"entryPoint": 3692,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_bool": {
									"entryPoint": 3565,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 3857,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32": {
									"entryPoint": 3526,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32_fromMemory": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32t_address": {
									"entryPoint": 3615,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 3484,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_contract$_INagaKidsNFT_$958": {
									"entryPoint": 3663,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 3832,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 4078,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_INagaKidsNFT_$958__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4195,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_04c899bcc4f5150e1689f9a8071396f43ad4f348d6b97ffd095d25c890be42b8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_5ca816d2a77b3d51b4c5033631d2b3326e5b39a3fc9da3af3bdbe7c4f11cb2f6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cb57f8f9c8eace4f3cff285990b68679b8bb26950f0fd30c3a25c9ccd8b9c29f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3939,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 3908,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 4030,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"decrement_t_uint256": {
									"entryPoint": 4007,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 4246,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3886,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 3985,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 3963,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_address": {
									"entryPoint": 3594,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_bool": {
									"entryPoint": 3551,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:9814:12",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:12",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "83:217:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "129:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "138:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "141:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "131:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "131:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "131:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "104:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "113:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "100:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "100:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "125:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "96:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:32:12"
															},
															"nodeType": "YulIf",
															"src": "93:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "154:36:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "180:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "167:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "167:23:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "158:5:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "254:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "263:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "266:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "256:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "256:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "256:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "212:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "223:5:12"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "234:3:12",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "239:10:12",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "230:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "230:20:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "219:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "219:32:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "209:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "209:43:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "202:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "202:51:12"
															},
															"nodeType": "YulIf",
															"src": "199:71:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "279:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "289:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "279:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "49:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "60:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "72:6:12",
														"type": ""
													}
												],
												"src": "14:286:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "400:92:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "410:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "422:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "433:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "418:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "418:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "410:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "452:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "477:6:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "470:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "470:14:12"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "463:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "463:22:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "445:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "445:41:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "445:41:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "369:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "380:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "391:4:12",
														"type": ""
													}
												],
												"src": "305:187:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "567:110:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "613:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "622:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "625:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "615:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "615:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "615:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "588:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "597:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "584:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "584:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "609:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "580:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "580:32:12"
															},
															"nodeType": "YulIf",
															"src": "577:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "638:33:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "661:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "648:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:23:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "638:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "533:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "544:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "556:6:12",
														"type": ""
													}
												],
												"src": "497:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "783:76:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "793:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "805:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "816:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "801:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "801:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "793:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "835:9:12"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "846:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "828:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "828:25:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "828:25:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "752:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "763:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "774:4:12",
														"type": ""
													}
												],
												"src": "682:177:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "985:102:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "995:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1007:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1018:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1003:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1003:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "995:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1037:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1052:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1068:3:12",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1073:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1064:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1064:11:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1077:1:12",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1060:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1060:19:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1048:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1048:32:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1030:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1030:51:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1030:51:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_INagaKidsNFT_$958__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "954:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "965:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "976:4:12",
														"type": ""
													}
												],
												"src": "864:223:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1134:76:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1188:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1197:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1200:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1190:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1190:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1190:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1157:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "1178:5:12"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "1171:6:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1171:13:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1164:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1164:21:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1154:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1154:32:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1147:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1147:40:12"
															},
															"nodeType": "YulIf",
															"src": "1144:60:12"
														}
													]
												},
												"name": "validator_revert_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1123:5:12",
														"type": ""
													}
												],
												"src": "1092:118:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1282:174:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1328:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1337:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1340:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1330:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1330:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1330:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1303:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1312:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1299:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1299:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1324:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1295:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1295:32:12"
															},
															"nodeType": "YulIf",
															"src": "1292:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1353:36:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1379:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1366:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1366:23:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1357:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1420:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bool",
																	"nodeType": "YulIdentifier",
																	"src": "1398:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1398:28:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1398:28:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1435:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1445:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1435:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1248:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1259:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1271:6:12",
														"type": ""
													}
												],
												"src": "1215:241:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1506:86:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1570:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1579:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1582:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1572:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1572:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1572:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1529:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1540:5:12"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1555:3:12",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1560:1:12",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1551:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1551:11:12"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1564:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1547:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1547:19:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1536:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1536:31:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1526:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1526:42:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1519:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1519:50:12"
															},
															"nodeType": "YulIf",
															"src": "1516:70:12"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1495:5:12",
														"type": ""
													}
												],
												"src": "1461:131:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1684:228:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1730:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1739:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1742:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1732:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1732:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1732:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1705:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1714:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1701:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1701:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1726:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1697:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1697:32:12"
															},
															"nodeType": "YulIf",
															"src": "1694:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1755:33:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1778:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1765:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1765:23:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1755:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1797:45:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1827:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1838:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1823:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1823:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1810:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1810:32:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1801:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1876:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1851:24:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1851:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1851:31:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1891:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1901:5:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1891:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1642:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1653:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1665:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1673:6:12",
														"type": ""
													}
												],
												"src": "1597:315:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2018:76:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2028:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2040:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2051:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2036:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2036:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2028:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2070:9:12"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2081:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2063:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2063:25:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2063:25:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1987:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1998:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2009:4:12",
														"type": ""
													}
												],
												"src": "1917:177:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2189:177:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2235:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2244:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2247:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2237:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2237:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2237:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2210:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2219:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2206:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2206:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2231:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2202:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2202:32:12"
															},
															"nodeType": "YulIf",
															"src": "2199:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2260:36:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2286:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2273:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2273:23:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2264:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2330:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2305:24:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2305:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2305:31:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2345:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2355:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2345:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_INagaKidsNFT_$958",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2155:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2166:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2178:6:12",
														"type": ""
													}
												],
												"src": "2099:267:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2441:110:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2487:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2496:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2499:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2489:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2489:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2489:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2462:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2471:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2458:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2458:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2483:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2454:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2454:32:12"
															},
															"nodeType": "YulIf",
															"src": "2451:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2512:33:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2535:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2522:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2522:23:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2512:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2407:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2418:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2430:6:12",
														"type": ""
													}
												],
												"src": "2371:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2695:685:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2741:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2750:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2753:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2743:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2743:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2743:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2716:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2725:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2712:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2712:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2737:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2708:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2708:32:12"
															},
															"nodeType": "YulIf",
															"src": "2705:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2766:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2793:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2780:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2780:23:12"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2770:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2812:28:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2822:18:12",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2816:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2867:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2876:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2879:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2869:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2869:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2869:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2855:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2863:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2852:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2852:14:12"
															},
															"nodeType": "YulIf",
															"src": "2849:34:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2892:32:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2906:9:12"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2917:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2902:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2902:22:12"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "2896:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2972:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2981:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2984:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2974:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2974:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2974:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "2951:2:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2955:4:12",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2947:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2947:13:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2962:7:12"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2943:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2943:27:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2936:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2936:35:12"
															},
															"nodeType": "YulIf",
															"src": "2933:55:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2997:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3024:2:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3011:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3011:16:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3001:6:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3054:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3063:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3066:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3056:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3056:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3056:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3042:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3050:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3039:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3039:14:12"
															},
															"nodeType": "YulIf",
															"src": "3036:34:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3130:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3139:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3142:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3132:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3132:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3132:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3093:2:12"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3101:1:12",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "3104:6:12"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3097:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3097:14:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3089:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3089:23:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3114:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3085:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3085:34:12"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3121:7:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3082:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3082:47:12"
															},
															"nodeType": "YulIf",
															"src": "3079:67:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3155:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3169:2:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3173:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3165:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3165:13:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3155:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3187:16:12",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "3197:6:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3187:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3212:47:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3242:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3253:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3238:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3238:20:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3225:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3225:34:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3216:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3293:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "3268:24:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3268:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3268:31:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3308:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3318:5:12"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3308:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3332:42:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3359:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3370:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3355:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3355:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3342:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3342:32:12"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "3332:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2637:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2648:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2660:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2668:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2676:6:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2684:6:12",
														"type": ""
													}
												],
												"src": "2556:824:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3559:237:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3576:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3587:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3569:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3569:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3569:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3610:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3621:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3606:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3606:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3626:2:12",
																		"type": "",
																		"value": "47"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3599:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3599:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3599:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3649:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3660:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3645:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3645:18:12"
																	},
																	{
																		"hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3665:34:12",
																		"type": "",
																		"value": "AccessControl: can only renounce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3638:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3638:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3638:62:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3720:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3731:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3716:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3716:18:12"
																	},
																	{
																		"hexValue": "20726f6c657320666f722073656c66",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3736:17:12",
																		"type": "",
																		"value": " roles for self"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3709:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3709:45:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3709:45:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3763:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3775:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3786:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3771:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3771:19:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3763:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3536:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3550:4:12",
														"type": ""
													}
												],
												"src": "3385:411:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3882:103:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3928:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3937:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3940:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3930:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3930:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3930:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3903:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3912:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3899:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3899:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3924:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3895:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3895:32:12"
															},
															"nodeType": "YulIf",
															"src": "3892:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3953:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3969:9:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3963:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3963:16:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3953:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3848:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3859:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3871:6:12",
														"type": ""
													}
												],
												"src": "3801:184:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4164:181:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4181:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4192:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4174:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4174:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4174:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4215:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4226:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4211:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4211:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4231:2:12",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4204:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4204:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4204:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4254:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4265:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4250:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4250:18:12"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4270:33:12",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4243:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4243:61:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4243:61:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4313:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4325:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4336:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4321:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4321:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4313:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4141:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4155:4:12",
														"type": ""
													}
												],
												"src": "3990:355:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4524:170:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4541:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4552:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4534:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4534:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4534:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4575:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4586:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4571:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4571:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4591:2:12",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4564:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4564:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4564:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4614:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4625:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4610:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4610:18:12"
																	},
																	{
																		"hexValue": "4e6167614b69647320776173205061757365642e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4630:22:12",
																		"type": "",
																		"value": "NagaKids was Paused."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4603:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4603:50:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4603:50:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4662:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4674:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4685:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4670:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4670:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4662:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cb57f8f9c8eace4f3cff285990b68679b8bb26950f0fd30c3a25c9ccd8b9c29f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4501:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4515:4:12",
														"type": ""
													}
												],
												"src": "4350:344:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4873:177:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4890:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4901:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4883:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4883:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4883:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4924:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4935:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4920:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4920:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4940:2:12",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4913:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4913:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4913:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4963:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4974:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4959:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4959:18:12"
																	},
																	{
																		"hexValue": "57686974656c697374206e6f74206f70656e20746f206d696e742e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4979:29:12",
																		"type": "",
																		"value": "Whitelist not open to mint."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4952:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4952:57:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4952:57:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5018:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5030:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5041:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5026:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5026:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5018:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_04c899bcc4f5150e1689f9a8071396f43ad4f348d6b97ffd095d25c890be42b8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4850:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4864:4:12",
														"type": ""
													}
												],
												"src": "4699:351:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5229:161:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5246:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5257:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5239:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5239:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5239:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5280:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5291:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5276:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5276:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5296:2:12",
																		"type": "",
																		"value": "11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5269:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5269:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5269:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5319:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5330:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5315:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5315:18:12"
																	},
																	{
																		"hexValue": "4f76657220737570706c79",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5335:13:12",
																		"type": "",
																		"value": "Over supply"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5308:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5308:41:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5308:41:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5358:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5370:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5381:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5366:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5366:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5358:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5206:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5220:4:12",
														"type": ""
													}
												],
												"src": "5055:335:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5476:103:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5522:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5531:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5534:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5524:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5524:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5524:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5497:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5506:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5493:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5493:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5518:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5489:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5489:32:12"
															},
															"nodeType": "YulIf",
															"src": "5486:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5547:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5563:9:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5557:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5557:16:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5547:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5442:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5453:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5465:6:12",
														"type": ""
													}
												],
												"src": "5395:184:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5713:145:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5723:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5735:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5746:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5731:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5731:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5723:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5765:9:12"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5776:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5758:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5758:25:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5758:25:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5803:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5814:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5799:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5799:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5823:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5839:3:12",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5844:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5835:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5835:11:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5848:1:12",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "5831:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5831:19:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5819:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5819:32:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5792:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5792:60:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5792:60:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5674:9:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5685:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5693:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5704:4:12",
														"type": ""
													}
												],
												"src": "5584:274:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5941:167:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5987:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5996:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5999:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5989:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5989:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5989:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5962:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5971:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5958:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5958:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5983:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5954:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5954:32:12"
															},
															"nodeType": "YulIf",
															"src": "5951:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6012:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6031:9:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6025:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6025:16:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "6016:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6072:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bool",
																	"nodeType": "YulIdentifier",
																	"src": "6050:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6050:28:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6050:28:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6087:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "6097:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6087:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5907:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5918:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5930:6:12",
														"type": ""
													}
												],
												"src": "5863:245:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6287:232:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6304:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6315:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6297:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6297:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6297:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6338:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6349:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6334:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6334:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6354:2:12",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6327:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6327:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6327:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6377:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6388:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6373:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6373:18:12"
																	},
																	{
																		"hexValue": "5468697320436f6e7472616374206e6f742068617665207065726d697373696f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6393:34:12",
																		"type": "",
																		"value": "This Contract not have permissio"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6366:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6366:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6366:62:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6448:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6459:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6444:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6444:18:12"
																	},
																	{
																		"hexValue": "6e20746f206d696e742e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6464:12:12",
																		"type": "",
																		"value": "n to mint."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6437:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6437:40:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6437:40:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6486:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6498:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6509:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6494:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6494:19:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6486:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_5ca816d2a77b3d51b4c5033631d2b3326e5b39a3fc9da3af3bdbe7c4f11cb2f6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6264:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6278:4:12",
														"type": ""
													}
												],
												"src": "6113:406:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6625:102:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6635:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6647:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6658:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6643:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6643:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6635:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6677:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6692:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6708:3:12",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6713:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "6704:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6704:11:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6717:1:12",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "6700:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6700:19:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6688:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6688:32:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6670:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6670:51:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6670:51:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6594:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6605:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6616:4:12",
														"type": ""
													}
												],
												"src": "6524:203:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6879:147:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6896:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6909:2:12",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "6913:6:12"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "6905:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6905:15:12"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6926:26:12",
																						"type": "",
																						"value": "0xffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "6922:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6922:31:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6901:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6901:53:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6889:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6889:66:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6889:66:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "6975:3:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6980:2:12",
																				"type": "",
																				"value": "20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6971:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6971:12:12"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6985:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6964:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6964:28:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6964:28:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7001:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7012:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7017:2:12",
																		"type": "",
																		"value": "52"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7008:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7008:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7001:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6847:3:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6852:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6860:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6871:3:12",
														"type": ""
													}
												],
												"src": "6732:294:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7063:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7080:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7087:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7092:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7083:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7083:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7073:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7073:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7073:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7120:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7123:4:12",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7113:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7113:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7113:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7144:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7147:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7137:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7137:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7137:15:12"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "7031:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7215:116:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7274:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7276:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7276:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7276:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "7246:1:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "7239:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7239:9:12"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "7232:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7232:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "7254:1:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7265:1:12",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "7261:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7261:6:12"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "7269:1:12"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "7257:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7257:14:12"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "7251:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7251:21:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "7228:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7228:45:12"
															},
															"nodeType": "YulIf",
															"src": "7225:71:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7305:20:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7320:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7323:1:12"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "7316:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7316:9:12"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "7305:7:12"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7194:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7197:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "7203:7:12",
														"type": ""
													}
												],
												"src": "7163:168:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7384:80:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7411:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7413:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7413:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7413:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7400:1:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "7407:1:12"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "7403:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7403:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7397:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7397:13:12"
															},
															"nodeType": "YulIf",
															"src": "7394:39:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7442:16:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7453:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7456:1:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7449:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7449:9:12"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "7442:3:12"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7367:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7370:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "7376:3:12",
														"type": ""
													}
												],
												"src": "7336:128:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7501:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7518:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7525:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7530:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7521:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7521:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7511:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7511:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7511:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7558:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7561:4:12",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7551:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7551:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7551:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7582:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7585:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7575:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7575:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7575:15:12"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "7469:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7633:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7650:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7657:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7662:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7653:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7653:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7643:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7643:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7643:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7690:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7693:4:12",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7683:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7683:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7683:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7714:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7717:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7707:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7707:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7707:15:12"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "7601:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7780:89:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7807:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7809:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7809:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7809:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7800:5:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7793:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7793:13:12"
															},
															"nodeType": "YulIf",
															"src": "7790:39:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7838:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7849:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7860:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "7856:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7856:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7845:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7845:18:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "7838:3:12"
																}
															]
														}
													]
												},
												"name": "decrement_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7762:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "7772:3:12",
														"type": ""
													}
												],
												"src": "7733:136:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8048:182:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8065:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8076:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8058:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8058:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8058:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8099:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8110:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8095:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8095:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8115:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8088:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8088:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8088:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8138:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8149:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8134:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8134:18:12"
																	},
																	{
																		"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8154:34:12",
																		"type": "",
																		"value": "Strings: hex length insufficient"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8127:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8127:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8127:62:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8198:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8210:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8221:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8206:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8206:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8198:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8025:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8039:4:12",
														"type": ""
													}
												],
												"src": "7874:356:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8288:205:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8298:10:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8307:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "8302:1:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8367:63:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "8392:3:12"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "8397:1:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8388:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8388:11:12"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "8411:3:12"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "8416:1:12"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "8407:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8407:11:12"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "8401:5:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8401:18:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8381:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8381:39:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8381:39:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "8328:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8331:6:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "8325:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8325:13:12"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "8339:19:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8341:15:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "8350:1:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8353:2:12",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "8346:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8346:10:12"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "8341:1:12"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "8321:3:12",
																"statements": []
															},
															"src": "8317:113:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8456:31:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "8469:3:12"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "8474:6:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8465:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8465:16:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8483:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8458:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8458:27:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8458:27:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "8445:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8448:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8442:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8442:13:12"
															},
															"nodeType": "YulIf",
															"src": "8439:48:12"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8266:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "8271:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8276:6:12",
														"type": ""
													}
												],
												"src": "8235:258:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8887:397:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8904:3:12"
																	},
																	{
																		"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8909:25:12",
																		"type": "",
																		"value": "AccessControl: account "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8897:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8897:38:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8897:38:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8944:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8964:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8958:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8958:13:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "8948:6:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9006:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9014:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9002:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9002:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "9025:3:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9030:2:12",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9021:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9021:12:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9035:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "8980:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8980:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8980:62:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9051:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9065:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9070:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9061:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9061:16:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "9055:2:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "9097:2:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9101:2:12",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9093:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9093:11:12"
																	},
																	{
																		"hexValue": "206973206d697373696e6720726f6c6520",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9106:19:12",
																		"type": "",
																		"value": " is missing role "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9086:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9086:40:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9086:40:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9135:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "9157:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9151:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9151:13:12"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "9139:8:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "9199:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9207:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9195:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9195:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "9218:2:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9222:2:12",
																				"type": "",
																				"value": "40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9214:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9214:11:12"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "9227:8:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "9173:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9173:63:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9173:63:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9245:33:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "9260:2:12"
																			},
																			{
																				"name": "length_1",
																				"nodeType": "YulIdentifier",
																				"src": "9264:8:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9256:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9256:17:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9275:2:12",
																		"type": "",
																		"value": "40"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9252:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9252:26:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9245:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8855:3:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8860:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8868:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8879:3:12",
														"type": ""
													}
												],
												"src": "8498:786:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9410:262:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9427:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9438:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9420:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9420:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9420:21:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9450:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9470:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9464:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9464:13:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "9454:6:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9497:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9508:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9493:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9493:18:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9513:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9486:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9486:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9486:34:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9555:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9563:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9551:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9551:15:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9572:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9583:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9568:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9568:18:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9588:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "9529:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9529:66:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9529:66:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9604:62:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9620:9:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "9639:6:12"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9647:2:12",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "9635:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9635:15:12"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9656:2:12",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "9652:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9652:7:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "9631:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9631:29:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9616:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9616:45:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9663:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9612:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9612:54:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9604:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9379:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9390:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9401:4:12",
														"type": ""
													}
												],
												"src": "9289:383:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9724:88:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9755:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9757:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9757:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9757:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9740:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9751:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "9747:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9747:6:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "9737:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9737:17:12"
															},
															"nodeType": "YulIf",
															"src": "9734:43:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9786:20:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9797:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9804:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9793:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9793:13:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "9786:3:12"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9706:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "9716:3:12",
														"type": ""
													}
												],
												"src": "9677:135:12"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_INagaKidsNFT_$958__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_contract$_INagaKidsNFT_$958(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 0x20)\n        value1 := length\n        let value := calldataload(add(headStart, 0x20))\n        validator_revert_address(value)\n        value2 := value\n        value3 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cb57f8f9c8eace4f3cff285990b68679b8bb26950f0fd30c3a25c9ccd8b9c29f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"NagaKids was Paused.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_04c899bcc4f5150e1689f9a8071396f43ad4f348d6b97ffd095d25c890be42b8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Whitelist not open to mint.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Over supply\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_5ca816d2a77b3d51b4c5033631d2b3326e5b39a3fc9da3af3bdbe7c4f11cb2f6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"This Contract not have permissio\")\n        mstore(add(headStart, 96), \"n to mint.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n}",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040526004361061011f5760003560e01c8063868ff4a2116100a0578063c4e41b2211610064578063c4e41b2214610327578063d547741f1461033c578063dd31a7ba1461035c578063feb2386e1461037c578063ff0938a71461039c57600080fd5b8063868ff4a21461029d57806391d14854146102b057806394f4504d146102d0578063a217fddf146102f1578063a6f5f0141461030657600080fd5b80632f2ff15d116100e75780632f2ff15d1461020857806336568abe146102285780634c0f38c21461024857806361aec2051461025d5780637cb647591461027d57600080fd5b806301ffc9a714610124578063248a9ca31461015957806327c25c201461019857806328438f68146101d05780632eb4a7ab146101f2575b600080fd5b34801561013057600080fd5b5061014461013f366004610d9c565b6103b1565b60405190151581526020015b60405180910390f35b34801561016557600080fd5b5061018a610174366004610dc6565b6000908152600160208190526040909120015490565b604051908152602001610150565b3480156101a457600080fd5b506003546101b8906001600160a01b031681565b6040516001600160a01b039091168152602001610150565b3480156101dc57600080fd5b506101f06101eb366004610ded565b6103e8565b005b3480156101fe57600080fd5b5061018a60005481565b34801561021457600080fd5b506101f0610223366004610e1f565b610412565b34801561023457600080fd5b506101f0610243366004610e1f565b61043d565b34801561025457600080fd5b5061018a6104c0565b34801561026957600080fd5b506101f0610278366004610e4f565b610533565b34801561028957600080fd5b506101f0610298366004610dc6565b610561565b6101f06102ab366004610dc6565b610572565b3480156102bc57600080fd5b506101446102cb366004610e1f565b61085c565b3480156102dc57600080fd5b5060035461014490600160a81b900460ff1681565b3480156102fd57600080fd5b5061018a600081565b34801561031257600080fd5b5060035461014490600160a01b900460ff1681565b34801561033357600080fd5b5061018a610887565b34801561034857600080fd5b506101f0610357366004610e1f565b6108d1565b34801561036857600080fd5b506101f0610377366004610ded565b6108f7565b34801561038857600080fd5b50610144610397366004610e6c565b610921565b3480156103a857600080fd5b506101446109be565b60006001600160e01b03198216637965db0b60e01b14806103e257506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006103f381610bcf565b5060038054911515600160a01b0260ff60a01b19909216919091179055565b6000828152600160208190526040909120015461042e81610bcf565b6104388383610bdc565b505050565b6001600160a01b03811633146104b25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104bc8282610c47565b5050565b6003546040805163d5abeb0160e01b815290516000926001600160a01b03169163d5abeb019160048083019260209291908290030181865afa15801561050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052e9190610ef8565b905090565b600061053e81610bcf565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b600061056c81610bcf565b50600055565b60028054036105c35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104a9565b600280556105cf6109be565b156106135760405162461bcd60e51b81526020600482015260146024820152732730b3b0a5b4b239903bb0b9902830bab9b2b21760611b60448201526064016104a9565b600354600160a81b900460ff1615156001146106715760405162461bcd60e51b815260206004820152601b60248201527f57686974656c697374206e6f74206f70656e20746f206d696e742e000000000060448201526064016104a9565b61045761067c610887565b106106b75760405162461bcd60e51b815260206004820152600b60248201526a4f76657220737570706c7960a81b60448201526064016104a9565b6003546040805163d539139360e01b815290516001600160a01b03909216916391d1485491839163d5391393916004808201926020929091908290030181865afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190610ef8565b6040516001600160e01b031960e084901b1681526004810191909152306024820152604401602060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190610f11565b15156001146107f75760405162461bcd60e51b815260206004820152602a60248201527f5468697320436f6e7472616374206e6f742068617665207065726d697373696f60448201526937103a379036b4b73a1760b11b60648201526084016104a9565b6003546040516340d097c360e01b81523360048201526001600160a01b03909116906340d097c390602401600060405180830381600087803b15801561083c57600080fd5b505af1158015610850573d6000803e3d6000fd5b50506001600255505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801561050a573d6000803e3d6000fd5b600082815260016020819052604090912001546108ed81610bcf565b6104388383610c47565b600061090281610bcf565b5060038054911515600160a81b0260ff60a81b19909216919091179055565b600080548103610933575060006109b6565b6109b38585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250546040516bffffffffffffffffffffffff1960608b901b1660208201526034810189905290935060540191506109989050565b60405160208183030381529060405280519060200120610cae565b90505b949350505050565b60035460408051635c975abb60e01b815290516000926001600160a01b031691635c975abb9160048083019260209291908290030181865afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052e9190610f11565b60606000610a3b836002610f44565b610a46906002610f63565b67ffffffffffffffff811115610a5e57610a5e610f7b565b6040519080825280601f01601f191660200182016040528015610a88576020820181803683370190505b509050600360fc1b81600081518110610aa357610aa3610f91565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610ad257610ad2610f91565b60200101906001600160f81b031916908160001a9053506000610af6846002610f44565b610b01906001610f63565b90505b6001811115610b79576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610b3557610b35610f91565b1a60f81b828281518110610b4b57610b4b610f91565b60200101906001600160f81b031916908160001a90535060049490941c93610b7281610fa7565b9050610b04565b508315610bc85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104a9565b9392505050565b610bd98133610cc4565b50565b610be6828261085c565b6104bc5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b610c51828261085c565b156104bc5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600082610cbb8584610d28565b14949350505050565b610cce828261085c565b6104bc57610ce6816001600160a01b03166014610a2c565b610cf1836020610a2c565b604051602001610d02929190610fee565b60408051601f198184030181529082905262461bcd60e51b82526104a991600401611063565b600081815b8451811015610d94576000858281518110610d4a57610d4a610f91565b60200260200101519050808311610d705760008381526020829052604090209250610d81565b600081815260208490526040902092505b5080610d8c81611096565b915050610d2d565b509392505050565b600060208284031215610dae57600080fd5b81356001600160e01b031981168114610bc857600080fd5b600060208284031215610dd857600080fd5b5035919050565b8015158114610bd957600080fd5b600060208284031215610dff57600080fd5b8135610bc881610ddf565b6001600160a01b0381168114610bd957600080fd5b60008060408385031215610e3257600080fd5b823591506020830135610e4481610e0a565b809150509250929050565b600060208284031215610e6157600080fd5b8135610bc881610e0a565b60008060008060608587031215610e8257600080fd5b843567ffffffffffffffff80821115610e9a57600080fd5b818701915087601f830112610eae57600080fd5b813581811115610ebd57600080fd5b8860208260051b8501011115610ed257600080fd5b60209283019650945050850135610ee881610e0a565b9396929550929360400135925050565b600060208284031215610f0a57600080fd5b5051919050565b600060208284031215610f2357600080fd5b8151610bc881610ddf565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610f5e57610f5e610f2e565b500290565b60008219821115610f7657610f76610f2e565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610fb657610fb6610f2e565b506000190190565b60005b83811015610fd9578181015183820152602001610fc1565b83811115610fe8576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611026816017850160208801610fbe565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611057816028840160208801610fbe565b01602801949350505050565b6020815260008251806020840152611082816040850160208701610fbe565b601f01601f19169190910160400192915050565b6000600182016110a8576110a8610f2e565b506001019056fea264697066735822122083a54643ee3298e758f18ed76080bdc09c2eb8fcd6487e36c7451ab4543f7c0e64736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x11F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x868FF4A2 GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xC4E41B22 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xC4E41B22 EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0xDD31A7BA EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0xFEB2386E EQ PUSH2 0x37C JUMPI DUP1 PUSH4 0xFF0938A7 EQ PUSH2 0x39C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x868FF4A2 EQ PUSH2 0x29D JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2B0 JUMPI DUP1 PUSH4 0x94F4504D EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0xA6F5F014 EQ PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x4C0F38C2 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0x61AEC205 EQ PUSH2 0x25D JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x27D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x124 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x27C25C20 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x28438F68 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x1F2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x144 PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0xD9C JUMP JUMPDEST PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x165 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x174 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC6 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x150 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x1B8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x150 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0xDED JUMP JUMPDEST PUSH2 0x3E8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x412 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x43D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x4C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x533 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x298 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC6 JUMP JUMPDEST PUSH2 0x561 JUMP JUMPDEST PUSH2 0x1F0 PUSH2 0x2AB CALLDATASIZE PUSH1 0x4 PUSH2 0xDC6 JUMP JUMPDEST PUSH2 0x572 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x144 PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x85C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x144 SWAP1 PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x144 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x887 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x357 CALLDATASIZE PUSH1 0x4 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x8D1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x377 CALLDATASIZE PUSH1 0x4 PUSH2 0xDED JUMP JUMPDEST PUSH2 0x8F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x144 PUSH2 0x397 CALLDATASIZE PUSH1 0x4 PUSH2 0xE6C JUMP JUMPDEST PUSH2 0x921 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x144 PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x3E2 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F3 DUP2 PUSH2 0xBCF JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH2 0x42E DUP2 PUSH2 0xBCF JUMP JUMPDEST PUSH2 0x438 DUP4 DUP4 PUSH2 0xBDC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x4B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4BC DUP3 DUP3 PUSH2 0xC47 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD5ABEB01 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xD5ABEB01 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x50A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x52E SWAP2 SWAP1 PUSH2 0xEF8 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x53E DUP2 PUSH2 0xBCF JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56C DUP2 PUSH2 0xBCF JUMP JUMPDEST POP PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD SUB PUSH2 0x5C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A9 JUMP JUMPDEST PUSH1 0x2 DUP1 SSTORE PUSH2 0x5CF PUSH2 0x9BE JUMP JUMPDEST ISZERO PUSH2 0x613 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2730B3B0A5B4B239903BB0B9902830BAB9B2B217 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A9 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x671 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57686974656C697374206E6F74206F70656E20746F206D696E742E0000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A9 JUMP JUMPDEST PUSH2 0x457 PUSH2 0x67C PUSH2 0x887 JUMP JUMPDEST LT PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x4F76657220737570706C79 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A9 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD5391393 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x91D14854 SWAP2 DUP4 SWAP2 PUSH4 0xD5391393 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x709 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x72D SWAP2 SWAP1 PUSH2 0xEF8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x793 SWAP2 SWAP1 PUSH2 0xF11 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x7F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468697320436F6E7472616374206E6F742068617665207065726D697373696F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x37103A379036B4B73A17 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A9 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x40D097C3 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x40D097C3 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x83C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x850 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 PUSH1 0x2 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x50A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH2 0x8ED DUP2 PUSH2 0xBCF JUMP JUMPDEST PUSH2 0x438 DUP4 DUP4 PUSH2 0xC47 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 DUP2 PUSH2 0xBCF JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA8 SHL MUL PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SUB PUSH2 0x933 JUMPI POP PUSH1 0x0 PUSH2 0x9B6 JUMP JUMPDEST PUSH2 0x9B3 DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SLOAD PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP12 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP10 SWAP1 MSTORE SWAP1 SWAP4 POP PUSH1 0x54 ADD SWAP2 POP PUSH2 0x998 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xCAE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x5C975ABB PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x5C975ABB SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA08 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x52E SWAP2 SWAP1 PUSH2 0xF11 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xA3B DUP4 PUSH1 0x2 PUSH2 0xF44 JUMP JUMPDEST PUSH2 0xA46 SWAP1 PUSH1 0x2 PUSH2 0xF63 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA5E JUMPI PUSH2 0xA5E PUSH2 0xF7B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA88 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xAA3 JUMPI PUSH2 0xAA3 PUSH2 0xF91 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xAD2 JUMPI PUSH2 0xAD2 PUSH2 0xF91 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0xAF6 DUP5 PUSH1 0x2 PUSH2 0xF44 JUMP JUMPDEST PUSH2 0xB01 SWAP1 PUSH1 0x1 PUSH2 0xF63 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xB79 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0xB35 JUMPI PUSH2 0xB35 PUSH2 0xF91 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB4B JUMPI PUSH2 0xB4B PUSH2 0xF91 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0xB72 DUP2 PUSH2 0xFA7 JUMP JUMPDEST SWAP1 POP PUSH2 0xB04 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xBC8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xBD9 DUP2 CALLER PUSH2 0xCC4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xBE6 DUP3 DUP3 PUSH2 0x85C JUMP JUMPDEST PUSH2 0x4BC JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP7 MSTORE SWAP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0xC51 DUP3 DUP3 PUSH2 0x85C JUMP JUMPDEST ISZERO PUSH2 0x4BC JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xCBB DUP6 DUP5 PUSH2 0xD28 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xCCE DUP3 DUP3 PUSH2 0x85C JUMP JUMPDEST PUSH2 0x4BC JUMPI PUSH2 0xCE6 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0xA2C JUMP JUMPDEST PUSH2 0xCF1 DUP4 PUSH1 0x20 PUSH2 0xA2C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD02 SWAP3 SWAP2 SWAP1 PUSH2 0xFEE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x4A9 SWAP2 PUSH1 0x4 ADD PUSH2 0x1063 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xD94 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD4A JUMPI PUSH2 0xD4A PUSH2 0xF91 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0xD70 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP PUSH2 0xD81 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0xD8C DUP2 PUSH2 0x1096 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD2D JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xBC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xBD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBC8 DUP2 PUSH2 0xDDF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xE44 DUP2 PUSH2 0xE0A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBC8 DUP2 PUSH2 0xE0A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xEBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xED2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP7 POP SWAP5 POP POP DUP6 ADD CALLDATALOAD PUSH2 0xEE8 DUP2 PUSH2 0xE0A JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x40 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBC8 DUP2 PUSH2 0xDDF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xF5E JUMPI PUSH2 0xF5E PUSH2 0xF2E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xF76 JUMPI PUSH2 0xF76 PUSH2 0xF2E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xFB6 JUMPI PUSH2 0xFB6 PUSH2 0xF2E JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFD9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xFC1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xFE8 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x1026 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xFBE JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x1057 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xFBE JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1082 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x10A8 JUMPI PUSH2 0x10A8 PUSH2 0xF2E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 0xA5 CHAINID NUMBER 0xEE ORIGIN SWAP9 0xE7 PC CALL DUP15 0xD7 PUSH1 0x80 0xBD 0xC0 SWAP13 0x2E 0xB8 0xFC 0xD6 BASEFEE PUSH31 0x36C7451AB4543F7C0E64736F6C634300080F00330000000000000000000000 ",
							"sourceMap": "244:1737:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:202:0;;;;;;;;;;-1:-1:-1;2606:202:0;;;;;:::i;:::-;;:::i;:::-;;;470:14:12;;463:22;445:41;;433:2;418:18;2606:202:0;;;;;;;;4391:129;;;;;;;;;;-1:-1:-1;4391:129:0;;;;;:::i;:::-;4465:7;4491:12;;;:6;:12;;;;;;;;:22;;;4391:129;;;;828:25:12;;;816:2;801:18;4391:129:0;682:177:12;319:36:10;;;;;;;;;;-1:-1:-1;319:36:10;;;;-1:-1:-1;;;;;319:36:10;;;;;;-1:-1:-1;;;;;1048:32:12;;;1030:51;;1018:2;1003:18;319:36:10;864:223:12;969:121:10;;;;;;;;;;-1:-1:-1;969:121:10;;;;;:::i;:::-;;:::i;:::-;;161:25:11;;;;;;;;;;;;;;;;4770:145:0;;;;;;;;;;-1:-1:-1;4770:145:0;;;;;:::i;:::-;;:::i;5787:214::-;;;;;;;;;;-1:-1:-1;5787:214:0;;;;;:::i;:::-;;:::i;1765:108:10:-;;;;;;;;;;;;;:::i;687:139::-;;;;;;;;;;-1:-1:-1;687:139:10;;;;;:::i;:::-;;:::i;1102:122::-;;;;;;;;;;-1:-1:-1;1102:122:10;;;;;:::i;:::-;;:::i;1232:405::-;;;;;;:::i;:::-;;:::i;2895:145:0:-;;;;;;;;;;-1:-1:-1;2895:145:0;;;;;:::i;:::-;;:::i;395:27:10:-;;;;;;;;;;-1:-1:-1;395:27:10;;;;-1:-1:-1;;;395:27:10;;;;;;2027:49:0;;;;;;;;;;-1:-1:-1;2027:49:0;2072:4;2027:49;;362:26:10;;;;;;;;;;-1:-1:-1;362:26:10;;;;-1:-1:-1;;;362:26:10;;;;;;1645:112;;;;;;;;;;;;;:::i;5149:147:0:-;;;;;;;;;;-1:-1:-1;5149:147:0;;;;;:::i;:::-;;:::i;834:127:10:-;;;;;;;;;;-1:-1:-1;834:127:10;;;;;:::i;:::-;;:::i;195:409:11:-;;;;;;;;;;-1:-1:-1;195:409:11;;;;;:::i;:::-;;:::i;1881:97:10:-;;;;;;;;;;;;;:::i;2606:202:0:-;2691:4;-1:-1:-1;;;;;;2714:47:0;;-1:-1:-1;;;2714:47:0;;:87;;-1:-1:-1;;;;;;;;;;937:40:7;;;2765:36:0;2707:94;2606:202;-1:-1:-1;;2606:202:0:o;969:121:10:-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;1058:14:10::1;:24:::0;;;::::1;;-1:-1:-1::0;;;1058:24:10::1;-1:-1:-1::0;;;;1058:24:10;;::::1;::::0;;;::::1;::::0;;969:121::o;4770:145:0:-;4465:7;4491:12;;;:6;:12;;;;;;;;:22;;2505:16;2516:4;2505:10;:16::i;:::-;4883:25:::1;4894:4;4900:7;4883:10;:25::i;:::-;4770:145:::0;;;:::o;5787:214::-;-1:-1:-1;;;;;5882:23:0;;719:10:4;5882:23:0;5874:83;;;;-1:-1:-1;;;5874:83:0;;3587:2:12;5874:83:0;;;3569:21:12;3626:2;3606:18;;;3599:30;3665:34;3645:18;;;3638:62;-1:-1:-1;;;3716:18:12;;;3709:45;3771:19;;5874:83:0;;;;;;;;;5968:26;5980:4;5986:7;5968:11;:26::i;:::-;5787:214;;:::o;1765:108:10:-;1837:16;;:28;;;-1:-1:-1;;;1837:28:10;;;;1810:7;;-1:-1:-1;;;;;1837:16:10;;:26;;:28;;;;;;;;;;;;;;:16;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1830:35;;1765:108;:::o;687:139::-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;790:16:10::1;:28:::0;;-1:-1:-1;;;;;;790:28:10::1;-1:-1:-1::0;;;;;790:28:10;;;::::1;::::0;;;::::1;::::0;;687:139::o;1102:122::-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;1192:10:10::1;:24:::0;1102:122::o;1232:405::-;1744:1:2;2325:7;;:19;2317:63;;;;-1:-1:-1;;;2317:63:2;;4192:2:12;2317:63:2;;;4174:21:12;4231:2;4211:18;;;4204:30;4270:33;4250:18;;;4243:61;4321:18;;2317:63:2;3990:355:12;2317:63:2;1744:1;2455:18;;617:9:10::1;:7;:9::i;:::-;:18;609:50;;;::::0;-1:-1:-1;;;609:50:10;;4552:2:12;609:50:10::1;::::0;::::1;4534:21:12::0;4591:2;4571:18;;;4564:30;-1:-1:-1;;;4610:18:12;;;4603:50;4670:18;;609:50:10::1;4350:344:12::0;609:50:10::1;1325:15:::2;::::0;-1:-1:-1;;;1325:15:10;::::2;;;:23;;1344:4;1325:23;1317:63;;;::::0;-1:-1:-1;;;1317:63:10;;4901:2:12;1317:63:10::2;::::0;::::2;4883:21:12::0;4940:2;4920:18;;;4913:30;4979:29;4959:18;;;4952:57;5026:18;;1317:63:10::2;4699:351:12::0;1317:63:10::2;1418:4;1399:16;:14;:16::i;:::-;:23;1391:47;;;::::0;-1:-1:-1;;;1391:47:10;;5257:2:12;1391:47:10::2;::::0;::::2;5239:21:12::0;5296:2;5276:18;;;5269:30;-1:-1:-1;;;5315:18:12;;;5308:41;5366:18;;1391:47:10::2;5055:335:12::0;1391:47:10::2;1457:16;::::0;1482:30:::2;::::0;;-1:-1:-1;;;1482:30:10;;;;-1:-1:-1;;;;;1457:16:10;;::::2;::::0;:24:::2;::::0;:16;;1482:28:::2;::::0;:30:::2;::::0;;::::2;::::0;::::2;::::0;;;;;;;;;1457:16;1482:30:::2;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1457:70;::::0;-1:-1:-1;;;;;;1457:70:10::2;::::0;;;;;;::::2;::::0;::::2;5758:25:12::0;;;;1521:4:10::2;5799:18:12::0;;;5792:60;5731:18;;1457:70:10::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:78;;1531:4;1457:78;1449:132;;;::::0;-1:-1:-1;;;1449:132:10;;6315:2:12;1449:132:10::2;::::0;::::2;6297:21:12::0;6354:2;6334:18;;;6327:30;6393:34;6373:18;;;6366:62;-1:-1:-1;;;6444:18:12;;;6437:40;6494:19;;1449:132:10::2;6113:406:12::0;1449:132:10::2;1592:16;::::0;:37:::2;::::0;-1:-1:-1;;;1592:37:10;;1618:10:::2;1592:37;::::0;::::2;1030:51:12::0;-1:-1:-1;;;;;1592:16:10;;::::2;::::0;:25:::2;::::0;1003:18:12;;1592:37:10::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;-1:-1:-1::0;;1701:1:2;2628:7;:22;-1:-1:-1;;;1232:405:10:o;2895:145:0:-;2981:4;3004:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;;;;2895:145::o;1645:112:10:-;1719:16;;:30;;;-1:-1:-1;;;1719:30:10;;;;1692:7;;-1:-1:-1;;;;;1719:16:10;;:28;;:30;;;;;;;;;;;;;;:16;:30;;;;;;;;;;;;;;5149:147:0;4465:7;4491:12;;;:6;:12;;;;;;;;:22;;2505:16;2516:4;2505:10;:16::i;:::-;5263:26:::1;5275:4;5281:7;5263:11;:26::i;834:127:10:-:0;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;928:15:10::1;:25:::0;;;::::1;;-1:-1:-1::0;;;928:25:10::1;-1:-1:-1::0;;;;928:25:10;;::::1;::::0;;;::::1;::::0;;834:127::o;195:409:11:-;335:4;356:10;;:15;;352:60;;-1:-1:-1;395:5:11;388:12;;352:60;444:152;481:6;;444:152;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;506:10:11;545:35;;-1:-1:-1;;6909:2:12;6905:15;;;6901:53;545:35:11;;;6889:66:12;6971:12;;;6964:28;;;506:10:11;;-1:-1:-1;7008:12:12;;;-1:-1:-1;545:35:11;;-1:-1:-1;6732:294:12;545:35:11;;;;;;;;;;;;;535:46;;;;;;444:18;:152::i;:::-;424:172;;195:409;;;;;;;:::o;1881:97:10:-;1945:16;;:25;;;-1:-1:-1;;;1945:25:10;;;;1921:4;;-1:-1:-1;;;;;1945:16:10;;:23;;:25;;;;;;;;;;;;;;:16;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1588:441:5:-;1663:13;1688:19;1720:10;1724:6;1720:1;:10;:::i;:::-;:14;;1733:1;1720:14;:::i;:::-;1710:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1710:25:5;;1688:47;;-1:-1:-1;;;1745:6:5;1752:1;1745:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1745:15:5;;;;;;;;;-1:-1:-1;;;1770:6:5;1777:1;1770:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1770:15:5;;;;;;;;-1:-1:-1;1800:9:5;1812:10;1816:6;1812:1;:10;:::i;:::-;:14;;1825:1;1812:14;:::i;:::-;1800:26;;1795:132;1832:1;1828;:5;1795:132;;;-1:-1:-1;;;1879:5:5;1887:3;1879:11;1866:25;;;;;;;:::i;:::-;;;;1854:6;1861:1;1854:9;;;;;;;;:::i;:::-;;;;:37;-1:-1:-1;;;;;1854:37:5;;;;;;;;-1:-1:-1;1915:1:5;1905:11;;;;;1835:3;;;:::i;:::-;;;1795:132;;;-1:-1:-1;1944:10:5;;1936:55;;;;-1:-1:-1;;;1936:55:5;;8076:2:12;1936:55:5;;;8058:21:12;;;8095:18;;;8088:30;8154:34;8134:18;;;8127:62;8206:18;;1936:55:5;7874:356:12;1936:55:5;2015:6;1588:441;-1:-1:-1;;;1588:441:5:o;3334:103:0:-;3400:30;3411:4;719:10:4;3400::0;:30::i;:::-;3334:103;:::o;7244:233::-;7327:22;7335:4;7341:7;7327;:22::i;:::-;7322:149;;7365:12;;;;7397:4;7365:12;;;;;;;;-1:-1:-1;;;;;7365:29:0;;;;;;;;;;:36;;-1:-1:-1;;7365:36:0;;;;;;;7420:40;;719:10:4;;7365:12:0;;7420:40;;7365:12;7420:40;7244:233;;:::o;7602:234::-;7685:22;7693:4;7699:7;7685;:22::i;:::-;7681:149;;;7755:5;7723:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;7723:29:0;;;;;;;;;;:37;;-1:-1:-1;;7723:37:0;;;7779:40;719:10:4;;7723:12:0;;7779:40;;7755:5;7779:40;7602:234;;:::o;1154:184:6:-;1275:4;1327;1298:25;1311:5;1318:4;1298:12;:25::i;:::-;:33;;1154:184;-1:-1:-1;;;;1154:184:6:o;3718:492:0:-;3806:22;3814:4;3820:7;3806;:22::i;:::-;3801:403;;3989:41;4017:7;-1:-1:-1;;;;;3989:41:0;4027:2;3989:19;:41::i;:::-;4101:38;4129:4;4136:2;4101:19;:38::i;:::-;3896:265;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3896:265:0;;;;;;;;;;-1:-1:-1;;;3844:349:0;;;;;;;:::i;1689:662:6:-;1772:7;1814:4;1772:7;1828:488;1852:5;:12;1848:1;:16;1828:488;;;1885:20;1908:5;1914:1;1908:8;;;;;;;;:::i;:::-;;;;;;;1885:31;;1950:12;1934;:28;1930:376;;2425:13;2473:15;;;2508:4;2501:15;;;2554:4;2538:21;;2060:57;;1930:376;;;2425:13;2473:15;;;2508:4;2501:15;;;2554:4;2538:21;;2234:57;;1930:376;-1:-1:-1;1866:3:6;;;;:::i;:::-;;;;1828:488;;;-1:-1:-1;2332:12:6;1689:662;-1:-1:-1;;;1689:662:6:o;14:286:12:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:12;;209:43;;199:71;;266:1;263;256:12;497:180;556:6;609:2;597:9;588:7;584:23;580:32;577:52;;;625:1;622;615:12;577:52;-1:-1:-1;648:23:12;;497:180;-1:-1:-1;497:180:12:o;1092:118::-;1178:5;1171:13;1164:21;1157:5;1154:32;1144:60;;1200:1;1197;1190:12;1215:241;1271:6;1324:2;1312:9;1303:7;1299:23;1295:32;1292:52;;;1340:1;1337;1330:12;1292:52;1379:9;1366:23;1398:28;1420:5;1398:28;:::i;1461:131::-;-1:-1:-1;;;;;1536:31:12;;1526:42;;1516:70;;1582:1;1579;1572:12;1597:315;1665:6;1673;1726:2;1714:9;1705:7;1701:23;1697:32;1694:52;;;1742:1;1739;1732:12;1694:52;1778:9;1765:23;1755:33;;1838:2;1827:9;1823:18;1810:32;1851:31;1876:5;1851:31;:::i;:::-;1901:5;1891:15;;;1597:315;;;;;:::o;2099:267::-;2178:6;2231:2;2219:9;2210:7;2206:23;2202:32;2199:52;;;2247:1;2244;2237:12;2199:52;2286:9;2273:23;2305:31;2330:5;2305:31;:::i;2556:824::-;2660:6;2668;2676;2684;2737:2;2725:9;2716:7;2712:23;2708:32;2705:52;;;2753:1;2750;2743:12;2705:52;2793:9;2780:23;2822:18;2863:2;2855:6;2852:14;2849:34;;;2879:1;2876;2869:12;2849:34;2917:6;2906:9;2902:22;2892:32;;2962:7;2955:4;2951:2;2947:13;2943:27;2933:55;;2984:1;2981;2974:12;2933:55;3024:2;3011:16;3050:2;3042:6;3039:14;3036:34;;;3066:1;3063;3056:12;3036:34;3121:7;3114:4;3104:6;3101:1;3097:14;3093:2;3089:23;3085:34;3082:47;3079:67;;;3142:1;3139;3132:12;3079:67;3173:4;3165:13;;;;-1:-1:-1;3197:6:12;-1:-1:-1;;3238:20:12;;3225:34;3268:31;3225:34;3268:31;:::i;:::-;2556:824;;;;-1:-1:-1;3318:5:12;;3370:2;3355:18;3342:32;;-1:-1:-1;;2556:824:12:o;3801:184::-;3871:6;3924:2;3912:9;3903:7;3899:23;3895:32;3892:52;;;3940:1;3937;3930:12;3892:52;-1:-1:-1;3963:16:12;;3801:184;-1:-1:-1;3801:184:12:o;5863:245::-;5930:6;5983:2;5971:9;5962:7;5958:23;5954:32;5951:52;;;5999:1;5996;5989:12;5951:52;6031:9;6025:16;6050:28;6072:5;6050:28;:::i;7031:127::-;7092:10;7087:3;7083:20;7080:1;7073:31;7123:4;7120:1;7113:15;7147:4;7144:1;7137:15;7163:168;7203:7;7269:1;7265;7261:6;7257:14;7254:1;7251:21;7246:1;7239:9;7232:17;7228:45;7225:71;;;7276:18;;:::i;:::-;-1:-1:-1;7316:9:12;;7163:168::o;7336:128::-;7376:3;7407:1;7403:6;7400:1;7397:13;7394:39;;;7413:18;;:::i;:::-;-1:-1:-1;7449:9:12;;7336:128::o;7469:127::-;7530:10;7525:3;7521:20;7518:1;7511:31;7561:4;7558:1;7551:15;7585:4;7582:1;7575:15;7601:127;7662:10;7657:3;7653:20;7650:1;7643:31;7693:4;7690:1;7683:15;7717:4;7714:1;7707:15;7733:136;7772:3;7800:5;7790:39;;7809:18;;:::i;:::-;-1:-1:-1;;;7845:18:12;;7733:136::o;8235:258::-;8307:1;8317:113;8331:6;8328:1;8325:13;8317:113;;;8407:11;;;8401:18;8388:11;;;8381:39;8353:2;8346:10;8317:113;;;8448:6;8445:1;8442:13;8439:48;;;8483:1;8474:6;8469:3;8465:16;8458:27;8439:48;;8235:258;;;:::o;8498:786::-;8909:25;8904:3;8897:38;8879:3;8964:6;8958:13;8980:62;9035:6;9030:2;9025:3;9021:12;9014:4;9006:6;9002:17;8980:62;:::i;:::-;-1:-1:-1;;;9101:2:12;9061:16;;;9093:11;;;9086:40;9151:13;;9173:63;9151:13;9222:2;9214:11;;9207:4;9195:17;;9173:63;:::i;:::-;9256:17;9275:2;9252:26;;8498:786;-1:-1:-1;;;;8498:786:12:o;9289:383::-;9438:2;9427:9;9420:21;9401:4;9470:6;9464:13;9513:6;9508:2;9497:9;9493:18;9486:34;9529:66;9588:6;9583:2;9572:9;9568:18;9563:2;9555:6;9551:15;9529:66;:::i;:::-;9656:2;9635:15;-1:-1:-1;;9631:29:12;9616:45;;;;9663:2;9612:54;;9289:383;-1:-1:-1;;9289:383:12:o;9677:135::-;9716:3;9737:17;;;9734:43;;9757:18;;:::i;:::-;-1:-1:-1;9804:1:12;9793:13;;9677:135::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "865000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DEFAULT_ADMIN_ROLE()": "284",
								"changeFreeMintOpen(bool)": "infinite",
								"changeNagaKidsContract(address)": "infinite",
								"changeWhitelistMintOpen(bool)": "infinite",
								"getMaxSupply()": "infinite",
								"getRoleAdmin(bytes32)": "2496",
								"getTotalSupply()": "infinite",
								"grantRole(bytes32,address)": "infinite",
								"hasRole(bytes32,address)": "2698",
								"isFreeMintOpen()": "2427",
								"isPause()": "infinite",
								"isWhitelist(bytes32[],address,uint256)": "infinite",
								"isWhitelistOpen()": "2383",
								"merkleRoot()": "2407",
								"nagaKidsContract()": "2405",
								"renounceRole(bytes32,address)": "29045",
								"revokeRole(bytes32,address)": "infinite",
								"setMerkleRoot(bytes32)": "infinite",
								"supportsInterface(bytes4)": "450",
								"whitelistMint(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 244,
									"end": 1981,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 244,
									"end": 1981,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 244,
									"end": 1981,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 431,
									"end": 572,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 431,
									"end": 572,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 431,
									"end": 572,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 431,
									"end": 572,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "PUSHSIZE",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "CODESIZE",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "PUSHSIZE",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 431,
									"end": 572,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 431,
									"end": 572,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 431,
									"end": 572,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "tag",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 431,
									"end": 572,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1813,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 478,
									"end": 520,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "8"
								},
								{
									"begin": 2072,
									"end": 2076,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 509,
									"end": 519,
									"name": "CALLER",
									"source": 10
								},
								{
									"begin": 478,
									"end": 488,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "9"
								},
								{
									"begin": 478,
									"end": 520,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 478,
									"end": 520,
									"name": "tag",
									"source": 10,
									"value": "8"
								},
								{
									"begin": 478,
									"end": 520,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 531,
									"end": 564,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "10"
								},
								{
									"begin": 554,
									"end": 563,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 531,
									"end": 553,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 531,
									"end": 564,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 531,
									"end": 564,
									"name": "tag",
									"source": 10,
									"value": "10"
								},
								{
									"begin": 531,
									"end": 564,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 431,
									"end": 572,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 244,
									"end": 1981,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "69"
								},
								{
									"begin": 244,
									"end": 1981,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 7244,
									"end": 7477,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 7244,
									"end": 7477,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2981,
									"end": 2985,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 7322,
									"end": 7471,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 7322,
									"end": 7471,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 7397,
									"end": 7401,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "DUP7",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "DUP7",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7394,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7401,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 719,
									"end": 729,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "PUSH",
									"source": 0,
									"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 7365,
									"end": 7377,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 7420,
									"end": 7460,
									"name": "LOG4",
									"source": 0
								},
								{
									"begin": 7322,
									"end": 7471,
									"name": "tag",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 7322,
									"end": 7471,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 7244,
									"end": 7477,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 7244,
									"end": 7477,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 7244,
									"end": 7477,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 687,
									"end": 826,
									"name": "tag",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 687,
									"end": 826,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2072,
									"end": 2076,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2505,
									"end": 2521,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2072,
									"end": 2076,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2505,
									"end": 2515,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "21"
								},
								{
									"begin": 2505,
									"end": 2521,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 2505,
									"end": 2521,
									"name": "tag",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2505,
									"end": 2521,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 790,
									"end": 806,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 790,
									"end": 818,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 790,
									"end": 818,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 790,
									"end": 818,
									"modifierDepth": 1,
									"name": "AND",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 790,
									"end": 818,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 790,
									"end": 818,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 790,
									"end": 818,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 790,
									"end": 818,
									"modifierDepth": 1,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 790,
									"end": 818,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 790,
									"end": 818,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 790,
									"end": 818,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 790,
									"end": 818,
									"modifierDepth": 1,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 790,
									"end": 818,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 790,
									"end": 818,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 687,
									"end": 826,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3334,
									"end": 3437,
									"name": "tag",
									"source": 0,
									"value": "21"
								},
								{
									"begin": 3334,
									"end": 3437,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3400,
									"end": 3430,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "26"
								},
								{
									"begin": 3411,
									"end": 3415,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 3400,
									"end": 3410,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "28"
								},
								{
									"begin": 3400,
									"end": 3430,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3400,
									"end": 3430,
									"name": "tag",
									"source": 0,
									"value": "26"
								},
								{
									"begin": 3400,
									"end": 3430,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3334,
									"end": 3437,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3334,
									"end": 3437,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3718,
									"end": 4210,
									"name": "tag",
									"source": 0,
									"value": "28"
								},
								{
									"begin": 3718,
									"end": 4210,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2981,
									"end": 2985,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3801,
									"end": 4204,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 3801,
									"end": 4204,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 3989,
									"end": 4030,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "32"
								},
								{
									"begin": 4017,
									"end": 4024,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3989,
									"end": 4030,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 4027,
									"end": 4029,
									"name": "PUSH",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 3989,
									"end": 4008,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "33"
								},
								{
									"begin": 3989,
									"end": 4008,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 3989,
									"end": 4008,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 3989,
									"end": 4008,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18446744073709551735"
								},
								{
									"begin": 3989,
									"end": 4008,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3989,
									"end": 4030,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 3989,
									"end": 4030,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 3989,
									"end": 4030,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3989,
									"end": 4030,
									"name": "tag",
									"source": 0,
									"value": "32"
								},
								{
									"begin": 3989,
									"end": 4030,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4139,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "34"
								},
								{
									"begin": 4129,
									"end": 4133,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 4136,
									"end": 4138,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 4101,
									"end": 4120,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18446744073709551735"
								},
								{
									"begin": 4101,
									"end": 4120,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "33"
								},
								{
									"begin": 4101,
									"end": 4120,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4120,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4120,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4139,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4139,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4139,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 4101,
									"end": 4139,
									"name": "tag",
									"source": 0,
									"value": "34"
								},
								{
									"begin": 4101,
									"end": 4139,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "35"
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "36"
								},
								{
									"begin": 3896,
									"end": 4161,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "tag",
									"source": 0,
									"value": "35"
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3896,
									"end": 4161,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "37"
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "38"
								},
								{
									"begin": 3844,
									"end": 4193,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "tag",
									"source": 0,
									"value": "37"
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3844,
									"end": 4193,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1588,
									"end": 2029,
									"name": "tag",
									"source": 5,
									"value": "33"
								},
								{
									"begin": 1588,
									"end": 2029,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1663,
									"end": 1676,
									"name": "PUSH",
									"source": 5,
									"value": "60"
								},
								{
									"begin": 1688,
									"end": 1707,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1720,
									"end": 1730,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1724,
									"end": 1730,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 1720,
									"end": 1721,
									"name": "PUSH",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 1720,
									"end": 1730,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "41"
								},
								{
									"begin": 1720,
									"end": 1730,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1720,
									"end": 1730,
									"name": "tag",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1720,
									"end": 1730,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1720,
									"end": 1734,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "42"
								},
								{
									"begin": 1720,
									"end": 1734,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1733,
									"end": 1734,
									"name": "PUSH",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 1720,
									"end": 1734,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "43"
								},
								{
									"begin": 1720,
									"end": 1734,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1720,
									"end": 1734,
									"name": "tag",
									"source": 5,
									"value": "42"
								},
								{
									"begin": 1720,
									"end": 1734,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "GT",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "45"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "45"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "46"
								},
								{
									"begin": 1710,
									"end": 1735,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "tag",
									"source": 5,
									"value": "45"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH",
									"source": 5,
									"value": "1F"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH",
									"source": 5,
									"value": "1F"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "NOT",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "47"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "CALLDATASIZE",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "CALLDATACOPY",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "tag",
									"source": 5,
									"value": "47"
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1710,
									"end": 1735,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1688,
									"end": 1735,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1688,
									"end": 1735,
									"name": "POP",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FC"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1745,
									"end": 1751,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1752,
									"end": 1753,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "LT",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "49"
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "49"
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "50"
								},
								{
									"begin": 1745,
									"end": 1754,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "tag",
									"source": 5,
									"value": "49"
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1754,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "NOT",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 1745,
									"end": 1760,
									"name": "POP",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FB"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1770,
									"end": 1776,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1777,
									"end": 1778,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "LT",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "52"
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "52"
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "50"
								},
								{
									"begin": 1770,
									"end": 1779,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "tag",
									"source": 5,
									"value": "52"
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1779,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "NOT",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1770,
									"end": 1785,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1800,
									"end": 1809,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1812,
									"end": 1822,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "56"
								},
								{
									"begin": 1816,
									"end": 1822,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 1812,
									"end": 1813,
									"name": "PUSH",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 1812,
									"end": 1822,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "41"
								},
								{
									"begin": 1812,
									"end": 1822,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1812,
									"end": 1822,
									"name": "tag",
									"source": 5,
									"value": "56"
								},
								{
									"begin": 1812,
									"end": 1822,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1812,
									"end": 1826,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "57"
								},
								{
									"begin": 1812,
									"end": 1826,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1825,
									"end": 1826,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1812,
									"end": 1826,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "43"
								},
								{
									"begin": 1812,
									"end": 1826,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1812,
									"end": 1826,
									"name": "tag",
									"source": 5,
									"value": "57"
								},
								{
									"begin": 1812,
									"end": 1826,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1800,
									"end": 1826,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1800,
									"end": 1826,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "tag",
									"source": 5,
									"value": "53"
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1832,
									"end": 1833,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1828,
									"end": 1829,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1828,
									"end": 1833,
									"name": "GT",
									"source": 5
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "54"
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "181899199A1A9B1B9C1CB0B131B232B3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "81"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1879,
									"end": 1884,
									"name": "DUP6",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 1890,
									"name": "PUSH",
									"source": 5,
									"value": "F"
								},
								{
									"begin": 1879,
									"end": 1890,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "PUSH",
									"source": 5,
									"value": "10"
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "LT",
									"source": 5
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "59"
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "59"
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "50"
								},
								{
									"begin": 1866,
									"end": 1891,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "tag",
									"source": 5,
									"value": "59"
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "PUSH",
									"source": 5,
									"value": "F8"
								},
								{
									"begin": 1866,
									"end": 1891,
									"name": "SHL",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1860,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1861,
									"end": 1862,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "LT",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "61"
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "61"
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "50"
								},
								{
									"begin": 1854,
									"end": 1863,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "tag",
									"source": 5,
									"value": "61"
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1863,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "NOT",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1854,
									"end": 1891,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1915,
									"end": 1916,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1905,
									"end": 1916,
									"name": "SWAP5",
									"source": 5
								},
								{
									"begin": 1905,
									"end": 1916,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1905,
									"end": 1916,
									"name": "SWAP5",
									"source": 5
								},
								{
									"begin": 1905,
									"end": 1916,
									"name": "SHR",
									"source": 5
								},
								{
									"begin": 1905,
									"end": 1916,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "62"
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "63"
								},
								{
									"begin": 1835,
									"end": 1838,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "tag",
									"source": 5,
									"value": "62"
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1835,
									"end": 1838,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "53"
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "tag",
									"source": 5,
									"value": "54"
								},
								{
									"begin": 1795,
									"end": 1927,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1944,
									"end": 1954,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 1944,
									"end": 1954,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "64"
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2816,
									"end": 2818,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 2798,
									"end": 2819,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2798,
									"end": 2819,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2798,
									"end": 2819,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2835,
									"end": 2853,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 2835,
									"end": 2853,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2835,
									"end": 2853,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2828,
									"end": 2858,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2894,
									"end": 2928,
									"name": "PUSH",
									"source": 12,
									"value": "537472696E67733A20686578206C656E67746820696E73756666696369656E74"
								},
								{
									"begin": 2874,
									"end": 2892,
									"name": "PUSH",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 2874,
									"end": 2892,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2874,
									"end": 2892,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2867,
									"end": 2929,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2946,
									"end": 2964,
									"name": "PUSH",
									"source": 12,
									"value": "64"
								},
								{
									"begin": 2946,
									"end": 2964,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "37"
								},
								{
									"begin": 2614,
									"end": 2970,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "tag",
									"source": 5,
									"value": "64"
								},
								{
									"begin": 1936,
									"end": 1991,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 2015,
									"end": 2021,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 1588,
									"end": 2029,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1588,
									"end": 2029,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 14,
									"end": 324,
									"name": "tag",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 324,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 104,
									"end": 110,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 157,
									"end": 159,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 145,
									"end": 154,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 136,
									"end": 143,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 132,
									"end": 155,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 128,
									"end": 160,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 125,
									"end": 177,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 125,
									"end": 177,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "71"
								},
								{
									"begin": 125,
									"end": 177,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 173,
									"end": 174,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 170,
									"end": 171,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 163,
									"end": 175,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 125,
									"end": 177,
									"name": "tag",
									"source": 12,
									"value": "71"
								},
								{
									"begin": 125,
									"end": 177,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 199,
									"end": 215,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 199,
									"end": 215,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 244,
									"end": 275,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 244,
									"end": 275,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 234,
									"end": 276,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 234,
									"end": 276,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 224,
									"end": 294,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "64"
								},
								{
									"begin": 224,
									"end": 294,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 287,
									"end": 288,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 280,
									"end": 292,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 329,
									"end": 587,
									"name": "tag",
									"source": 12,
									"value": "67"
								},
								{
									"begin": 329,
									"end": 587,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 401,
									"end": 402,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 524,
									"name": "tag",
									"source": 12,
									"value": "74"
								},
								{
									"begin": 411,
									"end": 524,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 425,
									"end": 431,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 422,
									"end": 423,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 419,
									"end": 432,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 411,
									"end": 524,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 411,
									"end": 524,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "76"
								},
								{
									"begin": 411,
									"end": 524,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 501,
									"end": 512,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 501,
									"end": 512,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 501,
									"end": 512,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 495,
									"end": 513,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 482,
									"end": 493,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 482,
									"end": 493,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 482,
									"end": 493,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 475,
									"end": 514,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 447,
									"end": 449,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 440,
									"end": 450,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 411,
									"end": 524,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "74"
								},
								{
									"begin": 411,
									"end": 524,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 411,
									"end": 524,
									"name": "tag",
									"source": 12,
									"value": "76"
								},
								{
									"begin": 411,
									"end": 524,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 542,
									"end": 548,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 539,
									"end": 540,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 536,
									"end": 549,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 533,
									"end": 581,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 533,
									"end": 581,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "77"
								},
								{
									"begin": 533,
									"end": 581,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 577,
									"end": 578,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 568,
									"end": 574,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 563,
									"end": 566,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 559,
									"end": 575,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 552,
									"end": 579,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 533,
									"end": 581,
									"name": "tag",
									"source": 12,
									"value": "77"
								},
								{
									"begin": 533,
									"end": 581,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 533,
									"end": 581,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 329,
									"end": 587,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 329,
									"end": 587,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 329,
									"end": 587,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 329,
									"end": 587,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 592,
									"end": 1378,
									"name": "tag",
									"source": 12,
									"value": "36"
								},
								{
									"begin": 592,
									"end": 1378,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1003,
									"end": 1028,
									"name": "PUSH",
									"source": 12,
									"value": "416363657373436F6E74726F6C3A206163636F756E7420000000000000000000"
								},
								{
									"begin": 998,
									"end": 1001,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 991,
									"end": 1029,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 973,
									"end": 976,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1058,
									"end": 1064,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1052,
									"end": 1065,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1074,
									"end": 1136,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "79"
								},
								{
									"begin": 1129,
									"end": 1135,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1124,
									"end": 1126,
									"name": "PUSH",
									"source": 12,
									"value": "17"
								},
								{
									"begin": 1119,
									"end": 1122,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1115,
									"end": 1127,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1108,
									"end": 1112,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1100,
									"end": 1106,
									"name": "DUP9",
									"source": 12
								},
								{
									"begin": 1096,
									"end": 1113,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1074,
									"end": 1136,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "67"
								},
								{
									"begin": 1074,
									"end": 1136,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1074,
									"end": 1136,
									"name": "tag",
									"source": 12,
									"value": "79"
								},
								{
									"begin": 1074,
									"end": 1136,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1034B99036B4B9B9B4B733903937B6329"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "7D"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1195,
									"end": 1197,
									"name": "PUSH",
									"source": 12,
									"value": "17"
								},
								{
									"begin": 1155,
									"end": 1171,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1155,
									"end": 1171,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 1155,
									"end": 1171,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1187,
									"end": 1198,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1187,
									"end": 1198,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1187,
									"end": 1198,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1180,
									"end": 1220,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 1258,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 1258,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1267,
									"end": 1330,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 1245,
									"end": 1258,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1316,
									"end": 1318,
									"name": "PUSH",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 1308,
									"end": 1319,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 1308,
									"end": 1319,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1301,
									"end": 1305,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1289,
									"end": 1306,
									"name": "DUP9",
									"source": 12
								},
								{
									"begin": 1289,
									"end": 1306,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1267,
									"end": 1330,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "67"
								},
								{
									"begin": 1267,
									"end": 1330,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1267,
									"end": 1330,
									"name": "tag",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 1267,
									"end": 1330,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1350,
									"end": 1367,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1369,
									"end": 1371,
									"name": "PUSH",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 1346,
									"end": 1372,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1346,
									"end": 1372,
									"name": "SWAP5",
									"source": 12
								},
								{
									"begin": 592,
									"end": 1378,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 592,
									"end": 1378,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1383,
									"end": 1766,
									"name": "tag",
									"source": 12,
									"value": "38"
								},
								{
									"begin": 1383,
									"end": 1766,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1532,
									"end": 1534,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1521,
									"end": 1530,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1514,
									"end": 1535,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1495,
									"end": 1499,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1564,
									"end": 1570,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1558,
									"end": 1571,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1607,
									"end": 1613,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1602,
									"end": 1604,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1591,
									"end": 1600,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 1587,
									"end": 1605,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1580,
									"end": 1614,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1623,
									"end": 1689,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "82"
								},
								{
									"begin": 1682,
									"end": 1688,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1677,
									"end": 1679,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1666,
									"end": 1675,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1662,
									"end": 1680,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1657,
									"end": 1659,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1649,
									"end": 1655,
									"name": "DUP8",
									"source": 12
								},
								{
									"begin": 1645,
									"end": 1660,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1623,
									"end": 1689,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "67"
								},
								{
									"begin": 1623,
									"end": 1689,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1623,
									"end": 1689,
									"name": "tag",
									"source": 12,
									"value": "82"
								},
								{
									"begin": 1623,
									"end": 1689,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1750,
									"end": 1752,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 1729,
									"end": 1744,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1725,
									"end": 1754,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1710,
									"end": 1755,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1710,
									"end": 1755,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1710,
									"end": 1755,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1710,
									"end": 1755,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1757,
									"end": 1759,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1706,
									"end": 1760,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1706,
									"end": 1760,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 1383,
									"end": 1766,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1383,
									"end": 1766,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1771,
									"end": 1898,
									"name": "tag",
									"source": 12,
									"value": "68"
								},
								{
									"begin": 1771,
									"end": 1898,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1832,
									"end": 1842,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B71"
								},
								{
									"begin": 1827,
									"end": 1830,
									"name": "PUSH",
									"source": 12,
									"value": "E0"
								},
								{
									"begin": 1823,
									"end": 1843,
									"name": "SHL",
									"source": 12
								},
								{
									"begin": 1820,
									"end": 1821,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1813,
									"end": 1844,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1863,
									"end": 1867,
									"name": "PUSH",
									"source": 12,
									"value": "11"
								},
								{
									"begin": 1860,
									"end": 1861,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 1853,
									"end": 1868,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1887,
									"end": 1891,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 1884,
									"end": 1885,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1877,
									"end": 1892,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1903,
									"end": 2071,
									"name": "tag",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 1903,
									"end": 2071,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1943,
									"end": 1950,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2009,
									"end": 2010,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2005,
									"end": 2006,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2001,
									"end": 2007,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 1997,
									"end": 2011,
									"name": "DIV",
									"source": 12
								},
								{
									"begin": 1994,
									"end": 1995,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1991,
									"end": 2012,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 1986,
									"end": 1987,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1979,
									"end": 1988,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1972,
									"end": 1989,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1968,
									"end": 2013,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1965,
									"end": 2036,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1965,
									"end": 2036,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "86"
								},
								{
									"begin": 1965,
									"end": 2036,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2016,
									"end": 2034,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "86"
								},
								{
									"begin": 2016,
									"end": 2034,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "68"
								},
								{
									"begin": 2016,
									"end": 2034,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2016,
									"end": 2034,
									"name": "tag",
									"source": 12,
									"value": "86"
								},
								{
									"begin": 2016,
									"end": 2034,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2056,
									"end": 2065,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 2056,
									"end": 2065,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1903,
									"end": 2071,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2076,
									"end": 2204,
									"name": "tag",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 2076,
									"end": 2204,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2116,
									"end": 2119,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2147,
									"end": 2148,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2143,
									"end": 2149,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 2140,
									"end": 2141,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2137,
									"end": 2150,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 2134,
									"end": 2173,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 2134,
									"end": 2173,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "89"
								},
								{
									"begin": 2134,
									"end": 2173,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2153,
									"end": 2171,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "89"
								},
								{
									"begin": 2153,
									"end": 2171,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "68"
								},
								{
									"begin": 2153,
									"end": 2171,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2153,
									"end": 2171,
									"name": "tag",
									"source": 12,
									"value": "89"
								},
								{
									"begin": 2153,
									"end": 2171,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2189,
									"end": 2198,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2189,
									"end": 2198,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2076,
									"end": 2204,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2209,
									"end": 2336,
									"name": "tag",
									"source": 12,
									"value": "46"
								},
								{
									"begin": 2209,
									"end": 2336,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2270,
									"end": 2280,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B71"
								},
								{
									"begin": 2265,
									"end": 2268,
									"name": "PUSH",
									"source": 12,
									"value": "E0"
								},
								{
									"begin": 2261,
									"end": 2281,
									"name": "SHL",
									"source": 12
								},
								{
									"begin": 2258,
									"end": 2259,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2251,
									"end": 2282,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2301,
									"end": 2305,
									"name": "PUSH",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 2298,
									"end": 2299,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 2291,
									"end": 2306,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2325,
									"end": 2329,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 2322,
									"end": 2323,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2315,
									"end": 2330,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 2341,
									"end": 2468,
									"name": "tag",
									"source": 12,
									"value": "50"
								},
								{
									"begin": 2341,
									"end": 2468,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2402,
									"end": 2412,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B71"
								},
								{
									"begin": 2397,
									"end": 2400,
									"name": "PUSH",
									"source": 12,
									"value": "E0"
								},
								{
									"begin": 2393,
									"end": 2413,
									"name": "SHL",
									"source": 12
								},
								{
									"begin": 2390,
									"end": 2391,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2383,
									"end": 2414,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2433,
									"end": 2437,
									"name": "PUSH",
									"source": 12,
									"value": "32"
								},
								{
									"begin": 2430,
									"end": 2431,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 2423,
									"end": 2438,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2457,
									"end": 2461,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 2454,
									"end": 2455,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2447,
									"end": 2462,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 2473,
									"end": 2609,
									"name": "tag",
									"source": 12,
									"value": "63"
								},
								{
									"begin": 2473,
									"end": 2609,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2512,
									"end": 2515,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2540,
									"end": 2545,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2530,
									"end": 2569,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "94"
								},
								{
									"begin": 2530,
									"end": 2569,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2549,
									"end": 2567,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "94"
								},
								{
									"begin": 2549,
									"end": 2567,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "68"
								},
								{
									"begin": 2549,
									"end": 2567,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2549,
									"end": 2567,
									"name": "tag",
									"source": 12,
									"value": "94"
								},
								{
									"begin": 2549,
									"end": 2567,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2585,
									"end": 2603,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2585,
									"end": 2603,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2473,
									"end": 2609,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2614,
									"end": 2970,
									"name": "tag",
									"source": 12,
									"value": "69"
								},
								{
									"begin": 2614,
									"end": 2970,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 244,
									"end": 1981,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 1981,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 244,
									"end": 1981,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 1981,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 1981,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 244,
									"end": 1981,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 1981,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122083a54643ee3298e758f18ed76080bdc09c2eb8fcd6487e36c7451ab4543f7c0e64736f6c634300080f0033",
									".code": [
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "868FF4A2"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "C4E41B22"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "C4E41B22"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "D547741F"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "DD31A7BA"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "FEB2386E"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "FF0938A7"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "868FF4A2"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "91D14854"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "94F4504D"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "A217FDDF"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "A6F5F014"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "tag",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "2F2FF15D"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "2F2FF15D"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "36568ABE"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "4C0F38C2"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "61AEC205"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "7CB64759"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "tag",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "1FFC9A7"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "248A9CA3"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "27C25C20"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "28438F68"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "2EB4A7AB"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "tag",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 244,
											"end": 1981,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 2606,
											"end": 2808,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 2606,
											"end": 2808,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 470,
											"end": 484,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 470,
											"end": 484,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 463,
											"end": 485,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 445,
											"end": 486,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 445,
											"end": 486,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 433,
											"end": 435,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 418,
											"end": 436,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 4391,
											"end": 4520,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4497,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 828,
											"end": 853,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 828,
											"end": 853,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 828,
											"end": 853,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 816,
											"end": 818,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 801,
											"end": 819,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 682,
											"end": 859,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 319,
											"end": 355,
											"name": "tag",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 355,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 319,
											"end": 355,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 319,
											"end": 355,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 319,
											"end": 355,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 319,
											"end": 355,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 319,
											"end": 355,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 319,
											"end": 355,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 355,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 319,
											"end": 355,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 319,
											"end": 355,
											"name": "tag",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 319,
											"end": 355,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 319,
											"end": 355,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 355,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 319,
											"end": 355,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 355,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 355,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 319,
											"end": 355,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 319,
											"end": 355,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 319,
											"end": 355,
											"name": "tag",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 355,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 319,
											"end": 355,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 355,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1048,
											"end": 1080,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1048,
											"end": 1080,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1048,
											"end": 1080,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1030,
											"end": 1081,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1030,
											"end": 1081,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1018,
											"end": 1020,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1003,
											"end": 1021,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 319,
											"end": 355,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 864,
											"end": 1087,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "tag",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "tag",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 969,
											"end": 1090,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "tag",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 969,
											"end": 1090,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "tag",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 161,
											"end": 186,
											"name": "tag",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "tag",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 4770,
											"end": 4915,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 4770,
											"end": 4915,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 5787,
											"end": 6001,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 5787,
											"end": 6001,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "tag",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "tag",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 1765,
											"end": 1873,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"name": "tag",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 687,
											"end": 826,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 687,
											"end": 826,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 687,
											"end": 826,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"name": "tag",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 687,
											"end": 826,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 687,
											"end": 826,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 687,
											"end": 826,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 687,
											"end": 826,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 687,
											"end": 826,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 687,
											"end": 826,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"name": "tag",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 687,
											"end": 826,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 687,
											"end": 826,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "tag",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "tag",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 1102,
											"end": 1224,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "tag",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 1102,
											"end": 1224,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1232,
											"end": 1637,
											"name": "tag",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 1232,
											"end": 1637,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1232,
											"end": 1637,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 1232,
											"end": 1637,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 1232,
											"end": 1637,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1232,
											"end": 1637,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1232,
											"end": 1637,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 1232,
											"end": 1637,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1232,
											"end": 1637,
											"name": "tag",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 1232,
											"end": 1637,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1232,
											"end": 1637,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 1232,
											"end": 1637,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 2895,
											"end": 3040,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 2895,
											"end": 3040,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 395,
											"end": 422,
											"name": "tag",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 395,
											"end": 422,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 395,
											"end": 422,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 395,
											"end": 422,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 395,
											"end": 422,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 395,
											"end": 422,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 395,
											"end": 422,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 395,
											"end": 422,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 395,
											"end": 422,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 395,
											"end": 422,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 395,
											"end": 422,
											"name": "tag",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 395,
											"end": 422,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 395,
											"end": 422,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 395,
											"end": 422,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 395,
											"end": 422,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 395,
											"end": 422,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 395,
											"end": 422,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 395,
											"end": 422,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 395,
											"end": 422,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 395,
											"end": 422,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 395,
											"end": 422,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 395,
											"end": 422,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 362,
											"end": 388,
											"name": "tag",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 362,
											"end": 388,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 362,
											"end": 388,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 362,
											"end": 388,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 362,
											"end": 388,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 362,
											"end": 388,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "93"
										},
										{
											"begin": 362,
											"end": 388,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 362,
											"end": 388,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 362,
											"end": 388,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 362,
											"end": 388,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 362,
											"end": 388,
											"name": "tag",
											"source": 10,
											"value": "93"
										},
										{
											"begin": 362,
											"end": 388,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 362,
											"end": 388,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 362,
											"end": 388,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 362,
											"end": 388,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 362,
											"end": 388,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 362,
											"end": 388,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 362,
											"end": 388,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 362,
											"end": 388,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 362,
											"end": 388,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 362,
											"end": 388,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 362,
											"end": 388,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "tag",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "tag",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 1645,
											"end": 1757,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "tag",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 5149,
											"end": 5296,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 5149,
											"end": 5296,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 834,
											"end": 961,
											"name": "tag",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 834,
											"end": 961,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 834,
											"end": 961,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 834,
											"end": 961,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 834,
											"end": 961,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 834,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 834,
											"end": 961,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 834,
											"end": 961,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 834,
											"end": 961,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 834,
											"end": 961,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 834,
											"end": 961,
											"name": "tag",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 834,
											"end": 961,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 834,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 834,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 834,
											"end": 961,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 834,
											"end": 961,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 834,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 834,
											"end": 961,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 834,
											"end": 961,
											"name": "tag",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 834,
											"end": 961,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 834,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 834,
											"end": 961,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 195,
											"end": 604,
											"name": "tag",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "tag",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "111"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "112"
										},
										{
											"begin": 195,
											"end": 604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "tag",
											"source": 11,
											"value": "111"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "113"
										},
										{
											"begin": 195,
											"end": 604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "115"
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "tag",
											"source": 10,
											"value": "115"
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 1881,
											"end": 1978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2691,
											"end": 2695,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7965DB0B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 2714,
											"end": 2801,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 937,
											"end": 977,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2765,
											"end": 2801,
											"name": "tag",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 2765,
											"end": 2801,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2707,
											"end": 2801,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2606,
											"end": 2808,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "tag",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 969,
											"end": 1090,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 2505,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1058,
											"end": 1072,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 1058,
											"end": 1082,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1058,
											"end": 1082,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1058,
											"end": 1082,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1058,
											"end": 1082,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1058,
											"end": 1082,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1058,
											"end": 1082,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1058,
											"end": 1082,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1058,
											"end": 1082,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1058,
											"end": 1082,
											"modifierDepth": 1,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1058,
											"end": 1082,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1058,
											"end": 1082,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1058,
											"end": 1082,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1058,
											"end": 1082,
											"modifierDepth": 1,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 1058,
											"end": 1082,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1058,
											"end": 1082,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 969,
											"end": 1090,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4497,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 2505,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4883,
											"end": 4908,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 4894,
											"end": 4898,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4900,
											"end": 4907,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4883,
											"end": 4893,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 4883,
											"end": 4908,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4883,
											"end": 4908,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 4883,
											"end": 4908,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5882,
											"end": 5905,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5882,
											"end": 5905,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 5882,
											"end": 5905,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3587,
											"end": 3589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3569,
											"end": 3590,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3626,
											"end": 3628,
											"name": "PUSH",
											"source": 12,
											"value": "2F"
										},
										{
											"begin": 3606,
											"end": 3624,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 3606,
											"end": 3624,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3606,
											"end": 3624,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3629,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3665,
											"end": 3699,
											"name": "PUSH",
											"source": 12,
											"value": "416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365"
										},
										{
											"begin": 3645,
											"end": 3663,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 3645,
											"end": 3663,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3645,
											"end": 3663,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3638,
											"end": 3700,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "103937B632B9903337B91039B2B633"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3716,
											"end": 3734,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 3716,
											"end": 3734,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3716,
											"end": 3734,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3709,
											"end": 3754,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3771,
											"end": 3790,
											"name": "PUSH",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 3771,
											"end": 3790,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "tag",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "tag",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5968,
											"end": 5994,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 5980,
											"end": 5984,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5986,
											"end": 5993,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5968,
											"end": 5979,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 5968,
											"end": 5994,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5968,
											"end": 5994,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 5968,
											"end": 5994,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1853,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 1837,
											"end": 1853,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D5ABEB01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1810,
											"end": 1817,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1810,
											"end": 1817,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1837,
											"end": 1853,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1853,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1863,
											"name": "PUSH",
											"source": 10,
											"value": "D5ABEB01"
										},
										{
											"begin": 1837,
											"end": 1863,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1853,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "STATICCALL",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "tag",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 1837,
											"end": 1865,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "tag",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 1837,
											"end": 1865,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1830,
											"end": 1865,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1830,
											"end": 1865,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1873,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1765,
											"end": 1873,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"name": "tag",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 687,
											"end": 826,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 2505,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 790,
											"end": 806,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 790,
											"end": 818,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 790,
											"end": 818,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 790,
											"end": 818,
											"modifierDepth": 1,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 790,
											"end": 818,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 790,
											"end": 818,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 790,
											"end": 818,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 790,
											"end": 818,
											"modifierDepth": 1,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 790,
											"end": 818,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 790,
											"end": 818,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 790,
											"end": 818,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 790,
											"end": 818,
											"modifierDepth": 1,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 790,
											"end": 818,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 790,
											"end": 818,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 687,
											"end": 826,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "tag",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 1102,
											"end": 1224,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 2505,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1192,
											"end": 1202,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1192,
											"end": 1216,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1224,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1232,
											"end": 1637,
											"name": "tag",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 1232,
											"end": 1637,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "155"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4194,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4174,
											"end": 4195,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4231,
											"end": 4233,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 4211,
											"end": 4229,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 4211,
											"end": 4229,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4211,
											"end": 4229,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4204,
											"end": 4234,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4270,
											"end": 4303,
											"name": "PUSH",
											"source": 12,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 4250,
											"end": 4268,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 4250,
											"end": 4268,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4250,
											"end": 4268,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4243,
											"end": 4304,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4321,
											"end": 4339,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 4321,
											"end": 4339,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 3990,
											"end": 4345,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 2,
											"value": "155"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 617,
											"end": 626,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 617,
											"end": 624,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 617,
											"end": 626,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 626,
											"modifierDepth": 1,
											"name": "tag",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 617,
											"end": 626,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 617,
											"end": 635,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 609,
											"end": 659,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 609,
											"end": 659,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 609,
											"end": 659,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 609,
											"end": 659,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 609,
											"end": 659,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 609,
											"end": 659,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4552,
											"end": 4554,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 609,
											"end": 659,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 609,
											"end": 659,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 609,
											"end": 659,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4534,
											"end": 4555,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4591,
											"end": 4593,
											"name": "PUSH",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 4571,
											"end": 4589,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 4571,
											"end": 4589,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4571,
											"end": 4589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4564,
											"end": 4594,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2730B3B0A5B4B239903BB0B9902830BAB9B2B217"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "61"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4610,
											"end": 4628,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 4610,
											"end": 4628,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4610,
											"end": 4628,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4603,
											"end": 4653,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4670,
											"end": 4688,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 4670,
											"end": 4688,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 609,
											"end": 659,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 4350,
											"end": 4694,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 609,
											"end": 659,
											"modifierDepth": 1,
											"name": "tag",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 609,
											"end": 659,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1325,
											"end": 1340,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 1325,
											"end": 1340,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1325,
											"end": 1340,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1325,
											"end": 1340,
											"modifierDepth": 2,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 1325,
											"end": 1340,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 1325,
											"end": 1340,
											"modifierDepth": 2,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1325,
											"end": 1348,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1325,
											"end": 1348,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1344,
											"end": 1348,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1325,
											"end": 1348,
											"modifierDepth": 2,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1317,
											"end": 1380,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "164"
										},
										{
											"begin": 1317,
											"end": 1380,
											"modifierDepth": 2,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1317,
											"end": 1380,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1317,
											"end": 1380,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1317,
											"end": 1380,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1317,
											"end": 1380,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4901,
											"end": 4903,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1317,
											"end": 1380,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1317,
											"end": 1380,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1317,
											"end": 1380,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4883,
											"end": 4904,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4940,
											"end": 4942,
											"name": "PUSH",
											"source": 12,
											"value": "1B"
										},
										{
											"begin": 4920,
											"end": 4938,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 4920,
											"end": 4938,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4920,
											"end": 4938,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4913,
											"end": 4943,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4979,
											"end": 5008,
											"name": "PUSH",
											"source": 12,
											"value": "57686974656C697374206E6F74206F70656E20746F206D696E742E0000000000"
										},
										{
											"begin": 4959,
											"end": 4977,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 4959,
											"end": 4977,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4959,
											"end": 4977,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4952,
											"end": 5009,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5026,
											"end": 5044,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 5026,
											"end": 5044,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1317,
											"end": 1380,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 4699,
											"end": 5050,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1317,
											"end": 1380,
											"modifierDepth": 2,
											"name": "tag",
											"source": 10,
											"value": "164"
										},
										{
											"begin": 1317,
											"end": 1380,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1418,
											"end": 1422,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "457"
										},
										{
											"begin": 1399,
											"end": 1415,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 1399,
											"end": 1413,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 1399,
											"end": 1415,
											"jumpType": "[in]",
											"modifierDepth": 2,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1399,
											"end": 1415,
											"modifierDepth": 2,
											"name": "tag",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 1399,
											"end": 1415,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1399,
											"end": 1422,
											"modifierDepth": 2,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1391,
											"end": 1438,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 1391,
											"end": 1438,
											"modifierDepth": 2,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1391,
											"end": 1438,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1391,
											"end": 1438,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1391,
											"end": 1438,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1391,
											"end": 1438,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5257,
											"end": 5259,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1391,
											"end": 1438,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1391,
											"end": 1438,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1391,
											"end": 1438,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5239,
											"end": 5260,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5296,
											"end": 5298,
											"name": "PUSH",
											"source": 12,
											"value": "B"
										},
										{
											"begin": 5276,
											"end": 5294,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 5276,
											"end": 5294,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5276,
											"end": 5294,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5269,
											"end": 5299,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4F76657220737570706C79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5315,
											"end": 5333,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 5315,
											"end": 5333,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5315,
											"end": 5333,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5308,
											"end": 5349,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5366,
											"end": 5384,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 5366,
											"end": 5384,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1391,
											"end": 1438,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 5055,
											"end": 5390,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1391,
											"end": 1438,
											"modifierDepth": 2,
											"name": "tag",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 1391,
											"end": 1438,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1473,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 1457,
											"end": 1473,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D5391393"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1457,
											"end": 1473,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1473,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1473,
											"modifierDepth": 2,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1473,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1481,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "91D14854"
										},
										{
											"begin": 1457,
											"end": 1481,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1473,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1473,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1510,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "D5391393"
										},
										{
											"begin": 1482,
											"end": 1510,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1473,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "STATICCALL",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 1512,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "tag",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 1482,
											"end": 1512,
											"jumpType": "[in]",
											"modifierDepth": 2,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "tag",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 1482,
											"end": 1512,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1457,
											"end": 1527,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 1457,
											"end": 1527,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1457,
											"end": 1527,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5758,
											"end": 5783,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5758,
											"end": 5783,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5758,
											"end": 5783,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5758,
											"end": 5783,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1521,
											"end": 1525,
											"modifierDepth": 2,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 5799,
											"end": 5817,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 5799,
											"end": 5817,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5799,
											"end": 5817,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5792,
											"end": 5852,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5731,
											"end": 5749,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 5731,
											"end": 5749,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "STATICCALL",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1457,
											"end": 1527,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "tag",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 1457,
											"end": 1527,
											"jumpType": "[in]",
											"modifierDepth": 2,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "tag",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 1457,
											"end": 1527,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1535,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1457,
											"end": 1535,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1531,
											"end": 1535,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1457,
											"end": 1535,
											"modifierDepth": 2,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1449,
											"end": 1581,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 1449,
											"end": 1581,
											"modifierDepth": 2,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1449,
											"end": 1581,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1449,
											"end": 1581,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1449,
											"end": 1581,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1449,
											"end": 1581,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6315,
											"end": 6317,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1449,
											"end": 1581,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1449,
											"end": 1581,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1449,
											"end": 1581,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6297,
											"end": 6318,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6354,
											"end": 6356,
											"name": "PUSH",
											"source": 12,
											"value": "2A"
										},
										{
											"begin": 6334,
											"end": 6352,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 6334,
											"end": 6352,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6334,
											"end": 6352,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6327,
											"end": 6357,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6393,
											"end": 6427,
											"name": "PUSH",
											"source": 12,
											"value": "5468697320436F6E7472616374206E6F742068617665207065726D697373696F"
										},
										{
											"begin": 6373,
											"end": 6391,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 6373,
											"end": 6391,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6373,
											"end": 6391,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6366,
											"end": 6428,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "37103A379036B4B73A17"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6444,
											"end": 6462,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 6444,
											"end": 6462,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6444,
											"end": 6462,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6437,
											"end": 6477,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6494,
											"end": 6513,
											"name": "PUSH",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 6494,
											"end": 6513,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1449,
											"end": 1581,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 6113,
											"end": 6519,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1449,
											"end": 1581,
											"modifierDepth": 2,
											"name": "tag",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 1449,
											"end": 1581,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1608,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 1592,
											"end": 1608,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1592,
											"end": 1629,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40D097C3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1592,
											"end": 1629,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1618,
											"end": 1628,
											"modifierDepth": 2,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1592,
											"end": 1629,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1030,
											"end": 1081,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1592,
											"end": 1608,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1608,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1608,
											"modifierDepth": 2,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1608,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1617,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40D097C3"
										},
										{
											"begin": 1592,
											"end": 1617,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1003,
											"end": 1021,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1003,
											"end": 1021,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1592,
											"end": 1629,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "tag",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1592,
											"end": 1629,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 1592,
											"end": 1629,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1232,
											"end": 1637,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2981,
											"end": 2985,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "tag",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 1645,
											"end": 1757,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1735,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 1719,
											"end": 1735,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "18160DDD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1719,
											"end": 1735,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1735,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1747,
											"name": "PUSH",
											"source": 10,
											"value": "18160DDD"
										},
										{
											"begin": 1719,
											"end": 1747,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1735,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "STATICCALL",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4497,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "196"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 2505,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "196"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5263,
											"end": 5289,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 5275,
											"end": 5279,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5281,
											"end": 5288,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5263,
											"end": 5274,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 5263,
											"end": 5289,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 834,
											"end": 961,
											"name": "tag",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 834,
											"end": 961,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 2505,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 928,
											"end": 943,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 928,
											"end": 953,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 928,
											"end": 953,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 928,
											"end": 953,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 928,
											"end": 953,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 928,
											"end": 953,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 928,
											"end": 953,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 928,
											"end": 953,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 928,
											"end": 953,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 928,
											"end": 953,
											"modifierDepth": 1,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 928,
											"end": 953,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 928,
											"end": 953,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 928,
											"end": 953,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 928,
											"end": 953,
											"modifierDepth": 1,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 928,
											"end": 953,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 928,
											"end": 953,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 834,
											"end": 961,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 195,
											"end": 604,
											"name": "tag",
											"source": 11,
											"value": "113"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 335,
											"end": 339,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 366,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 356,
											"end": 366,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 356,
											"end": 371,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 356,
											"end": 371,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 352,
											"end": 412,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "203"
										},
										{
											"begin": 352,
											"end": 412,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 395,
											"end": 400,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 388,
											"end": 400,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "202"
										},
										{
											"begin": 388,
											"end": 400,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 352,
											"end": 412,
											"name": "tag",
											"source": 11,
											"value": "203"
										},
										{
											"begin": 352,
											"end": 412,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 481,
											"end": 487,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 481,
											"end": 487,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "CALLDATACOPY",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 506,
											"end": 516,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6909,
											"end": 6911,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 6905,
											"end": 6920,
											"name": "DUP12",
											"source": 12
										},
										{
											"begin": 6905,
											"end": 6920,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6905,
											"end": 6920,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 6901,
											"end": 6954,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 545,
											"end": 580,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6889,
											"end": 6955,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6971,
											"end": 6983,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 6971,
											"end": 6983,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6971,
											"end": 6983,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6964,
											"end": 6992,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 6964,
											"end": 6992,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6964,
											"end": 6992,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 506,
											"end": 516,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 506,
											"end": 516,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7008,
											"end": 7020,
											"name": "PUSH",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 7008,
											"end": 7020,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7008,
											"end": 7020,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 545,
											"end": 580,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "205"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6732,
											"end": 7026,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 545,
											"end": 580,
											"name": "tag",
											"source": 11,
											"value": "205"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 535,
											"end": 581,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 535,
											"end": 581,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 535,
											"end": 581,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 535,
											"end": 581,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 535,
											"end": 581,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 444,
											"end": 462,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 444,
											"end": 596,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "tag",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 424,
											"end": 596,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 424,
											"end": 596,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "tag",
											"source": 11,
											"value": "202"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "tag",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 1881,
											"end": 1978,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1961,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 1945,
											"end": 1961,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5C975ABB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1921,
											"end": 1925,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1921,
											"end": 1925,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1945,
											"end": 1961,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1961,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1968,
											"name": "PUSH",
											"source": 10,
											"value": "5C975ABB"
										},
										{
											"begin": 1945,
											"end": 1968,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1961,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "STATICCALL",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "tag",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1945,
											"end": 1970,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 1945,
											"end": 1970,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1588,
											"end": 2029,
											"name": "tag",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 1588,
											"end": 2029,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1663,
											"end": 1676,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1688,
											"end": 1707,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "213"
										},
										{
											"begin": 1724,
											"end": 1730,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1720,
											"end": 1721,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "214"
										},
										{
											"begin": 1720,
											"end": 1730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "tag",
											"source": 5,
											"value": "213"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "215"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1733,
											"end": 1734,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "216"
										},
										{
											"begin": 1720,
											"end": 1734,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "tag",
											"source": 5,
											"value": "215"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "218"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "218"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "219"
										},
										{
											"begin": 1710,
											"end": 1735,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "tag",
											"source": 5,
											"value": "218"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "220"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "CALLDATACOPY",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "tag",
											"source": 5,
											"value": "220"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1688,
											"end": 1735,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1688,
											"end": 1735,
											"name": "POP",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1745,
											"end": 1751,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1752,
											"end": 1753,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "222"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "222"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "223"
										},
										{
											"begin": 1745,
											"end": 1754,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "tag",
											"source": 5,
											"value": "222"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "BYTE",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "MSTORE8",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "POP",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1770,
											"end": 1776,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1777,
											"end": 1778,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "225"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "225"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "223"
										},
										{
											"begin": 1770,
											"end": 1779,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "tag",
											"source": 5,
											"value": "225"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "BYTE",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "MSTORE8",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1800,
											"end": 1809,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "229"
										},
										{
											"begin": 1816,
											"end": 1822,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1812,
											"end": 1813,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "214"
										},
										{
											"begin": 1812,
											"end": 1822,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "tag",
											"source": 5,
											"value": "229"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "230"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1826,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "216"
										},
										{
											"begin": 1812,
											"end": 1826,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "tag",
											"source": 5,
											"value": "230"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1800,
											"end": 1826,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1800,
											"end": 1826,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "tag",
											"source": 5,
											"value": "226"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1832,
											"end": 1833,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1828,
											"end": 1829,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1828,
											"end": 1833,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "227"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "181899199A1A9B1B9C1CB0B131B232B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1879,
											"end": 1884,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1887,
											"end": 1890,
											"name": "PUSH",
											"source": 5,
											"value": "F"
										},
										{
											"begin": 1879,
											"end": 1890,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "223"
										},
										{
											"begin": 1866,
											"end": 1891,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "tag",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "BYTE",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "F8"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1860,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1861,
											"end": 1862,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "234"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "234"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "223"
										},
										{
											"begin": 1854,
											"end": 1863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "tag",
											"source": 5,
											"value": "234"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "BYTE",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "MSTORE8",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1915,
											"end": 1916,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "235"
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "236"
										},
										{
											"begin": 1835,
											"end": 1838,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "tag",
											"source": 5,
											"value": "235"
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "226"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "tag",
											"source": 5,
											"value": "227"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1944,
											"end": 1954,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1944,
											"end": 1954,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "237"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 8076,
											"end": 8078,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 8058,
											"end": 8079,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8058,
											"end": 8079,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8058,
											"end": 8079,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8095,
											"end": 8113,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 8095,
											"end": 8113,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8095,
											"end": 8113,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8088,
											"end": 8118,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8154,
											"end": 8188,
											"name": "PUSH",
											"source": 12,
											"value": "537472696E67733A20686578206C656E67746820696E73756666696369656E74"
										},
										{
											"begin": 8134,
											"end": 8152,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 8134,
											"end": 8152,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8134,
											"end": 8152,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8127,
											"end": 8189,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8206,
											"end": 8224,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 8206,
											"end": 8224,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "139"
										},
										{
											"begin": 7874,
											"end": 8230,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "tag",
											"source": 5,
											"value": "237"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2015,
											"end": 2021,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1588,
											"end": 2029,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1588,
											"end": 2029,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3334,
											"end": 3437,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 3334,
											"end": 3437,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "242"
										},
										{
											"begin": 3411,
											"end": 3415,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 3400,
											"end": 3410,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "244"
										},
										{
											"begin": 3400,
											"end": 3430,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "tag",
											"source": 0,
											"value": "242"
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3334,
											"end": 3437,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3334,
											"end": 3437,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7327,
											"end": 7349,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "246"
										},
										{
											"begin": 7335,
											"end": 7339,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7341,
											"end": 7348,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7327,
											"end": 7334,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 7327,
											"end": 7349,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7327,
											"end": 7349,
											"name": "tag",
											"source": 0,
											"value": "246"
										},
										{
											"begin": 7327,
											"end": 7349,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7322,
											"end": 7471,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 7322,
											"end": 7471,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7397,
											"end": 7401,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7244,
											"end": 7477,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7707,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 7693,
											"end": 7697,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7699,
											"end": 7706,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 7685,
											"end": 7707,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7707,
											"name": "tag",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 7685,
											"end": 7707,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7681,
											"end": 7830,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7681,
											"end": 7830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 7681,
											"end": 7830,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7755,
											"end": 7760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7729,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 7779,
											"end": 7819,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7779,
											"end": 7819,
											"name": "PUSH",
											"source": 0,
											"value": "F6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B"
										},
										{
											"begin": 7779,
											"end": 7819,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7755,
											"end": 7760,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7779,
											"end": 7819,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7602,
											"end": 7836,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1279,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1327,
											"end": 1331,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "255"
										},
										{
											"begin": 1311,
											"end": 1316,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1318,
											"end": 1322,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1298,
											"end": 1310,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "256"
										},
										{
											"begin": 1298,
											"end": 1323,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "tag",
											"source": 6,
											"value": "255"
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1298,
											"end": 1331,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1298,
											"end": 1331,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1154,
											"end": 1338,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3718,
											"end": 4210,
											"name": "tag",
											"source": 0,
											"value": "244"
										},
										{
											"begin": 3718,
											"end": 4210,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 3814,
											"end": 3818,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3820,
											"end": 3827,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3806,
											"end": 3813,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 3806,
											"end": 3828,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "tag",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3801,
											"end": 4204,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 3801,
											"end": 4204,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "260"
										},
										{
											"begin": 4017,
											"end": 4024,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4027,
											"end": 4029,
											"name": "PUSH",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 3989,
											"end": 4008,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 3989,
											"end": 4030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "tag",
											"source": 0,
											"value": "260"
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4101,
											"end": 4139,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "261"
										},
										{
											"begin": 4129,
											"end": 4133,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4136,
											"end": 4138,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4101,
											"end": 4120,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 4101,
											"end": 4139,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4101,
											"end": 4139,
											"name": "tag",
											"source": 0,
											"value": "261"
										},
										{
											"begin": 4101,
											"end": 4139,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "262"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 3896,
											"end": 4161,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "tag",
											"source": 0,
											"value": "262"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "265"
										},
										{
											"begin": 3844,
											"end": 4193,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "tag",
											"source": 6,
											"value": "256"
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1772,
											"end": 1779,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1814,
											"end": 1818,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1772,
											"end": 1779,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "tag",
											"source": 6,
											"value": "267"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1852,
											"end": 1857,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1852,
											"end": 1864,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1848,
											"end": 1849,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1848,
											"end": 1864,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "268"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1885,
											"end": 1905,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1908,
											"end": 1913,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1914,
											"end": 1915,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 1908,
											"end": 1916,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "tag",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1885,
											"end": 1916,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1885,
											"end": 1916,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1950,
											"end": 1962,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1934,
											"end": 1946,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1934,
											"end": 1962,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "272"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2425,
											"end": 2438,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2508,
											"end": 2512,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2554,
											"end": 2558,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2060,
											"end": 2117,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2060,
											"end": 2117,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "275"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "tag",
											"source": 6,
											"value": "272"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2425,
											"end": 2438,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2508,
											"end": 2512,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2554,
											"end": 2558,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2234,
											"end": 2291,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2234,
											"end": 2291,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "tag",
											"source": 6,
											"value": "275"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "277"
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "278"
										},
										{
											"begin": 1866,
											"end": 1869,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "tag",
											"source": 6,
											"value": "277"
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "267"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "tag",
											"source": 6,
											"value": "268"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2332,
											"end": 2344,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1689,
											"end": 2351,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 14,
											"end": 300,
											"name": "tag",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 14,
											"end": 300,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 72,
											"end": 78,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 125,
											"end": 127,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 113,
											"end": 122,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 104,
											"end": 111,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 100,
											"end": 123,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 96,
											"end": 128,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 93,
											"end": 145,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 93,
											"end": 145,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "286"
										},
										{
											"begin": 93,
											"end": 145,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 141,
											"end": 142,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 138,
											"end": 139,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 131,
											"end": 143,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 93,
											"end": 145,
											"name": "tag",
											"source": 12,
											"value": "286"
										},
										{
											"begin": 93,
											"end": 145,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 167,
											"end": 190,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 167,
											"end": 190,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 219,
											"end": 251,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 219,
											"end": 251,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 209,
											"end": 252,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 209,
											"end": 252,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 199,
											"end": 270,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "237"
										},
										{
											"begin": 199,
											"end": 270,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 266,
											"end": 267,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 264,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 256,
											"end": 268,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 497,
											"end": 677,
											"name": "tag",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 497,
											"end": 677,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 556,
											"end": 562,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 609,
											"end": 611,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 597,
											"end": 606,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 588,
											"end": 595,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 584,
											"end": 607,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 580,
											"end": 612,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 577,
											"end": 629,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 577,
											"end": 629,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "290"
										},
										{
											"begin": 577,
											"end": 629,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 625,
											"end": 626,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 622,
											"end": 623,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 615,
											"end": 627,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 577,
											"end": 629,
											"name": "tag",
											"source": 12,
											"value": "290"
										},
										{
											"begin": 577,
											"end": 629,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 648,
											"end": 671,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 648,
											"end": 671,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 497,
											"end": 677,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 497,
											"end": 677,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1092,
											"end": 1210,
											"name": "tag",
											"source": 12,
											"value": "280"
										},
										{
											"begin": 1092,
											"end": 1210,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1183,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1171,
											"end": 1184,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1164,
											"end": 1185,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1157,
											"end": 1162,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1186,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1144,
											"end": 1204,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "242"
										},
										{
											"begin": 1144,
											"end": 1204,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1200,
											"end": 1201,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1197,
											"end": 1198,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1190,
											"end": 1202,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1215,
											"end": 1456,
											"name": "tag",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 1215,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1271,
											"end": 1277,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1324,
											"end": 1326,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1312,
											"end": 1321,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1303,
											"end": 1310,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1299,
											"end": 1322,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1295,
											"end": 1327,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 1292,
											"end": 1344,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1292,
											"end": 1344,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 1292,
											"end": 1344,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1340,
											"end": 1341,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1337,
											"end": 1338,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1330,
											"end": 1342,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1292,
											"end": 1344,
											"name": "tag",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 1292,
											"end": 1344,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1379,
											"end": 1388,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1366,
											"end": 1389,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1398,
											"end": 1426,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "237"
										},
										{
											"begin": 1420,
											"end": 1425,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1398,
											"end": 1426,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "280"
										},
										{
											"begin": 1398,
											"end": 1426,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1461,
											"end": 1592,
											"name": "tag",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 1461,
											"end": 1592,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1536,
											"end": 1567,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1536,
											"end": 1567,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1526,
											"end": 1568,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1526,
											"end": 1568,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1516,
											"end": 1586,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "242"
										},
										{
											"begin": 1516,
											"end": 1586,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1582,
											"end": 1583,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1579,
											"end": 1580,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1584,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1597,
											"end": 1912,
											"name": "tag",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 1597,
											"end": 1912,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1665,
											"end": 1671,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1673,
											"end": 1679,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1714,
											"end": 1723,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1705,
											"end": 1712,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1701,
											"end": 1724,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 1694,
											"end": 1746,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1694,
											"end": 1746,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "301"
										},
										{
											"begin": 1694,
											"end": 1746,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1742,
											"end": 1743,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1739,
											"end": 1740,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1732,
											"end": 1744,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1694,
											"end": 1746,
											"name": "tag",
											"source": 12,
											"value": "301"
										},
										{
											"begin": 1694,
											"end": 1746,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1778,
											"end": 1787,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1765,
											"end": 1788,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1755,
											"end": 1788,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1755,
											"end": 1788,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1838,
											"end": 1840,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1827,
											"end": 1836,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1823,
											"end": 1841,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1810,
											"end": 1842,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1851,
											"end": 1882,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 1876,
											"end": 1881,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1851,
											"end": 1882,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 1851,
											"end": 1882,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1851,
											"end": 1882,
											"name": "tag",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 1851,
											"end": 1882,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1901,
											"end": 1906,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1891,
											"end": 1906,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1891,
											"end": 1906,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1891,
											"end": 1906,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1597,
											"end": 1912,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1597,
											"end": 1912,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1597,
											"end": 1912,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1597,
											"end": 1912,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1597,
											"end": 1912,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1597,
											"end": 1912,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2099,
											"end": 2366,
											"name": "tag",
											"source": 12,
											"value": "70"
										},
										{
											"begin": 2099,
											"end": 2366,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2178,
											"end": 2184,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2231,
											"end": 2233,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2219,
											"end": 2228,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2210,
											"end": 2217,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2206,
											"end": 2229,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2202,
											"end": 2234,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2199,
											"end": 2251,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2199,
											"end": 2251,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "305"
										},
										{
											"begin": 2199,
											"end": 2251,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2247,
											"end": 2248,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2244,
											"end": 2245,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2237,
											"end": 2249,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2199,
											"end": 2251,
											"name": "tag",
											"source": 12,
											"value": "305"
										},
										{
											"begin": 2199,
											"end": 2251,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2286,
											"end": 2295,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2273,
											"end": 2296,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 2305,
											"end": 2336,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "237"
										},
										{
											"begin": 2330,
											"end": 2335,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2305,
											"end": 2336,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 2305,
											"end": 2336,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2556,
											"end": 3380,
											"name": "tag",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 2556,
											"end": 3380,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2660,
											"end": 2666,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2668,
											"end": 2674,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2676,
											"end": 2682,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2684,
											"end": 2690,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2737,
											"end": 2739,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2725,
											"end": 2734,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2716,
											"end": 2723,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 2712,
											"end": 2735,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2708,
											"end": 2740,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2705,
											"end": 2757,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2705,
											"end": 2757,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "310"
										},
										{
											"begin": 2705,
											"end": 2757,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2753,
											"end": 2754,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2750,
											"end": 2751,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2743,
											"end": 2755,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2705,
											"end": 2757,
											"name": "tag",
											"source": 12,
											"value": "310"
										},
										{
											"begin": 2705,
											"end": 2757,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2793,
											"end": 2802,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2780,
											"end": 2803,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 2822,
											"end": 2840,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2863,
											"end": 2865,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2855,
											"end": 2861,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2852,
											"end": 2866,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 2849,
											"end": 2883,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2849,
											"end": 2883,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "311"
										},
										{
											"begin": 2849,
											"end": 2883,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 2880,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2876,
											"end": 2877,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2869,
											"end": 2881,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2849,
											"end": 2883,
											"name": "tag",
											"source": 12,
											"value": "311"
										},
										{
											"begin": 2849,
											"end": 2883,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2917,
											"end": 2923,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2906,
											"end": 2915,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 2902,
											"end": 2924,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2962,
											"end": 2969,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 2955,
											"end": 2959,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2951,
											"end": 2953,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2947,
											"end": 2960,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2943,
											"end": 2970,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2933,
											"end": 2988,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "312"
										},
										{
											"begin": 2933,
											"end": 2988,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2984,
											"end": 2985,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2981,
											"end": 2982,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2974,
											"end": 2986,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2933,
											"end": 2988,
											"name": "tag",
											"source": 12,
											"value": "312"
										},
										{
											"begin": 2933,
											"end": 2988,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3024,
											"end": 3026,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3011,
											"end": 3027,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3050,
											"end": 3052,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3042,
											"end": 3048,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3039,
											"end": 3053,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 3036,
											"end": 3070,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3036,
											"end": 3070,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 3036,
											"end": 3070,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3066,
											"end": 3067,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3063,
											"end": 3064,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3056,
											"end": 3068,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3036,
											"end": 3070,
											"name": "tag",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 3036,
											"end": 3070,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3121,
											"end": 3128,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 3114,
											"end": 3118,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3104,
											"end": 3110,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3101,
											"end": 3102,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 3097,
											"end": 3111,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 3093,
											"end": 3095,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3089,
											"end": 3112,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3085,
											"end": 3119,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3082,
											"end": 3129,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 3079,
											"end": 3146,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3079,
											"end": 3146,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "314"
										},
										{
											"begin": 3079,
											"end": 3146,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3142,
											"end": 3143,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3139,
											"end": 3140,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3132,
											"end": 3144,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3079,
											"end": 3146,
											"name": "tag",
											"source": 12,
											"value": "314"
										},
										{
											"begin": 3079,
											"end": 3146,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3173,
											"end": 3177,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3165,
											"end": 3178,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3165,
											"end": 3178,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3165,
											"end": 3178,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3165,
											"end": 3178,
											"name": "SWAP7",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3197,
											"end": 3203,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3238,
											"end": 3258,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3238,
											"end": 3258,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3225,
											"end": 3259,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3268,
											"end": 3299,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "315"
										},
										{
											"begin": 3225,
											"end": 3259,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3268,
											"end": 3299,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 3268,
											"end": 3299,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3268,
											"end": 3299,
											"name": "tag",
											"source": 12,
											"value": "315"
										},
										{
											"begin": 3268,
											"end": 3299,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2556,
											"end": 3380,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2556,
											"end": 3380,
											"name": "SWAP7",
											"source": 12
										},
										{
											"begin": 2556,
											"end": 3380,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2556,
											"end": 3380,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3318,
											"end": 3323,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3318,
											"end": 3323,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 3370,
											"end": 3372,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3355,
											"end": 3373,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3342,
											"end": 3374,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3342,
											"end": 3374,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2556,
											"end": 3380,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3801,
											"end": 3985,
											"name": "tag",
											"source": 12,
											"value": "147"
										},
										{
											"begin": 3801,
											"end": 3985,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3871,
											"end": 3877,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3924,
											"end": 3926,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3912,
											"end": 3921,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3903,
											"end": 3910,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 3899,
											"end": 3922,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3895,
											"end": 3927,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 3892,
											"end": 3944,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3892,
											"end": 3944,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "318"
										},
										{
											"begin": 3892,
											"end": 3944,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3940,
											"end": 3941,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3937,
											"end": 3938,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3930,
											"end": 3942,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3892,
											"end": 3944,
											"name": "tag",
											"source": 12,
											"value": "318"
										},
										{
											"begin": 3892,
											"end": 3944,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3963,
											"end": 3979,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3963,
											"end": 3979,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3801,
											"end": 3985,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3801,
											"end": 3985,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5863,
											"end": 6108,
											"name": "tag",
											"source": 12,
											"value": "180"
										},
										{
											"begin": 5863,
											"end": 6108,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5930,
											"end": 5936,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5983,
											"end": 5985,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5971,
											"end": 5980,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5962,
											"end": 5969,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5958,
											"end": 5981,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5954,
											"end": 5986,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 5951,
											"end": 6003,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5951,
											"end": 6003,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "327"
										},
										{
											"begin": 5951,
											"end": 6003,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5999,
											"end": 6000,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5996,
											"end": 5997,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5989,
											"end": 6001,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5951,
											"end": 6003,
											"name": "tag",
											"source": 12,
											"value": "327"
										},
										{
											"begin": 5951,
											"end": 6003,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6031,
											"end": 6040,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6025,
											"end": 6041,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6050,
											"end": 6078,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "237"
										},
										{
											"begin": 6072,
											"end": 6077,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6050,
											"end": 6078,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "280"
										},
										{
											"begin": 6050,
											"end": 6078,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7031,
											"end": 7158,
											"name": "tag",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 7031,
											"end": 7158,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7092,
											"end": 7102,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 7087,
											"end": 7090,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 7083,
											"end": 7103,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 7080,
											"end": 7081,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7073,
											"end": 7104,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7123,
											"end": 7127,
											"name": "PUSH",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 7120,
											"end": 7121,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7113,
											"end": 7128,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7147,
											"end": 7151,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 7144,
											"end": 7145,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7137,
											"end": 7152,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7163,
											"end": 7331,
											"name": "tag",
											"source": 12,
											"value": "214"
										},
										{
											"begin": 7163,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7203,
											"end": 7210,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7269,
											"end": 7270,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7265,
											"end": 7266,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7261,
											"end": 7267,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 7257,
											"end": 7271,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7254,
											"end": 7255,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7251,
											"end": 7272,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 7246,
											"end": 7247,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7239,
											"end": 7248,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7232,
											"end": 7249,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7228,
											"end": 7273,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7225,
											"end": 7296,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7225,
											"end": 7296,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "335"
										},
										{
											"begin": 7225,
											"end": 7296,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7276,
											"end": 7294,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "335"
										},
										{
											"begin": 7276,
											"end": 7294,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 7276,
											"end": 7294,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7276,
											"end": 7294,
											"name": "tag",
											"source": 12,
											"value": "335"
										},
										{
											"begin": 7276,
											"end": 7294,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7316,
											"end": 7325,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 7316,
											"end": 7325,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7163,
											"end": 7331,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7336,
											"end": 7464,
											"name": "tag",
											"source": 12,
											"value": "216"
										},
										{
											"begin": 7336,
											"end": 7464,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7376,
											"end": 7379,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7407,
											"end": 7408,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7403,
											"end": 7409,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 7400,
											"end": 7401,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7397,
											"end": 7410,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 7394,
											"end": 7433,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7394,
											"end": 7433,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "338"
										},
										{
											"begin": 7394,
											"end": 7433,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7413,
											"end": 7431,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "338"
										},
										{
											"begin": 7413,
											"end": 7431,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 7413,
											"end": 7431,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7413,
											"end": 7431,
											"name": "tag",
											"source": 12,
											"value": "338"
										},
										{
											"begin": 7413,
											"end": 7431,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7449,
											"end": 7458,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7449,
											"end": 7458,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7336,
											"end": 7464,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7469,
											"end": 7596,
											"name": "tag",
											"source": 12,
											"value": "219"
										},
										{
											"begin": 7469,
											"end": 7596,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7530,
											"end": 7540,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 7525,
											"end": 7528,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 7521,
											"end": 7541,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 7518,
											"end": 7519,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7511,
											"end": 7542,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7561,
											"end": 7565,
											"name": "PUSH",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 7558,
											"end": 7559,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7551,
											"end": 7566,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7585,
											"end": 7589,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 7582,
											"end": 7583,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7575,
											"end": 7590,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7601,
											"end": 7728,
											"name": "tag",
											"source": 12,
											"value": "223"
										},
										{
											"begin": 7601,
											"end": 7728,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7662,
											"end": 7672,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 7657,
											"end": 7660,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 7653,
											"end": 7673,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 7650,
											"end": 7651,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7643,
											"end": 7674,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7693,
											"end": 7697,
											"name": "PUSH",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 7690,
											"end": 7691,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7683,
											"end": 7698,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7717,
											"end": 7721,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 7714,
											"end": 7715,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7733,
											"end": 7869,
											"name": "tag",
											"source": 12,
											"value": "236"
										},
										{
											"begin": 7733,
											"end": 7869,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7772,
											"end": 7775,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7800,
											"end": 7805,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7790,
											"end": 7829,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "343"
										},
										{
											"begin": 7790,
											"end": 7829,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7809,
											"end": 7827,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "343"
										},
										{
											"begin": 7809,
											"end": 7827,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 7809,
											"end": 7827,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7809,
											"end": 7827,
											"name": "tag",
											"source": 12,
											"value": "343"
										},
										{
											"begin": 7809,
											"end": 7827,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7845,
											"end": 7863,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7845,
											"end": 7863,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7733,
											"end": 7869,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8235,
											"end": 8493,
											"name": "tag",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 8235,
											"end": 8493,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8307,
											"end": 8308,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8317,
											"end": 8430,
											"name": "tag",
											"source": 12,
											"value": "346"
										},
										{
											"begin": 8317,
											"end": 8430,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8331,
											"end": 8337,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8328,
											"end": 8329,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8325,
											"end": 8338,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 8317,
											"end": 8430,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8317,
											"end": 8430,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "348"
										},
										{
											"begin": 8317,
											"end": 8430,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8407,
											"end": 8418,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8407,
											"end": 8418,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8407,
											"end": 8418,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8401,
											"end": 8419,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8388,
											"end": 8399,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8388,
											"end": 8399,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8388,
											"end": 8399,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8381,
											"end": 8420,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8353,
											"end": 8355,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8346,
											"end": 8356,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8317,
											"end": 8430,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "346"
										},
										{
											"begin": 8317,
											"end": 8430,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8317,
											"end": 8430,
											"name": "tag",
											"source": 12,
											"value": "348"
										},
										{
											"begin": 8317,
											"end": 8430,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8448,
											"end": 8454,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8445,
											"end": 8446,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8442,
											"end": 8455,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 8439,
											"end": 8487,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8439,
											"end": 8487,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "349"
										},
										{
											"begin": 8439,
											"end": 8487,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8483,
											"end": 8484,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8474,
											"end": 8480,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8469,
											"end": 8472,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8465,
											"end": 8481,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8458,
											"end": 8485,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8439,
											"end": 8487,
											"name": "tag",
											"source": 12,
											"value": "349"
										},
										{
											"begin": 8439,
											"end": 8487,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8439,
											"end": 8487,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8235,
											"end": 8493,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8235,
											"end": 8493,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8235,
											"end": 8493,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8235,
											"end": 8493,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8498,
											"end": 9284,
											"name": "tag",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 8498,
											"end": 9284,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8909,
											"end": 8934,
											"name": "PUSH",
											"source": 12,
											"value": "416363657373436F6E74726F6C3A206163636F756E7420000000000000000000"
										},
										{
											"begin": 8904,
											"end": 8907,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8897,
											"end": 8935,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8879,
											"end": 8882,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8964,
											"end": 8970,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8958,
											"end": 8971,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8980,
											"end": 9042,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "351"
										},
										{
											"begin": 9035,
											"end": 9041,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9030,
											"end": 9032,
											"name": "PUSH",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 9025,
											"end": 9028,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9021,
											"end": 9033,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9014,
											"end": 9018,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9006,
											"end": 9012,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 9002,
											"end": 9019,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8980,
											"end": 9042,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 8980,
											"end": 9042,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8980,
											"end": 9042,
											"name": "tag",
											"source": 12,
											"value": "351"
										},
										{
											"begin": 8980,
											"end": 9042,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1034B99036B4B9B9B4B733903937B6329"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9101,
											"end": 9103,
											"name": "PUSH",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 9061,
											"end": 9077,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9061,
											"end": 9077,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9061,
											"end": 9077,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9093,
											"end": 9104,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9093,
											"end": 9104,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9093,
											"end": 9104,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9086,
											"end": 9126,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9151,
											"end": 9164,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9151,
											"end": 9164,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9173,
											"end": 9236,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 9151,
											"end": 9164,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9222,
											"end": 9224,
											"name": "PUSH",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 9214,
											"end": 9225,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9214,
											"end": 9225,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9207,
											"end": 9211,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9195,
											"end": 9212,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 9195,
											"end": 9212,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9173,
											"end": 9236,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 9173,
											"end": 9236,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9173,
											"end": 9236,
											"name": "tag",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 9173,
											"end": 9236,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9256,
											"end": 9273,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9275,
											"end": 9277,
											"name": "PUSH",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 9252,
											"end": 9278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9252,
											"end": 9278,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 8498,
											"end": 9284,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8498,
											"end": 9284,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9289,
											"end": 9672,
											"name": "tag",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 9289,
											"end": 9672,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9438,
											"end": 9440,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9427,
											"end": 9436,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9420,
											"end": 9441,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9401,
											"end": 9405,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9470,
											"end": 9476,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9464,
											"end": 9477,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9513,
											"end": 9519,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9508,
											"end": 9510,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9497,
											"end": 9506,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9493,
											"end": 9511,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9486,
											"end": 9520,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9529,
											"end": 9595,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "354"
										},
										{
											"begin": 9588,
											"end": 9594,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9583,
											"end": 9585,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9572,
											"end": 9581,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9568,
											"end": 9586,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9563,
											"end": 9565,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9555,
											"end": 9561,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 9551,
											"end": 9566,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9529,
											"end": 9595,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 9529,
											"end": 9595,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9529,
											"end": 9595,
											"name": "tag",
											"source": 12,
											"value": "354"
										},
										{
											"begin": 9529,
											"end": 9595,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9656,
											"end": 9658,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 9635,
											"end": 9650,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9631,
											"end": 9660,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9616,
											"end": 9661,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9616,
											"end": 9661,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9616,
											"end": 9661,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9616,
											"end": 9661,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9663,
											"end": 9665,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9612,
											"end": 9666,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9612,
											"end": 9666,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 9289,
											"end": 9672,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9289,
											"end": 9672,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9677,
											"end": 9812,
											"name": "tag",
											"source": 12,
											"value": "278"
										},
										{
											"begin": 9677,
											"end": 9812,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9716,
											"end": 9719,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9737,
											"end": 9754,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 9737,
											"end": 9754,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9737,
											"end": 9754,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9734,
											"end": 9777,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "357"
										},
										{
											"begin": 9734,
											"end": 9777,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9757,
											"end": 9775,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "357"
										},
										{
											"begin": 9757,
											"end": 9775,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 9757,
											"end": 9775,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9757,
											"end": 9775,
											"name": "tag",
											"source": 12,
											"value": "357"
										},
										{
											"begin": 9757,
											"end": 9775,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9804,
											"end": 9805,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 9793,
											"end": 9806,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9793,
											"end": 9806,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9677,
											"end": 9812,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/AccessControl.sol",
								"@openzeppelin/contracts/access/IAccessControl.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"INagaKidsNFT.sol",
								"MintNagaKids.sol",
								"Whitelist.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"changeFreeMintOpen(bool)": "28438f68",
							"changeNagaKidsContract(address)": "61aec205",
							"changeWhitelistMintOpen(bool)": "dd31a7ba",
							"getMaxSupply()": "4c0f38c2",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"getTotalSupply()": "c4e41b22",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"isFreeMintOpen()": "a6f5f014",
							"isPause()": "ff0938a7",
							"isWhitelist(bytes32[],address,uint256)": "feb2386e",
							"isWhitelistOpen()": "94f4504d",
							"merkleRoot()": "2eb4a7ab",
							"nagaKidsContract()": "27c25c20",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"setMerkleRoot(bytes32)": "7cb64759",
							"supportsInterface(bytes4)": "01ffc9a7",
							"whitelistMint(uint256)": "868ff4a2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract INagaKidsNFT\",\"name\":\"_nagaKids\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"changeFreeMintOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INagaKidsNFT\",\"name\":\"_nagaKids\",\"type\":\"address\"}],\"name\":\"changeNagaKidsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"changeWhitelistMintOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFreeMintOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nagaKidsContract\",\"outputs\":[{\"internalType\":\"contract INagaKidsNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"MintNagaKids.sol\":\"MintNagaKids\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://861c3abaa2b388a0228469080470d2254e8e91fd09aa0abda8b9ef3babf03ee5\",\"dweb:/ipfs/QmZFg88WPesuMo6GMtf3fi9NHQ5tENYLDZsFQSWgoq13TN\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1aa68fa19422863cc91d23b5896917dbe79175ed47b591148aaeb3e98cb49752\",\"dweb:/ipfs/QmeY64vTRbGhdXcytRKusfJsAfNF4aqr9e1SGBGdCYvW2j\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"INagaKidsNFT.sol\":{\"keccak256\":\"0xe96108ed4b125ef13341e3ac371d44cc3b1cea2b277a2a1bfcf11f0b9b121c32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f5a04eafc03ad2e9905ebd2878263af3daf1a5f6ac2a49ba3d5a82d0fc1b544\",\"dweb:/ipfs/QmeCQGpp4fiCGq68L2mFqGYCx6S1iDmHBUciJj1SEdqJB1\"]},\"MintNagaKids.sol\":{\"keccak256\":\"0xd1dda143144228ef17d0f98f7a5ebc75b6e2e229decb9df9571b5ecb4d492a50\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e00a8531077000b888b4859ae6083dafe7f64ce61ff34ab870dc429437dcb6a\",\"dweb:/ipfs/QmZ6Jk1UUAyCZsJ5cByBQwxGuzstPytq47qJHucV5EesMS\"]},\"Whitelist.sol\":{\"keccak256\":\"0x408caf11cc1650d5a9acdabaa5c3eb873bb39cf0aa4e2239039c6d5ad463fa53\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e91f3a441d7e9ffa24c5ee8242ce5d94056d68656de4bd4ea76e2e8d0a83cee9\",\"dweb:/ipfs/QmZ87LLAWtY8NXhAXkpQk4RfGXnQQbWsxFUxUXg8bmKupK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1143,
								"contract": "MintNagaKids.sol:MintNagaKids",
								"label": "merkleRoot",
								"offset": 0,
								"slot": "0",
								"type": "t_bytes32"
							},
							{
								"astId": 24,
								"contract": "MintNagaKids.sol:MintNagaKids",
								"label": "_roles",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
							},
							{
								"astId": 403,
								"contract": "MintNagaKids.sol:MintNagaKids",
								"label": "_status",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 973,
								"contract": "MintNagaKids.sol:MintNagaKids",
								"label": "nagaKidsContract",
								"offset": 0,
								"slot": "3",
								"type": "t_contract(INagaKidsNFT)958"
							},
							{
								"astId": 975,
								"contract": "MintNagaKids.sol:MintNagaKids",
								"label": "isFreeMintOpen",
								"offset": 20,
								"slot": "3",
								"type": "t_bool"
							},
							{
								"astId": 977,
								"contract": "MintNagaKids.sol:MintNagaKids",
								"label": "isWhitelistOpen",
								"offset": 21,
								"slot": "3",
								"type": "t_bool"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(INagaKidsNFT)958": {
								"encoding": "inplace",
								"label": "contract INagaKidsNFT",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControl.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)19_storage"
							},
							"t_struct(RoleData)19_storage": {
								"encoding": "inplace",
								"label": "struct AccessControl.RoleData",
								"members": [
									{
										"astId": 16,
										"contract": "MintNagaKids.sol:MintNagaKids",
										"label": "members",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 18,
										"contract": "MintNagaKids.sol:MintNagaKids",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Whitelist.sol": {
				"Whitelist": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32[]",
									"name": "_proof",
									"type": "bytes32[]"
								},
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "isWhitelist",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "merkleRoot",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Whitelist.sol\":133:609  contract Whitelist {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Whitelist.sol\":133:609  contract Whitelist {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x2eb4a7ab\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xfeb2386e\n      eq\n      tag_4\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"Whitelist.sol\":161:186  bytes32 public merkleRoot */\n    tag_3:\n      tag_5\n      sload(0x00)\n      dup2\n      jump\n    tag_5:\n      mload(0x40)\n        /* \"#utility.yul\":160:185   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"Whitelist.sol\":161:186  bytes32 public merkleRoot */\n    tag_7:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Whitelist.sol\":195:604  function isWhitelist(... */\n    tag_4:\n      tag_9\n      tag_10\n      calldatasize\n      0x04\n      tag_11\n      jump\t// in\n    tag_10:\n      tag_12\n      jump\t// in\n    tag_9:\n      mload(0x40)\n        /* \"#utility.yul\":1229:1243   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1222:1244   */\n      iszero\n        /* \"#utility.yul\":1204:1245   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1192:1194   */\n      0x20\n        /* \"#utility.yul\":1177:1195   */\n      add\n        /* \"Whitelist.sol\":195:604  function isWhitelist(... */\n      tag_7\n        /* \"#utility.yul\":1064:1251   */\n      jump\n        /* \"Whitelist.sol\":195:604  function isWhitelist(... */\n    tag_12:\n        /* \"Whitelist.sol\":335:339  bool */\n      0x00\n        /* \"Whitelist.sol\":356:366  merkleRoot */\n      dup1\n      sload\n        /* \"Whitelist.sol\":356:371  merkleRoot == 0 */\n      dup2\n      sub\n        /* \"Whitelist.sol\":352:412  if (merkleRoot == 0) {... */\n      tag_16\n      jumpi\n      pop\n        /* \"Whitelist.sol\":395:400  false */\n      0x00\n        /* \"Whitelist.sol\":388:400  return false */\n      jump(tag_15)\n        /* \"Whitelist.sol\":352:412  if (merkleRoot == 0) {... */\n    tag_16:\n        /* \"Whitelist.sol\":444:596  MerkleProof.verify(... */\n      tag_17\n        /* \"Whitelist.sol\":481:487  _proof */\n      dup6\n      dup6\n        /* \"Whitelist.sol\":444:596  MerkleProof.verify(... */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      dup3\n      swap1\n      mstore\n      pop\n        /* \"Whitelist.sol\":506:516  merkleRoot */\n      sload\n        /* \"Whitelist.sol\":545:580  abi.encodePacked(_address, _amount) */\n      mload(0x40)\n      not(0xffffffffffffffffffffffff)\n        /* \"#utility.yul\":1433:1435   */\n      0x60\n        /* \"#utility.yul\":1429:1444   */\n      dup12\n      swap1\n      shl\n        /* \"#utility.yul\":1425:1478   */\n      and\n        /* \"Whitelist.sol\":545:580  abi.encodePacked(_address, _amount) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":1413:1479   */\n      mstore\n        /* \"#utility.yul\":1495:1507   */\n      0x34\n      dup2\n      add\n        /* \"#utility.yul\":1488:1516   */\n      dup10\n      swap1\n      mstore\n        /* \"Whitelist.sol\":506:516  merkleRoot */\n      swap1\n      swap4\n      pop\n        /* \"#utility.yul\":1532:1544   */\n      0x54\n      add\n      swap2\n      pop\n        /* \"Whitelist.sol\":545:580  abi.encodePacked(_address, _amount) */\n      tag_18\n      swap1\n      pop\n        /* \"#utility.yul\":1256:1550   */\n      jump\n        /* \"Whitelist.sol\":545:580  abi.encodePacked(_address, _amount) */\n    tag_18:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"Whitelist.sol\":535:581  keccak256(abi.encodePacked(_address, _amount)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"Whitelist.sol\":444:462  MerkleProof.verify */\n      tag_20\n        /* \"Whitelist.sol\":444:596  MerkleProof.verify(... */\n      jump\t// in\n    tag_17:\n        /* \"Whitelist.sol\":424:596  return... */\n      swap1\n      pop\n        /* \"Whitelist.sol\":195:604  function isWhitelist(... */\n    tag_15:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1154:1338  function verify(... */\n    tag_20:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1275:1279  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1327:1331  root */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1323  processProof(proof, leaf) */\n      tag_22\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1311:1316  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1318:1322  leaf */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1310  processProof */\n      tag_23\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1323  processProof(proof, leaf) */\n      jump\t// in\n    tag_22:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1331  processProof(proof, leaf) == root */\n      eq\n      swap5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1154:1338  function verify(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1689:2351  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n    tag_23:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1772:1779  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1814:1818  leaf */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1772:1779  bytes32 */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1828:2316  for (uint256 i = 0; i < proof.length; i++) {... */\n    tag_25:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1852:1857  proof */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1852:1864  proof.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1848:1849  i */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1848:1864  i < proof.length */\n      lt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1828:2316  for (uint256 i = 0; i < proof.length; i++) {... */\n      iszero\n      tag_26\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1885:1905  bytes32 proofElement */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1908:1913  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1914:1915  i */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1908:1916  proof[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_29\n      jumpi\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1885:1916  bytes32 proofElement = proof[i] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1950:1962  proofElement */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1934:1946  computedHash */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1934:1962  computedHash <= proofElement */\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1930:2306  if (computedHash <= proofElement) {... */\n      tag_31\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2425:2438  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2473:2488  mstore(0x00, a) */\n      dup4\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2508:2512  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2501:2516  mstore(0x20, b) */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2554:2558  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2538:2559  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2060:2117  computedHash = _efficientHash(computedHash, proofElement) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1930:2306  if (computedHash <= proofElement) {... */\n      jump(tag_34)\n    tag_31:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2425:2438  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2473:2488  mstore(0x00, a) */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2508:2512  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2501:2516  mstore(0x20, b) */\n      dup5\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2554:2558  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2538:2559  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2234:2291  computedHash = _efficientHash(proofElement, computedHash) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1930:2306  if (computedHash <= proofElement) {... */\n    tag_34:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1866:1869  i++ */\n      dup1\n      tag_36\n      dup2\n      tag_37\n      jump\t// in\n    tag_36:\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1828:2316  for (uint256 i = 0; i < proof.length; i++) {... */\n      jump(tag_25)\n    tag_26:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2332:2344  computedHash */\n      swap4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1689:2351  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":196:1059   */\n    tag_11:\n        /* \"#utility.yul\":300:306   */\n      0x00\n        /* \"#utility.yul\":308:314   */\n      dup1\n        /* \"#utility.yul\":316:322   */\n      0x00\n        /* \"#utility.yul\":324:330   */\n      dup1\n        /* \"#utility.yul\":377:379   */\n      0x60\n        /* \"#utility.yul\":365:374   */\n      dup6\n        /* \"#utility.yul\":356:363   */\n      dup8\n        /* \"#utility.yul\":352:375   */\n      sub\n        /* \"#utility.yul\":348:380   */\n      slt\n        /* \"#utility.yul\":345:397   */\n      iszero\n      tag_42\n      jumpi\n        /* \"#utility.yul\":393:394   */\n      0x00\n        /* \"#utility.yul\":390:391   */\n      dup1\n        /* \"#utility.yul\":383:395   */\n      revert\n        /* \"#utility.yul\":345:397   */\n    tag_42:\n        /* \"#utility.yul\":433:442   */\n      dup5\n        /* \"#utility.yul\":420:443   */\n      calldataload\n        /* \"#utility.yul\":462:480   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":503:505   */\n      dup1\n        /* \"#utility.yul\":495:501   */\n      dup3\n        /* \"#utility.yul\":492:506   */\n      gt\n        /* \"#utility.yul\":489:523   */\n      iszero\n      tag_43\n      jumpi\n        /* \"#utility.yul\":519:520   */\n      0x00\n        /* \"#utility.yul\":516:517   */\n      dup1\n        /* \"#utility.yul\":509:521   */\n      revert\n        /* \"#utility.yul\":489:523   */\n    tag_43:\n        /* \"#utility.yul\":557:563   */\n      dup2\n        /* \"#utility.yul\":546:555   */\n      dup8\n        /* \"#utility.yul\":542:564   */\n      add\n        /* \"#utility.yul\":532:564   */\n      swap2\n      pop\n        /* \"#utility.yul\":602:609   */\n      dup8\n        /* \"#utility.yul\":595:599   */\n      0x1f\n        /* \"#utility.yul\":591:593   */\n      dup4\n        /* \"#utility.yul\":587:600   */\n      add\n        /* \"#utility.yul\":583:610   */\n      slt\n        /* \"#utility.yul\":573:628   */\n      tag_44\n      jumpi\n        /* \"#utility.yul\":624:625   */\n      0x00\n        /* \"#utility.yul\":621:622   */\n      dup1\n        /* \"#utility.yul\":614:626   */\n      revert\n        /* \"#utility.yul\":573:628   */\n    tag_44:\n        /* \"#utility.yul\":664:666   */\n      dup2\n        /* \"#utility.yul\":651:667   */\n      calldataload\n        /* \"#utility.yul\":690:692   */\n      dup2\n        /* \"#utility.yul\":682:688   */\n      dup2\n        /* \"#utility.yul\":679:693   */\n      gt\n        /* \"#utility.yul\":676:710   */\n      iszero\n      tag_45\n      jumpi\n        /* \"#utility.yul\":706:707   */\n      0x00\n        /* \"#utility.yul\":703:704   */\n      dup1\n        /* \"#utility.yul\":696:708   */\n      revert\n        /* \"#utility.yul\":676:710   */\n    tag_45:\n        /* \"#utility.yul\":761:768   */\n      dup9\n        /* \"#utility.yul\":754:758   */\n      0x20\n        /* \"#utility.yul\":744:750   */\n      dup3\n        /* \"#utility.yul\":741:742   */\n      0x05\n        /* \"#utility.yul\":737:751   */\n      shl\n        /* \"#utility.yul\":733:735   */\n      dup6\n        /* \"#utility.yul\":729:752   */\n      add\n        /* \"#utility.yul\":725:759   */\n      add\n        /* \"#utility.yul\":722:769   */\n      gt\n        /* \"#utility.yul\":719:786   */\n      iszero\n      tag_46\n      jumpi\n        /* \"#utility.yul\":782:783   */\n      0x00\n        /* \"#utility.yul\":779:780   */\n      dup1\n        /* \"#utility.yul\":772:784   */\n      revert\n        /* \"#utility.yul\":719:786   */\n    tag_46:\n        /* \"#utility.yul\":813:817   */\n      0x20\n        /* \"#utility.yul\":805:818   */\n      swap3\n      dup4\n      add\n      swap7\n      pop\n        /* \"#utility.yul\":837:843   */\n      swap5\n      pop\n      pop\n        /* \"#utility.yul\":878:898   */\n      dup6\n      add\n        /* \"#utility.yul\":865:899   */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":928:959   */\n      dup2\n      and\n        /* \"#utility.yul\":918:960   */\n      dup2\n      eq\n        /* \"#utility.yul\":908:978   */\n      tag_47\n      jumpi\n        /* \"#utility.yul\":974:975   */\n      0x00\n        /* \"#utility.yul\":971:972   */\n      dup1\n        /* \"#utility.yul\":964:976   */\n      revert\n        /* \"#utility.yul\":908:978   */\n    tag_47:\n        /* \"#utility.yul\":196:1059   */\n      swap4\n      swap7\n      swap3\n      swap6\n      pop\n        /* \"#utility.yul\":997:1002   */\n      swap3\n      swap4\n        /* \"#utility.yul\":1049:1051   */\n      0x40\n        /* \"#utility.yul\":1034:1052   */\n      add\n        /* \"#utility.yul\":1021:1053   */\n      calldataload\n      swap3\n      pop\n      pop\n        /* \"#utility.yul\":196:1059   */\n      jump\t// out\n        /* \"#utility.yul\":1555:1682   */\n    tag_30:\n        /* \"#utility.yul\":1616:1626   */\n      0x4e487b71\n        /* \"#utility.yul\":1611:1614   */\n      0xe0\n        /* \"#utility.yul\":1607:1627   */\n      shl\n        /* \"#utility.yul\":1604:1605   */\n      0x00\n        /* \"#utility.yul\":1597:1628   */\n      mstore\n        /* \"#utility.yul\":1647:1651   */\n      0x32\n        /* \"#utility.yul\":1644:1645   */\n      0x04\n        /* \"#utility.yul\":1637:1652   */\n      mstore\n        /* \"#utility.yul\":1671:1675   */\n      0x24\n        /* \"#utility.yul\":1668:1669   */\n      0x00\n        /* \"#utility.yul\":1661:1676   */\n      revert\n        /* \"#utility.yul\":1687:1919   */\n    tag_37:\n        /* \"#utility.yul\":1726:1729   */\n      0x00\n        /* \"#utility.yul\":1747:1764   */\n      0x01\n      dup3\n      add\n        /* \"#utility.yul\":1744:1884   */\n      tag_52\n      jumpi\n        /* \"#utility.yul\":1806:1816   */\n      0x4e487b71\n        /* \"#utility.yul\":1801:1804   */\n      0xe0\n        /* \"#utility.yul\":1797:1817   */\n      shl\n        /* \"#utility.yul\":1794:1795   */\n      0x00\n        /* \"#utility.yul\":1787:1818   */\n      mstore\n        /* \"#utility.yul\":1841:1845   */\n      0x11\n        /* \"#utility.yul\":1838:1839   */\n      0x04\n        /* \"#utility.yul\":1831:1846   */\n      mstore\n        /* \"#utility.yul\":1869:1873   */\n      0x24\n        /* \"#utility.yul\":1866:1867   */\n      0x00\n        /* \"#utility.yul\":1859:1874   */\n      revert\n        /* \"#utility.yul\":1744:1884   */\n    tag_52:\n      pop\n        /* \"#utility.yul\":1911:1912   */\n      0x01\n        /* \"#utility.yul\":1900:1913   */\n      add\n      swap1\n        /* \"#utility.yul\":1687:1919   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220fa1b6b2d13223890a6568427b17369480fff5fdbefb110d2f830f3dd2758857564736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506102ac806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632eb4a7ab1461003b578063feb2386e14610057575b600080fd5b61004460005481565b6040519081526020015b60405180910390f35b61006a6100653660046101a1565b61007a565b604051901515815260200161004e565b60008054810361008c5750600061010f565b61010c8585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250546040516bffffffffffffffffffffffff1960608b901b1660208201526034810189905290935060540191506100f19050565b60405160208183030381529060405280519060200120610117565b90505b949350505050565b600082610124858461012d565b14949350505050565b600081815b845181101561019957600085828151811061014f5761014f610239565b602002602001015190508083116101755760008381526020829052604090209250610186565b600081815260208490526040902092505b50806101918161024f565b915050610132565b509392505050565b600080600080606085870312156101b757600080fd5b843567ffffffffffffffff808211156101cf57600080fd5b818701915087601f8301126101e357600080fd5b8135818111156101f257600080fd5b8860208260051b850101111561020757600080fd5b602092830196509450508501356001600160a01b038116811461022957600080fd5b9396929550929360400135925050565b634e487b7160e01b600052603260045260246000fd5b60006001820161026f57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220fa1b6b2d13223890a6568427b17369480fff5fdbefb110d2f830f3dd2758857564736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AC DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xFEB2386E EQ PUSH2 0x57 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x44 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6A PUSH2 0x65 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1 JUMP JUMPDEST PUSH2 0x7A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SUB PUSH2 0x8C JUMPI POP PUSH1 0x0 PUSH2 0x10F JUMP JUMPDEST PUSH2 0x10C DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SLOAD PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP12 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP10 SWAP1 MSTORE SWAP1 SWAP4 POP PUSH1 0x54 ADD SWAP2 POP PUSH2 0xF1 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x117 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x124 DUP6 DUP5 PUSH2 0x12D JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14F JUMPI PUSH2 0x14F PUSH2 0x239 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0x175 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP PUSH2 0x186 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0x191 DUP2 PUSH2 0x24F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x132 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP7 POP SWAP5 POP POP DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x40 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x26F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL SHL PUSH12 0x2D13223890A6568427B17369 BASEFEE 0xF SELFDESTRUCT 0x5F 0xDB 0xEF 0xB1 LT 0xD2 0xF8 ADDRESS RETURN 0xDD 0x27 PC DUP6 PUSH22 0x64736F6C634300080F00330000000000000000000000 ",
							"sourceMap": "133:476:11:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_efficientHash_865": {
									"entryPoint": null,
									"id": 865,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isWhitelist_1176": {
									"entryPoint": 122,
									"id": 1176,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@merkleRoot_1143": {
									"entryPoint": null,
									"id": 1143,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@processProof_854": {
									"entryPoint": 301,
									"id": 854,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@verify_797": {
									"entryPoint": 279,
									"id": 797,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256": {
									"entryPoint": 417,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 591,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x32": {
									"entryPoint": 569,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1921:12",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:12",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "115:76:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "125:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "137:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "148:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "133:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "133:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "125:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "167:9:12"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "178:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "160:25:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "160:25:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "84:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "95:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "106:4:12",
														"type": ""
													}
												],
												"src": "14:177:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "335:724:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "381:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "390:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "393:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "383:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "383:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "383:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "356:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "365:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "352:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "352:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "377:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "348:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "348:32:12"
															},
															"nodeType": "YulIf",
															"src": "345:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "406:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "433:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "420:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "420:23:12"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "410:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "452:28:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "462:18:12",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "456:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "507:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "516:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "519:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "509:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "509:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "509:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "495:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "503:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "492:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "492:14:12"
															},
															"nodeType": "YulIf",
															"src": "489:34:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "532:32:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "546:9:12"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "557:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "542:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "542:22:12"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "536:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "612:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "621:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "624:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "614:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "614:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "614:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "591:2:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "595:4:12",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "587:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "587:13:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "602:7:12"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "583:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "583:27:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "576:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "576:35:12"
															},
															"nodeType": "YulIf",
															"src": "573:55:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "637:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "664:2:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "651:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "651:16:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "641:6:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "694:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "703:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "706:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "696:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "696:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "696:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "682:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "690:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "679:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "679:14:12"
															},
															"nodeType": "YulIf",
															"src": "676:34:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "770:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "779:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "782:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "772:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "772:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "772:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "733:2:12"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "741:1:12",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "744:6:12"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "737:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "737:14:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "729:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "729:23:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "754:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "725:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "725:34:12"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "761:7:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "722:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "722:47:12"
															},
															"nodeType": "YulIf",
															"src": "719:67:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "795:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "809:2:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "813:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "805:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "805:13:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "795:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "827:16:12",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "837:6:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "827:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "852:47:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "882:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "893:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "878:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "878:20:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "865:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "865:34:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "856:5:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "962:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "971:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "974:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "964:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "964:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "964:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "921:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "932:5:12"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "947:3:12",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "952:1:12",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "943:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "943:11:12"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "956:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "939:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "939:19:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "928:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "928:31:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "918:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "918:42:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "911:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "911:50:12"
															},
															"nodeType": "YulIf",
															"src": "908:70:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "987:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "997:5:12"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "987:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1011:42:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1038:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1049:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1034:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1034:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1021:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1021:32:12"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "1011:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "277:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "288:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "300:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "308:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "316:6:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "324:6:12",
														"type": ""
													}
												],
												"src": "196:863:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1159:92:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1169:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1181:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1192:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1177:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1177:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1169:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1211:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1236:6:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1229:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1229:14:12"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1222:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1222:22:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1204:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1204:41:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1204:41:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1128:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1139:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1150:4:12",
														"type": ""
													}
												],
												"src": "1064:187:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1403:147:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1420:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1433:2:12",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1437:6:12"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "1429:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1429:15:12"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1450:26:12",
																						"type": "",
																						"value": "0xffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "1446:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1446:31:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1425:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1425:53:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1413:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1413:66:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1413:66:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1499:3:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1504:2:12",
																				"type": "",
																				"value": "20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1495:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1495:12:12"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1509:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1488:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1488:28:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1488:28:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1525:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1536:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1541:2:12",
																		"type": "",
																		"value": "52"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1532:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1532:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1525:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1371:3:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1376:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1384:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1395:3:12",
														"type": ""
													}
												],
												"src": "1256:294:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1587:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1604:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1611:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1616:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1607:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1607:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1597:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1597:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1597:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1644:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1647:4:12",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1637:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1637:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1637:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1668:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1671:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1661:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1661:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1661:15:12"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "1555:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1734:185:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1773:111:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1794:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1801:3:12",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1806:10:12",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1797:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1797:20:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1787:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1787:31:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1787:31:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1838:1:12",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1841:4:12",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1831:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1831:15:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1831:15:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1866:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1869:4:12",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1859:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1859:15:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1859:15:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1750:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1761:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1757:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1757:6:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1747:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1747:17:12"
															},
															"nodeType": "YulIf",
															"src": "1744:140:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1893:20:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1904:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1911:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1900:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1900:13:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "1893:3:12"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1716:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "1726:3:12",
														"type": ""
													}
												],
												"src": "1687:232:12"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 0x20)\n        value1 := length\n        let value := calldataload(add(headStart, 0x20))\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value2 := value\n        value3 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n}",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100365760003560e01c80632eb4a7ab1461003b578063feb2386e14610057575b600080fd5b61004460005481565b6040519081526020015b60405180910390f35b61006a6100653660046101a1565b61007a565b604051901515815260200161004e565b60008054810361008c5750600061010f565b61010c8585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250546040516bffffffffffffffffffffffff1960608b901b1660208201526034810189905290935060540191506100f19050565b60405160208183030381529060405280519060200120610117565b90505b949350505050565b600082610124858461012d565b14949350505050565b600081815b845181101561019957600085828151811061014f5761014f610239565b602002602001015190508083116101755760008381526020829052604090209250610186565b600081815260208490526040902092505b50806101918161024f565b915050610132565b509392505050565b600080600080606085870312156101b757600080fd5b843567ffffffffffffffff808211156101cf57600080fd5b818701915087601f8301126101e357600080fd5b8135818111156101f257600080fd5b8860208260051b850101111561020757600080fd5b602092830196509450508501356001600160a01b038116811461022957600080fd5b9396929550929360400135925050565b634e487b7160e01b600052603260045260246000fd5b60006001820161026f57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220fa1b6b2d13223890a6568427b17369480fff5fdbefb110d2f830f3dd2758857564736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xFEB2386E EQ PUSH2 0x57 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x44 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6A PUSH2 0x65 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1 JUMP JUMPDEST PUSH2 0x7A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SUB PUSH2 0x8C JUMPI POP PUSH1 0x0 PUSH2 0x10F JUMP JUMPDEST PUSH2 0x10C DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SLOAD PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP12 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP10 SWAP1 MSTORE SWAP1 SWAP4 POP PUSH1 0x54 ADD SWAP2 POP PUSH2 0xF1 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x117 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x124 DUP6 DUP5 PUSH2 0x12D JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14F JUMPI PUSH2 0x14F PUSH2 0x239 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0x175 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP PUSH2 0x186 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0x191 DUP2 PUSH2 0x24F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x132 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP7 POP SWAP5 POP POP DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x40 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x26F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL SHL PUSH12 0x2D13223890A6568427B17369 BASEFEE 0xF SELFDESTRUCT 0x5F 0xDB 0xEF 0xB1 LT 0xD2 0xF8 ADDRESS RETURN 0xDD 0x27 PC DUP6 PUSH22 0x64736F6C634300080F00330000000000000000000000 ",
							"sourceMap": "133:476:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;161:25;;;;;;;;;160::12;;;148:2;133:18;161:25:11;;;;;;;;195:409;;;;;;:::i;:::-;;:::i;:::-;;;1229:14:12;;1222:22;1204:41;;1192:2;1177:18;195:409:11;1064:187:12;195:409:11;335:4;356:10;;:15;;352:60;;-1:-1:-1;395:5:11;388:12;;352:60;444:152;481:6;;444:152;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;506:10:11;545:35;;-1:-1:-1;;1433:2:12;1429:15;;;1425:53;545:35:11;;;1413:66:12;1495:12;;;1488:28;;;506:10:11;;-1:-1:-1;1532:12:12;;;-1:-1:-1;545:35:11;;-1:-1:-1;1256:294:12;545:35:11;;;;;;;;;;;;;535:46;;;;;;444:18;:152::i;:::-;424:172;;195:409;;;;;;;:::o;1154:184:6:-;1275:4;1327;1298:25;1311:5;1318:4;1298:12;:25::i;:::-;:33;;1154:184;-1:-1:-1;;;;1154:184:6:o;1689:662::-;1772:7;1814:4;1772:7;1828:488;1852:5;:12;1848:1;:16;1828:488;;;1885:20;1908:5;1914:1;1908:8;;;;;;;;:::i;:::-;;;;;;;1885:31;;1950:12;1934;:28;1930:376;;2425:13;2473:15;;;2508:4;2501:15;;;2554:4;2538:21;;2060:57;;1930:376;;;2425:13;2473:15;;;2508:4;2501:15;;;2554:4;2538:21;;2234:57;;1930:376;-1:-1:-1;1866:3:6;;;;:::i;:::-;;;;1828:488;;;-1:-1:-1;2332:12:6;1689:662;-1:-1:-1;;;1689:662:6:o;196:863:12:-;300:6;308;316;324;377:2;365:9;356:7;352:23;348:32;345:52;;;393:1;390;383:12;345:52;433:9;420:23;462:18;503:2;495:6;492:14;489:34;;;519:1;516;509:12;489:34;557:6;546:9;542:22;532:32;;602:7;595:4;591:2;587:13;583:27;573:55;;624:1;621;614:12;573:55;664:2;651:16;690:2;682:6;679:14;676:34;;;706:1;703;696:12;676:34;761:7;754:4;744:6;741:1;737:14;733:2;729:23;725:34;722:47;719:67;;;782:1;779;772:12;719:67;813:4;805:13;;;;-1:-1:-1;837:6:12;-1:-1:-1;;878:20:12;;865:34;-1:-1:-1;;;;;928:31:12;;918:42;;908:70;;974:1;971;964:12;908:70;196:863;;;;-1:-1:-1;997:5:12;;1049:2;1034:18;1021:32;;-1:-1:-1;;196:863:12:o;1555:127::-;1616:10;1611:3;1607:20;1604:1;1597:31;1647:4;1644:1;1637:15;1671:4;1668:1;1661:15;1687:232;1726:3;1747:17;;;1744:140;;1806:10;1801:3;1797:20;1794:1;1787:31;1841:4;1838:1;1831:15;1869:4;1866:1;1859:15;1744:140;-1:-1:-1;1911:1:12;1900:13;;1687:232::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "136800",
								"executionCost": "183",
								"totalCost": "136983"
							},
							"external": {
								"isWhitelist(bytes32[],address,uint256)": "infinite",
								"merkleRoot()": "2262"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 133,
									"end": 609,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 133,
									"end": 609,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 133,
									"end": 609,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 133,
									"end": 609,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 133,
									"end": 609,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 133,
									"end": 609,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 133,
									"end": 609,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 133,
									"end": 609,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 133,
									"end": 609,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 133,
									"end": 609,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 133,
									"end": 609,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 133,
									"end": 609,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 133,
									"end": 609,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 133,
									"end": 609,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 133,
									"end": 609,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 133,
									"end": 609,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 133,
									"end": 609,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 133,
									"end": 609,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 133,
									"end": 609,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 133,
									"end": 609,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 133,
									"end": 609,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fa1b6b2d13223890a6568427b17369480fff5fdbefb110d2f830f3dd2758857564736f6c634300080f0033",
									".code": [
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "tag",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH",
											"source": 11,
											"value": "2EB4A7AB"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH",
											"source": 11,
											"value": "FEB2386E"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "tag",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 133,
											"end": 609,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 133,
											"end": 609,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "tag",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "tag",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 160,
											"end": 185,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 161,
											"end": 186,
											"name": "tag",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 161,
											"end": 186,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 161,
											"end": 186,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "tag",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 195,
											"end": 604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "tag",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 195,
											"end": 604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "tag",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1229,
											"end": 1243,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1229,
											"end": 1243,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1222,
											"end": 1244,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1204,
											"end": 1245,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1204,
											"end": 1245,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1192,
											"end": 1194,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1177,
											"end": 1195,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 195,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 1064,
											"end": 1251,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 195,
											"end": 604,
											"name": "tag",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 335,
											"end": 339,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 366,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 356,
											"end": 366,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 356,
											"end": 371,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 356,
											"end": 371,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 352,
											"end": 412,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 352,
											"end": 412,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 395,
											"end": 400,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 388,
											"end": 400,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 388,
											"end": 400,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 352,
											"end": 412,
											"name": "tag",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 352,
											"end": 412,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 481,
											"end": 487,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 481,
											"end": 487,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "CALLDATACOPY",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 506,
											"end": 516,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1433,
											"end": 1435,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 1429,
											"end": 1444,
											"name": "DUP12",
											"source": 12
										},
										{
											"begin": 1429,
											"end": 1444,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1429,
											"end": 1444,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 1425,
											"end": 1478,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 545,
											"end": 580,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1413,
											"end": 1479,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1488,
											"end": 1516,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 1488,
											"end": 1516,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1488,
											"end": 1516,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 506,
											"end": 516,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 506,
											"end": 516,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 1544,
											"name": "PUSH",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 1532,
											"end": 1544,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1532,
											"end": 1544,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 545,
											"end": 580,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1256,
											"end": 1550,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 545,
											"end": 580,
											"name": "tag",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 580,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 580,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 535,
											"end": 581,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 535,
											"end": 581,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 535,
											"end": 581,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 535,
											"end": 581,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 535,
											"end": 581,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 444,
											"end": 462,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 444,
											"end": 596,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 444,
											"end": 596,
											"name": "tag",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 444,
											"end": 596,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 424,
											"end": 596,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 424,
											"end": 596,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "tag",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 195,
											"end": 604,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 195,
											"end": 604,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "tag",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1275,
											"end": 1279,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1327,
											"end": 1331,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1311,
											"end": 1316,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1318,
											"end": 1322,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1298,
											"end": 1310,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 1298,
											"end": 1323,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1298,
											"end": 1331,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1298,
											"end": 1331,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1154,
											"end": 1338,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "tag",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1772,
											"end": 1779,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1814,
											"end": 1818,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1772,
											"end": 1779,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1852,
											"end": 1857,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1852,
											"end": 1864,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1848,
											"end": 1849,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1848,
											"end": 1864,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1885,
											"end": 1905,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1908,
											"end": 1913,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1914,
											"end": 1915,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 1908,
											"end": 1916,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1885,
											"end": 1916,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1885,
											"end": 1916,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1950,
											"end": 1962,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1934,
											"end": 1946,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1934,
											"end": 1962,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2425,
											"end": 2438,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2508,
											"end": 2512,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2554,
											"end": 2558,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2060,
											"end": 2117,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2060,
											"end": 2117,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "tag",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2425,
											"end": 2438,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2508,
											"end": 2512,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2554,
											"end": 2558,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2234,
											"end": 2291,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2234,
											"end": 2291,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "tag",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "36"
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 1866,
											"end": 1869,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "tag",
											"source": 6,
											"value": "36"
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "tag",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2332,
											"end": 2344,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1689,
											"end": 2351,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 196,
											"end": 1059,
											"name": "tag",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 196,
											"end": 1059,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 300,
											"end": 306,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 316,
											"end": 322,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 324,
											"end": 330,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 377,
											"end": 379,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 365,
											"end": 374,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 356,
											"end": 363,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 352,
											"end": 375,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 348,
											"end": 380,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 345,
											"end": 397,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 345,
											"end": 397,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "42"
										},
										{
											"begin": 345,
											"end": 397,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 393,
											"end": 394,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 390,
											"end": 391,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 383,
											"end": 395,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 345,
											"end": 397,
											"name": "tag",
											"source": 12,
											"value": "42"
										},
										{
											"begin": 345,
											"end": 397,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 433,
											"end": 442,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 420,
											"end": 443,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 462,
											"end": 480,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 503,
											"end": 505,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 495,
											"end": 501,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 492,
											"end": 506,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 489,
											"end": 523,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 489,
											"end": 523,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 489,
											"end": 523,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 519,
											"end": 520,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 516,
											"end": 517,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 509,
											"end": 521,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 489,
											"end": 523,
											"name": "tag",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 489,
											"end": 523,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 557,
											"end": 563,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 546,
											"end": 555,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 542,
											"end": 564,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 532,
											"end": 564,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 532,
											"end": 564,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 602,
											"end": 609,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 595,
											"end": 599,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 591,
											"end": 593,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 587,
											"end": 600,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 583,
											"end": 610,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 573,
											"end": 628,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 628,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 624,
											"end": 625,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 621,
											"end": 622,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 614,
											"end": 626,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 573,
											"end": 628,
											"name": "tag",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 628,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 664,
											"end": 666,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 667,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 690,
											"end": 692,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 682,
											"end": 688,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 679,
											"end": 693,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 676,
											"end": 710,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 676,
											"end": 710,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 676,
											"end": 710,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 706,
											"end": 707,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 703,
											"end": 704,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 696,
											"end": 708,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 676,
											"end": 710,
											"name": "tag",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 676,
											"end": 710,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 761,
											"end": 768,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 754,
											"end": 758,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 750,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 741,
											"end": 742,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 737,
											"end": 751,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 733,
											"end": 735,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 729,
											"end": 752,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 725,
											"end": 759,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 722,
											"end": 769,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 719,
											"end": 786,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 719,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 719,
											"end": 786,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 782,
											"end": 783,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 779,
											"end": 780,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 772,
											"end": 784,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 719,
											"end": 786,
											"name": "tag",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 719,
											"end": 786,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 813,
											"end": 817,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 805,
											"end": 818,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 805,
											"end": 818,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 805,
											"end": 818,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 805,
											"end": 818,
											"name": "SWAP7",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 837,
											"end": 843,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 878,
											"end": 898,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 878,
											"end": 898,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 865,
											"end": 899,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 928,
											"end": 959,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 928,
											"end": 959,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 918,
											"end": 960,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 918,
											"end": 960,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 908,
											"end": 978,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 908,
											"end": 978,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 974,
											"end": 975,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 971,
											"end": 972,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 964,
											"end": 976,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 908,
											"end": 978,
											"name": "tag",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 908,
											"end": 978,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 196,
											"end": 1059,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 196,
											"end": 1059,
											"name": "SWAP7",
											"source": 12
										},
										{
											"begin": 196,
											"end": 1059,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 196,
											"end": 1059,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 997,
											"end": 1002,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 997,
											"end": 1002,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 1049,
											"end": 1051,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1034,
											"end": 1052,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1021,
											"end": 1053,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1021,
											"end": 1053,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 196,
											"end": 1059,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1555,
											"end": 1682,
											"name": "tag",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 1555,
											"end": 1682,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1616,
											"end": 1626,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 1611,
											"end": 1614,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 1607,
											"end": 1627,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 1604,
											"end": 1605,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1597,
											"end": 1628,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1647,
											"end": 1651,
											"name": "PUSH",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 1644,
											"end": 1645,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1637,
											"end": 1652,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1671,
											"end": 1675,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1668,
											"end": 1669,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1661,
											"end": 1676,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1687,
											"end": 1919,
											"name": "tag",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 1687,
											"end": 1919,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1726,
											"end": 1729,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1747,
											"end": 1764,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1747,
											"end": 1764,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1747,
											"end": 1764,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1744,
											"end": 1884,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 1744,
											"end": 1884,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1806,
											"end": 1816,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 1801,
											"end": 1804,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 1797,
											"end": 1817,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 1794,
											"end": 1795,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1787,
											"end": 1818,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1841,
											"end": 1845,
											"name": "PUSH",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 1838,
											"end": 1839,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1831,
											"end": 1846,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1869,
											"end": 1873,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1866,
											"end": 1867,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1859,
											"end": 1874,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1744,
											"end": 1884,
											"name": "tag",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 1744,
											"end": 1884,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1911,
											"end": 1912,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1900,
											"end": 1913,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1900,
											"end": 1913,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1687,
											"end": 1919,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/AccessControl.sol",
								"@openzeppelin/contracts/access/IAccessControl.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"INagaKidsNFT.sol",
								"MintNagaKids.sol",
								"Whitelist.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"isWhitelist(bytes32[],address,uint256)": "feb2386e",
							"merkleRoot()": "2eb4a7ab"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Whitelist.sol\":\"Whitelist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1aa68fa19422863cc91d23b5896917dbe79175ed47b591148aaeb3e98cb49752\",\"dweb:/ipfs/QmeY64vTRbGhdXcytRKusfJsAfNF4aqr9e1SGBGdCYvW2j\"]},\"Whitelist.sol\":{\"keccak256\":\"0x408caf11cc1650d5a9acdabaa5c3eb873bb39cf0aa4e2239039c6d5ad463fa53\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e91f3a441d7e9ffa24c5ee8242ce5d94056d68656de4bd4ea76e2e8d0a83cee9\",\"dweb:/ipfs/QmZ87LLAWtY8NXhAXkpQk4RfGXnQQbWsxFUxUXg8bmKupK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1143,
								"contract": "Whitelist.sol:Whitelist",
								"label": "merkleRoot",
								"offset": 0,
								"slot": "0",
								"type": "t_bytes32"
							}
						],
						"types": {
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> MintNagaKids.sol:41:28:\n   |\n41 |     function whitelistMint(uint256 amount) public payable nonReentrant Paused {\n   |                            ^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1269,
					"file": "MintNagaKids.sol",
					"start": 1255
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/AccessControl.sol",
					"exportedSymbols": {
						"AccessControl": [
							319
						],
						"Context": [
							570
						],
						"ERC165": [
							890
						],
						"IAccessControl": [
							392
						],
						"IERC165": [
							902
						],
						"Strings": [
							773
						]
					},
					"id": 320,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
							"file": "./IAccessControl.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 320,
							"sourceUnit": 393,
							"src": "133:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 320,
							"sourceUnit": 571,
							"src": "164:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "../utils/Strings.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 320,
							"sourceUnit": 774,
							"src": "195:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "../utils/introspection/ERC165.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 320,
							"sourceUnit": 891,
							"src": "226:43:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 570,
										"src": "1841:7:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "1841:7:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "IAccessControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 392,
										"src": "1850:14:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "1850:14:0"
								},
								{
									"baseName": {
										"id": 11,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 890,
										"src": "1866:6:0"
									},
									"id": 12,
									"nodeType": "InheritanceSpecifier",
									"src": "1866:6:0"
								}
							],
							"canonicalName": "AccessControl",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "271:1534:0",
								"text": " @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."
							},
							"fullyImplemented": true,
							"id": 319,
							"linearizedBaseContracts": [
								319,
								890,
								902,
								392,
								570
							],
							"name": "AccessControl",
							"nameLocation": "1824:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "AccessControl.RoleData",
									"id": 19,
									"members": [
										{
											"constant": false,
											"id": 16,
											"mutability": "mutable",
											"name": "members",
											"nameLocation": "1930:7:0",
											"nodeType": "VariableDeclaration",
											"scope": 19,
											"src": "1905:32:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"typeName": {
												"id": 15,
												"keyType": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1913:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1905:24:0",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
													"typeString": "mapping(address => bool)"
												},
												"valueType": {
													"id": 14,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1924:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 18,
											"mutability": "mutable",
											"name": "adminRole",
											"nameLocation": "1955:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 19,
											"src": "1947:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 17,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1947:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "RoleData",
									"nameLocation": "1886:8:0",
									"nodeType": "StructDefinition",
									"scope": 319,
									"src": "1879:92:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 24,
									"mutability": "mutable",
									"name": "_roles",
									"nameLocation": "2014:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 319,
									"src": "1977:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
										"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
									},
									"typeName": {
										"id": 23,
										"keyType": {
											"id": 20,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "1985:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "1977:28:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
											"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
										},
										"valueType": {
											"id": 22,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 21,
												"name": "RoleData",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 19,
												"src": "1996:8:0"
											},
											"referencedDeclaration": 19,
											"src": "1996:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_RoleData_$19_storage_ptr",
												"typeString": "struct AccessControl.RoleData"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"functionSelector": "a217fddf",
									"id": 27,
									"mutability": "constant",
									"name": "DEFAULT_ADMIN_ROLE",
									"nameLocation": "2051:18:0",
									"nodeType": "VariableDeclaration",
									"scope": 319,
									"src": "2027:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 25,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2027:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "30783030",
										"id": 26,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2072:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0x00"
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 37,
										"nodeType": "Block",
										"src": "2495:44:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 33,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 30,
															"src": "2516:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 32,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															92,
															135
														],
														"referencedDeclaration": 92,
														"src": "2505:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32) view"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2505:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "2505:16:0"
											},
											{
												"id": 36,
												"nodeType": "PlaceholderStatement",
												"src": "2531:1:0"
											}
										]
									},
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "2083:375:0",
										"text": " @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"
									},
									"id": 38,
									"name": "onlyRole",
									"nameLocation": "2472:8:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2489:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 38,
												"src": "2481:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 29,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2481:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2480:14:0"
									},
									"src": "2463:76:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										889
									],
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "2697:111:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 52,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 47,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 41,
															"src": "2714:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 49,
																		"name": "IAccessControl",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 392,
																		"src": "2734:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$392_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$392_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	],
																	"id": 48,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2729:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 50,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2729:20:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_contract$_IAccessControl_$392",
																	"typeString": "type(contract IAccessControl)"
																}
															},
															"id": 51,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "interfaceId",
															"nodeType": "MemberAccess",
															"src": "2729:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "2714:47:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 55,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 41,
																"src": "2789:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 53,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "2765:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_AccessControl_$319_$",
																	"typeString": "type(contract super AccessControl)"
																}
															},
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 889,
															"src": "2765:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 56,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2765:36:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2714:87:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 46,
												"id": 58,
												"nodeType": "Return",
												"src": "2707:94:0"
											}
										]
									},
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "2545:56:0",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "2615:17:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 43,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2673:8:0"
									},
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2640:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2633:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 40,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2633:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2632:20:0"
									},
									"returnParameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2691:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 44,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2691:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2690:6:0"
									},
									"scope": 319,
									"src": "2606:202:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										359
									],
									"body": {
										"id": 78,
										"nodeType": "Block",
										"src": "2987:53:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"baseExpression": {
																"id": 71,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "3004:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 73,
															"indexExpression": {
																"id": 72,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "3011:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3004:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$19_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "members",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 16,
														"src": "3004:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 76,
													"indexExpression": {
														"id": 75,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "3025:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3004:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 70,
												"id": 77,
												"nodeType": "Return",
												"src": "2997:36:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "2814:76:0",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 79,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "2904:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 67,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2963:8:0"
									},
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2920:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "2912:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 62,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2912:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2934:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "2926:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2926:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:31:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "2981:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 68,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2981:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2980:6:0"
									},
									"scope": 319,
									"src": "2895:145:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 91,
										"nodeType": "Block",
										"src": "3390:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 86,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 82,
															"src": "3411:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 87,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 560,
																"src": "3417:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 88,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3417:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 85,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															92,
															135
														],
														"referencedDeclaration": 135,
														"src": "3400:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address) view"
														}
													},
													"id": 89,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3400:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 90,
												"nodeType": "ExpressionStatement",
												"src": "3400:30:0"
											}
										]
									},
									"documentation": {
										"id": 80,
										"nodeType": "StructuredDocumentation",
										"src": "3046:283:0",
										"text": " @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"
									},
									"id": 92,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3343:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3362:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "3354:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 81,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3354:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3353:14:0"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3390:0:0"
									},
									"scope": 319,
									"src": "3334:103:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 134,
										"nodeType": "Block",
										"src": "3791:419:0",
										"statements": [
											{
												"condition": {
													"id": 104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3805:23:0",
													"subExpression": {
														"arguments": [
															{
																"id": 101,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 95,
																"src": "3814:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 102,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 97,
																"src": "3820:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 100,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 79,
															"src": "3806:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 103,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3806:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 133,
												"nodeType": "IfStatement",
												"src": "3801:403:0",
												"trueBody": {
													"id": 132,
													"nodeType": "Block",
													"src": "3830:374:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																						"id": 110,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3938:25:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																							"typeString": "literal_string \"AccessControl: account \""
																						},
																						"value": "AccessControl: account "
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"id": 115,
																										"name": "account",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 97,
																										"src": "4017:7:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									],
																									"id": 114,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "4009:7:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_uint160_$",
																										"typeString": "type(uint160)"
																									},
																									"typeName": {
																										"id": 113,
																										"name": "uint160",
																										"nodeType": "ElementaryTypeName",
																										"src": "4009:7:0",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 116,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "4009:16:0",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint160",
																									"typeString": "uint160"
																								}
																							},
																							{
																								"hexValue": "3230",
																								"id": 117,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "4027:2:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_20_by_1",
																									"typeString": "int_const 20"
																								},
																								"value": "20"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint160",
																									"typeString": "uint160"
																								},
																								{
																									"typeIdentifier": "t_rational_20_by_1",
																									"typeString": "int_const 20"
																								}
																							],
																							"expression": {
																								"id": 111,
																								"name": "Strings",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 773,
																								"src": "3989:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_Strings_$773_$",
																									"typeString": "type(library Strings)"
																								}
																							},
																							"id": 112,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "toHexString",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 772,
																							"src": "3989:19:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																								"typeString": "function (uint256,uint256) pure returns (string memory)"
																							}
																						},
																						"id": 118,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3989:41:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					},
																					{
																						"hexValue": "206973206d697373696e6720726f6c6520",
																						"id": 119,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "4056:19:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																							"typeString": "literal_string \" is missing role \""
																						},
																						"value": " is missing role "
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"id": 124,
																										"name": "role",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 95,
																										"src": "4129:4:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_bytes32",
																											"typeString": "bytes32"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_bytes32",
																											"typeString": "bytes32"
																										}
																									],
																									"id": 123,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "4121:7:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_uint256_$",
																										"typeString": "type(uint256)"
																									},
																									"typeName": {
																										"id": 122,
																										"name": "uint256",
																										"nodeType": "ElementaryTypeName",
																										"src": "4121:7:0",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 125,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "4121:13:0",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"hexValue": "3332",
																								"id": 126,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "4136:2:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								},
																								"value": "32"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								}
																							],
																							"expression": {
																								"id": 120,
																								"name": "Strings",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 773,
																								"src": "4101:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_Strings_$773_$",
																									"typeString": "type(library Strings)"
																								}
																							},
																							"id": 121,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "toHexString",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 772,
																							"src": "4101:19:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																								"typeString": "function (uint256,uint256) pure returns (string memory)"
																							}
																						},
																						"id": 127,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "4101:38:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																							"typeString": "literal_string \"AccessControl: account \""
																						},
																						{
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						},
																						{
																							"typeIdentifier": "t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																							"typeString": "literal_string \" is missing role \""
																						},
																						{
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					],
																					"expression": {
																						"id": 108,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "3896:3:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 109,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "3896:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 128,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3896:265:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 107,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3868:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																				"typeString": "type(string storage pointer)"
																			},
																			"typeName": {
																				"id": 106,
																				"name": "string",
																				"nodeType": "ElementaryTypeName",
																				"src": "3868:6:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 129,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3868:311:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 105,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "3844:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 130,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3844:349:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 131,
															"nodeType": "ExpressionStatement",
															"src": "3844:349:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "3443:270:0",
										"text": " @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"
									},
									"id": 135,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3727:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3746:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "3738:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 94,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3738:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3760:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "3752:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3752:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3737:31:0"
									},
									"returnParameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3791:0:0"
									},
									"scope": 319,
									"src": "3718:492:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										367
									],
									"body": {
										"id": 149,
										"nodeType": "Block",
										"src": "4474:46:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 144,
															"name": "_roles",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 24,
															"src": "4491:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
															}
														},
														"id": 146,
														"indexExpression": {
															"id": 145,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 138,
															"src": "4498:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4491:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_RoleData_$19_storage",
															"typeString": "struct AccessControl.RoleData storage ref"
														}
													},
													"id": 147,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "adminRole",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 18,
													"src": "4491:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 143,
												"id": 148,
												"nodeType": "Return",
												"src": "4484:29:0"
											}
										]
									},
									"documentation": {
										"id": 136,
										"nodeType": "StructuredDocumentation",
										"src": "4216:170:0",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 150,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "4400:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 140,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4447:8:0"
									},
									"parameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4421:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 150,
												"src": "4413:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 137,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4413:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4412:14:0"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 150,
												"src": "4465:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 141,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4465:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4464:9:0"
									},
									"scope": 319,
									"src": "4391:129:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										375
									],
									"body": {
										"id": 169,
										"nodeType": "Block",
										"src": "4873:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 165,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "4894:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 166,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 155,
															"src": "4900:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 164,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 287,
														"src": "4883:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4883:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 168,
												"nodeType": "ExpressionStatement",
												"src": "4883:25:0"
											}
										]
									},
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "4526:239:0",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "2f2ff15d",
									"id": 170,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 160,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "4866:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 159,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 150,
														"src": "4853:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4853:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 162,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 158,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "4844:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "4844:28:0"
										}
									],
									"name": "grantRole",
									"nameLocation": "4779:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 157,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4835:8:0"
									},
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4797:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "4789:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 152,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4789:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4811:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "4803:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 154,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4803:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4788:31:0"
									},
									"returnParameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4873:0:0"
									},
									"scope": 319,
									"src": "4770:145:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										383
									],
									"body": {
										"id": 189,
										"nodeType": "Block",
										"src": "5253:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 185,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5275:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 186,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 175,
															"src": "5281:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 184,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 318,
														"src": "5263:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5263:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 188,
												"nodeType": "ExpressionStatement",
												"src": "5263:26:0"
											}
										]
									},
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "4921:223:0",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "d547741f",
									"id": 190,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 180,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5246:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 179,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 150,
														"src": "5233:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5233:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 182,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 178,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "5224:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "5224:28:0"
										}
									],
									"name": "revokeRole",
									"nameLocation": "5158:10:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 177,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5215:8:0"
									},
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5177:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "5169:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 172,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5191:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "5183:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5183:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5168:31:0"
									},
									"returnParameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5253:0:0"
									},
									"scope": 319,
									"src": "5149:147:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										391
									],
									"body": {
										"id": 212,
										"nodeType": "Block",
										"src": "5864:137:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 203,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 200,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 195,
																"src": "5882:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 201,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 560,
																	"src": "5893:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 202,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5893:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5882:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66",
															"id": 204,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5907:49:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																"typeString": "literal_string \"AccessControl: can only renounce roles for self\""
															},
															"value": "AccessControl: can only renounce roles for self"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																"typeString": "literal_string \"AccessControl: can only renounce roles for self\""
															}
														],
														"id": 199,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5874:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5874:83:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 206,
												"nodeType": "ExpressionStatement",
												"src": "5874:83:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 208,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 193,
															"src": "5980:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 209,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 195,
															"src": "5986:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 207,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 318,
														"src": "5968:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5968:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 211,
												"nodeType": "ExpressionStatement",
												"src": "5968:26:0"
											}
										]
									},
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "5302:480:0",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."
									},
									"functionSelector": "36568abe",
									"id": 213,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "5796:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 197,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5855:8:0"
									},
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5817:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "5809:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 192,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5809:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5831:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "5823:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5823:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5808:31:0"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5864:0:0"
									},
									"scope": 319,
									"src": "5787:214:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 226,
										"nodeType": "Block",
										"src": "6708:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 222,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "6729:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 223,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "6735:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 221,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 287,
														"src": "6718:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6718:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 225,
												"nodeType": "ExpressionStatement",
												"src": "6718:25:0"
											}
										]
									},
									"documentation": {
										"id": 214,
										"nodeType": "StructuredDocumentation",
										"src": "6007:628:0",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."
									},
									"id": 227,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupRole",
									"nameLocation": "6649:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6668:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "6660:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 215,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6660:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6682:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "6674:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6674:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6659:31:0"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6708:0:0"
									},
									"scope": 319,
									"src": "6640:110:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 254,
										"nodeType": "Block",
										"src": "6948:174:0",
										"statements": [
											{
												"assignments": [
													236
												],
												"declarations": [
													{
														"constant": false,
														"id": 236,
														"mutability": "mutable",
														"name": "previousAdminRole",
														"nameLocation": "6966:17:0",
														"nodeType": "VariableDeclaration",
														"scope": 254,
														"src": "6958:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 235,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6958:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 240,
												"initialValue": {
													"arguments": [
														{
															"id": 238,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "6999:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 237,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 150,
														"src": "6986:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6986:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6958:46:0"
											},
											{
												"expression": {
													"id": 246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 241,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "7014:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 243,
															"indexExpression": {
																"id": 242,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 230,
																"src": "7021:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7014:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$19_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 244,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "adminRole",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 18,
														"src": "7014:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 245,
														"name": "adminRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 232,
														"src": "7039:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "7014:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 247,
												"nodeType": "ExpressionStatement",
												"src": "7014:34:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 249,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "7080:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 250,
															"name": "previousAdminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 236,
															"src": "7086:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 251,
															"name": "adminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 232,
															"src": "7105:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 248,
														"name": "RoleAdminChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 331,
														"src": "7063:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32,bytes32,bytes32)"
														}
													},
													"id": 252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7063:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 253,
												"nodeType": "EmitStatement",
												"src": "7058:57:0"
											}
										]
									},
									"documentation": {
										"id": 228,
										"nodeType": "StructuredDocumentation",
										"src": "6756:114:0",
										"text": " @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."
									},
									"id": 255,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setRoleAdmin",
									"nameLocation": "6884:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6906:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "6898:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 229,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6898:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "adminRole",
												"nameLocation": "6920:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "6912:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 231,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6912:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6897:33:0"
									},
									"returnParameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6948:0:0"
									},
									"scope": 319,
									"src": "6875:247:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 286,
										"nodeType": "Block",
										"src": "7312:165:0",
										"statements": [
											{
												"condition": {
													"id": 267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7326:23:0",
													"subExpression": {
														"arguments": [
															{
																"id": 264,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 258,
																"src": "7335:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 265,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 260,
																"src": "7341:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 263,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 79,
															"src": "7327:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 266,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7327:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 285,
												"nodeType": "IfStatement",
												"src": "7322:149:0",
												"trueBody": {
													"id": 284,
													"nodeType": "Block",
													"src": "7351:120:0",
													"statements": [
														{
															"expression": {
																"id": 275,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 268,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 24,
																				"src": "7365:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 270,
																			"indexExpression": {
																				"id": 269,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 258,
																				"src": "7372:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7365:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$19_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 271,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "members",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 16,
																		"src": "7365:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 273,
																	"indexExpression": {
																		"id": 272,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 260,
																		"src": "7386:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "7365:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 274,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7397:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "7365:36:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 276,
															"nodeType": "ExpressionStatement",
															"src": "7365:36:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 278,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 258,
																		"src": "7432:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 279,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 260,
																		"src": "7438:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 280,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 560,
																			"src": "7447:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 281,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7447:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 277,
																	"name": "RoleGranted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 340,
																	"src": "7420:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 282,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7420:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 283,
															"nodeType": "EmitStatement",
															"src": "7415:45:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 256,
										"nodeType": "StructuredDocumentation",
										"src": "7128:111:0",
										"text": " @dev Grants `role` to `account`.\n Internal function without access restriction."
									},
									"id": 287,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_grantRole",
									"nameLocation": "7253:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7272:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "7264:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 257,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7264:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7286:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "7278:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7278:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7263:31:0"
									},
									"returnParameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7312:0:0"
									},
									"scope": 319,
									"src": "7244:233:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 317,
										"nodeType": "Block",
										"src": "7671:165:0",
										"statements": [
											{
												"condition": {
													"arguments": [
														{
															"id": 296,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 290,
															"src": "7693:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 297,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 292,
															"src": "7699:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 295,
														"name": "hasRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 79,
														"src": "7685:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) view returns (bool)"
														}
													},
													"id": 298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7685:22:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 316,
												"nodeType": "IfStatement",
												"src": "7681:149:0",
												"trueBody": {
													"id": 315,
													"nodeType": "Block",
													"src": "7709:121:0",
													"statements": [
														{
															"expression": {
																"id": 306,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 299,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 24,
																				"src": "7723:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 301,
																			"indexExpression": {
																				"id": 300,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 290,
																				"src": "7730:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7723:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$19_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 302,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "members",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 16,
																		"src": "7723:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 304,
																	"indexExpression": {
																		"id": 303,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 292,
																		"src": "7744:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "7723:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 305,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7755:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "7723:37:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 307,
															"nodeType": "ExpressionStatement",
															"src": "7723:37:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 309,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 290,
																		"src": "7791:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 310,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 292,
																		"src": "7797:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 311,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 560,
																			"src": "7806:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 312,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7806:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 308,
																	"name": "RoleRevoked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 349,
																	"src": "7779:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 313,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7779:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 314,
															"nodeType": "EmitStatement",
															"src": "7774:45:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "7483:114:0",
										"text": " @dev Revokes `role` from `account`.\n Internal function without access restriction."
									},
									"id": 318,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revokeRole",
									"nameLocation": "7611:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7631:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "7623:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 289,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7623:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7645:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "7637:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7637:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7622:31:0"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7671:0:0"
									},
									"scope": 319,
									"src": "7602:234:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 320,
							"src": "1806:6032:0",
							"usedErrors": []
						}
					],
					"src": "108:7731:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
					"exportedSymbols": {
						"IAccessControl": [
							392
						]
					},
					"id": 393,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 321,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "94:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAccessControl",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 322,
								"nodeType": "StructuredDocumentation",
								"src": "119:89:1",
								"text": " @dev External interface of AccessControl declared to support ERC165 detection."
							},
							"fullyImplemented": false,
							"id": 392,
							"linearizedBaseContracts": [
								392
							],
							"name": "IAccessControl",
							"nameLocation": "219:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 323,
										"nodeType": "StructuredDocumentation",
										"src": "240:292:1",
										"text": " @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"
									},
									"eventSelector": "bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
									"id": 331,
									"name": "RoleAdminChanged",
									"nameLocation": "543:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "576:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "560:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 324,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "560:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 327,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousAdminRole",
												"nameLocation": "598:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "582:33:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 326,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "582:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 329,
												"indexed": true,
												"mutability": "mutable",
												"name": "newAdminRole",
												"nameLocation": "633:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "617:28:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 328,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "617:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "559:87:1"
									},
									"src": "537:110:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 332,
										"nodeType": "StructuredDocumentation",
										"src": "653:212:1",
										"text": " @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."
									},
									"eventSelector": "2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
									"id": 340,
									"name": "RoleGranted",
									"nameLocation": "876:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 334,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "904:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "888:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 333,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "888:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "926:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "910:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 335,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "910:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 338,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "951:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "935:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 337,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "887:71:1"
									},
									"src": "870:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 341,
										"nodeType": "StructuredDocumentation",
										"src": "965:275:1",
										"text": " @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
									},
									"eventSelector": "f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b",
									"id": 349,
									"name": "RoleRevoked",
									"nameLocation": "1251:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 343,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1279:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1263:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 342,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1301:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1285:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1285:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1326:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1310:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1310:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1262:71:1"
									},
									"src": "1245:89:1"
								},
								{
									"documentation": {
										"id": 350,
										"nodeType": "StructuredDocumentation",
										"src": "1340:76:1",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 359,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "1430:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1446:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "1438:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 351,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1438:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1460:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "1452:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1437:31:1"
									},
									"returnParameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "1492:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 356,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1492:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1491:6:1"
									},
									"scope": 392,
									"src": "1421:77:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 360,
										"nodeType": "StructuredDocumentation",
										"src": "1504:184:1",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 367,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "1702:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1723:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "1715:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 361,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1715:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1714:14:1"
									},
									"returnParameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "1752:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 364,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1752:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1751:9:1"
									},
									"scope": 392,
									"src": "1693:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 368,
										"nodeType": "StructuredDocumentation",
										"src": "1767:239:1",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "2f2ff15d",
									"id": 375,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "grantRole",
									"nameLocation": "2020:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2038:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "2030:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 369,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2030:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2052:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "2044:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 371,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2044:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2029:31:1"
									},
									"returnParameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2069:0:1"
									},
									"scope": 392,
									"src": "2011:59:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 376,
										"nodeType": "StructuredDocumentation",
										"src": "2076:223:1",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "d547741f",
									"id": 383,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeRole",
									"nameLocation": "2313:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2332:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "2324:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 377,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2324:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 380,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2346:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "2338:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 379,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2338:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2323:31:1"
									},
									"returnParameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2363:0:1"
									},
									"scope": 392,
									"src": "2304:60:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "2370:480:1",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."
									},
									"functionSelector": "36568abe",
									"id": 391,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "2864:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2885:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "2877:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 385,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2877:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2899:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "2891:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2891:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2876:31:1"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2916:0:1"
									},
									"scope": 392,
									"src": "2855:62:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 393,
							"src": "209:2710:1",
							"usedErrors": []
						}
					],
					"src": "94:2826:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							432
						]
					},
					"id": 433,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 394,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 395,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:2",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 432,
							"linearizedBaseContracts": [
								432
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 398,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 432,
									"src": "1661:41:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 396,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 397,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 401,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:2",
									"nodeType": "VariableDeclaration",
									"scope": 432,
									"src": "1708:37:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 399,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 400,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 403,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 432,
									"src": "1752:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 402,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 410,
										"nodeType": "Block",
										"src": "1796:39:2",
										"statements": [
											{
												"expression": {
													"id": 408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 406,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 403,
														"src": "1806:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 407,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 398,
														"src": "1816:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 409,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:2"
											}
										]
									},
									"id": 411,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:2"
									},
									"returnParameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:2"
									},
									"scope": 432,
									"src": "1782:53:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 430,
										"nodeType": "Block",
										"src": "2236:421:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 415,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 403,
																"src": "2325:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 416,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 401,
																"src": "2336:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 418,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 414,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 420,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:2"
											},
											{
												"expression": {
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 421,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 403,
														"src": "2455:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 422,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 401,
														"src": "2465:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 424,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:2"
											},
											{
												"id": 425,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:2"
											},
											{
												"expression": {
													"id": 428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 426,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 403,
														"src": "2628:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 427,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 398,
														"src": "2638:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 429,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:2"
											}
										]
									},
									"documentation": {
										"id": 412,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:2",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 431,
									"name": "nonReentrant",
									"nameLocation": "2221:12:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 413,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:2"
									},
									"src": "2212:445:2",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 433,
							"src": "873:1786:2",
							"usedErrors": []
						}
					],
					"src": "97:2563:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							902
						],
						"IERC721": [
							548
						]
					},
					"id": 549,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 434,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 435,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 549,
							"sourceUnit": 903,
							"src": "133:47:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 437,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 902,
										"src": "271:7:3"
									},
									"id": 438,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:3"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 436,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:3",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 548,
							"linearizedBaseContracts": [
								548,
								902
							],
							"name": "IERC721",
							"nameLocation": "260:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 439,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:3",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 447,
									"name": "Transfer",
									"nameLocation": "384:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 441,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "393:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 440,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 443,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "415:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 442,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 445,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "435:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 444,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:3"
									},
									"src": "378:82:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 448,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:3",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 456,
									"name": "Approval",
									"nameLocation": "571:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 450,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 456,
												"src": "580:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 449,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 452,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 456,
												"src": "603:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 454,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 456,
												"src": "629:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 453,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:3"
									},
									"src": "565:89:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 457,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:3",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 465,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 459,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "803:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 458,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 461,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "826:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 463,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "852:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 462,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:3"
									},
									"src": "782:85:3"
								},
								{
									"documentation": {
										"id": 466,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:3",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 473,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "973:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 467,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:3"
									},
									"returnParameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "1011:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 470,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:3"
									},
									"scope": 548,
									"src": "954:74:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 474,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:3",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 481,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 481,
												"src": "1187:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 475,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:3"
									},
									"returnParameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 481,
												"src": "1227:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 478,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:3"
									},
									"scope": 548,
									"src": "1170:72:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 482,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:3",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 493,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "1844:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 483,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "1866:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 485,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "1886:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 487,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "1911:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 489,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:3"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:3"
									},
									"scope": 548,
									"src": "1809:137:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "1952:690:3",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 503,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2656:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2690:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "2682:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2682:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2712:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "2704:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 497,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2704:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2732:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "2724:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 499,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2672:73:3"
									},
									"returnParameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2754:0:3"
									},
									"scope": 548,
									"src": "2647:108:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 504,
										"nodeType": "StructuredDocumentation",
										"src": "2761:504:3",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 513,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3279:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3309:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3301:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 505,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3301:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3331:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3323:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 507,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3323:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3351:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3343:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 509,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3343:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3291:73:3"
									},
									"returnParameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3373:0:3"
									},
									"scope": 548,
									"src": "3270:104:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 514,
										"nodeType": "StructuredDocumentation",
										"src": "3380:452:3",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 521,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3846:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3862:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "3854:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3854:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3874:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "3866:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 517,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3866:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3853:29:3"
									},
									"returnParameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3891:0:3"
									},
									"scope": 548,
									"src": "3837:55:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 522,
										"nodeType": "StructuredDocumentation",
										"src": "3898:309:3",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 529,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4221:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4247:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "4239:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 523,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4239:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4262:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "4257:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 525,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4257:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4238:34:3"
									},
									"returnParameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4281:0:3"
									},
									"scope": 548,
									"src": "4212:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 530,
										"nodeType": "StructuredDocumentation",
										"src": "4288:139:3",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 537,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4441:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4461:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "4453:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 531,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4453:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4452:17:3"
									},
									"returnParameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 535,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4501:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "4493:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 534,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4493:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4492:18:3"
									},
									"scope": 548,
									"src": "4432:79:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 538,
										"nodeType": "StructuredDocumentation",
										"src": "4517:138:3",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 547,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4669:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4694:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "4686:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 539,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4686:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4709:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "4701:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4701:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4685:33:3"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "4742:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 544,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4742:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4741:6:3"
									},
									"scope": 548,
									"src": "4660:88:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 549,
							"src": "250:4500:3",
							"usedErrors": []
						}
					],
					"src": "108:4643:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							570
						]
					},
					"id": 571,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 550,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 551,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 570,
							"linearizedBaseContracts": [
								570
							],
							"name": "Context",
							"nameLocation": "626:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 559,
										"nodeType": "Block",
										"src": "702:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 556,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 557,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 555,
												"id": 558,
												"nodeType": "Return",
												"src": "712:17:4"
											}
										]
									},
									"id": 560,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:4"
									},
									"returnParameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "693:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:4"
									},
									"scope": 570,
									"src": "640:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 568,
										"nodeType": "Block",
										"src": "809:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 565,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 566,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 564,
												"id": 567,
												"nodeType": "Return",
												"src": "819:15:4"
											}
										]
									},
									"id": 569,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 561,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:4"
									},
									"returnParameters": {
										"id": 564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 569,
												"src": "793:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 562,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:4"
									},
									"scope": 570,
									"src": "742:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 571,
							"src": "608:235:4",
							"usedErrors": []
						}
					],
					"src": "86:758:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Strings": [
							773
						]
					},
					"id": 774,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 572,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 573,
								"nodeType": "StructuredDocumentation",
								"src": "111:34:5",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 773,
							"linearizedBaseContracts": [
								773
							],
							"name": "Strings",
							"nameLocation": "154:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 576,
									"mutability": "constant",
									"name": "_HEX_SYMBOLS",
									"nameLocation": "193:12:5",
									"nodeType": "VariableDeclaration",
									"scope": 773,
									"src": "168:58:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 574,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "168:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 575,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "208:18:5",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 654,
										"nodeType": "Block",
										"src": "399:632:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 586,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 584,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 579,
														"src": "601:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 585,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "610:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "601:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 590,
												"nodeType": "IfStatement",
												"src": "597:51:5",
												"trueBody": {
													"id": 589,
													"nodeType": "Block",
													"src": "613:35:5",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 587,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "634:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 583,
															"id": 588,
															"nodeType": "Return",
															"src": "627:10:5"
														}
													]
												}
											},
											{
												"assignments": [
													592
												],
												"declarations": [
													{
														"constant": false,
														"id": 592,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "665:4:5",
														"nodeType": "VariableDeclaration",
														"scope": 654,
														"src": "657:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 591,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "657:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 594,
												"initialValue": {
													"id": 593,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 579,
													"src": "672:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "657:20:5"
											},
											{
												"assignments": [
													596
												],
												"declarations": [
													{
														"constant": false,
														"id": 596,
														"mutability": "mutable",
														"name": "digits",
														"nameLocation": "695:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 654,
														"src": "687:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 595,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "687:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 597,
												"nodeType": "VariableDeclarationStatement",
												"src": "687:14:5"
											},
											{
												"body": {
													"id": 608,
													"nodeType": "Block",
													"src": "729:57:5",
													"statements": [
														{
															"expression": {
																"id": 602,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "743:8:5",
																"subExpression": {
																	"id": 601,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 596,
																	"src": "743:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 603,
															"nodeType": "ExpressionStatement",
															"src": "743:8:5"
														},
														{
															"expression": {
																"id": 606,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 604,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 592,
																	"src": "765:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 605,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "773:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "765:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 607,
															"nodeType": "ExpressionStatement",
															"src": "765:10:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 600,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 598,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 592,
														"src": "718:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 599,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "726:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "718:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 609,
												"nodeType": "WhileStatement",
												"src": "711:75:5"
											},
											{
												"assignments": [
													611
												],
												"declarations": [
													{
														"constant": false,
														"id": 611,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "808:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 654,
														"src": "795:19:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 610,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "795:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 616,
												"initialValue": {
													"arguments": [
														{
															"id": 614,
															"name": "digits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 596,
															"src": "827:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 613,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "817:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 612,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "821:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:17:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "795:39:5"
											},
											{
												"body": {
													"id": 647,
													"nodeType": "Block",
													"src": "863:131:5",
													"statements": [
														{
															"expression": {
																"id": 622,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 620,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 596,
																	"src": "877:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 621,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "887:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "877:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 623,
															"nodeType": "ExpressionStatement",
															"src": "877:11:5"
														},
														{
															"expression": {
																"id": 641,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 624,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 611,
																		"src": "902:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 626,
																	"indexExpression": {
																		"id": 625,
																		"name": "digits",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 596,
																		"src": "909:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "902:14:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 638,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 631,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "932:2:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 636,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 634,
																									"name": "value",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 579,
																									"src": "945:5:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "%",
																								"rightExpression": {
																									"hexValue": "3130",
																									"id": 635,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "953:2:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_10_by_1",
																										"typeString": "int_const 10"
																									},
																									"value": "10"
																								},
																								"src": "945:10:5",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 633,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "937:7:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint256_$",
																								"typeString": "type(uint256)"
																							},
																							"typeName": {
																								"id": 632,
																								"name": "uint256",
																								"nodeType": "ElementaryTypeName",
																								"src": "937:7:5",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 637,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "937:19:5",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "932:24:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 630,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "926:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 629,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "926:5:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 639,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "926:31:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 628,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "919:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 627,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "919:6:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 640,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "919:39:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "902:56:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 642,
															"nodeType": "ExpressionStatement",
															"src": "902:56:5"
														},
														{
															"expression": {
																"id": 645,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 643,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 579,
																	"src": "972:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 644,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "972:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 646,
															"nodeType": "ExpressionStatement",
															"src": "972:11:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 617,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 579,
														"src": "851:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 618,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "860:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "851:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 648,
												"nodeType": "WhileStatement",
												"src": "844:150:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 651,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 611,
															"src": "1017:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 650,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1010:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 649,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1010:6:5",
															"typeDescriptions": {}
														}
													},
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1010:14:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 583,
												"id": 653,
												"nodeType": "Return",
												"src": "1003:21:5"
											}
										]
									},
									"documentation": {
										"id": 577,
										"nodeType": "StructuredDocumentation",
										"src": "233:90:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 655,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "337:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "354:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "346:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 578,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "346:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "345:15:5"
									},
									"returnParameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "384:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 581,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "384:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "383:15:5"
									},
									"scope": 773,
									"src": "328:703:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 695,
										"nodeType": "Block",
										"src": "1210:255:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 663,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 658,
														"src": "1224:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 664,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1233:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1224:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 669,
												"nodeType": "IfStatement",
												"src": "1220:54:5",
												"trueBody": {
													"id": 668,
													"nodeType": "Block",
													"src": "1236:38:5",
													"statements": [
														{
															"expression": {
																"hexValue": "30783030",
																"id": 666,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1257:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
																	"typeString": "literal_string \"0x00\""
																},
																"value": "0x00"
															},
															"functionReturnParameters": 662,
															"id": 667,
															"nodeType": "Return",
															"src": "1250:13:5"
														}
													]
												}
											},
											{
												"assignments": [
													671
												],
												"declarations": [
													{
														"constant": false,
														"id": 671,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "1291:4:5",
														"nodeType": "VariableDeclaration",
														"scope": 695,
														"src": "1283:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 670,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1283:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 673,
												"initialValue": {
													"id": 672,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 658,
													"src": "1298:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1283:20:5"
											},
											{
												"assignments": [
													675
												],
												"declarations": [
													{
														"constant": false,
														"id": 675,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "1321:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 695,
														"src": "1313:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 674,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1313:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 677,
												"initialValue": {
													"hexValue": "30",
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1330:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1313:18:5"
											},
											{
												"body": {
													"id": 688,
													"nodeType": "Block",
													"src": "1359:57:5",
													"statements": [
														{
															"expression": {
																"id": 682,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1373:8:5",
																"subExpression": {
																	"id": 681,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 675,
																	"src": "1373:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 683,
															"nodeType": "ExpressionStatement",
															"src": "1373:8:5"
														},
														{
															"expression": {
																"id": 686,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 684,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 671,
																	"src": "1395:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 685,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1404:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1395:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 687,
															"nodeType": "ExpressionStatement",
															"src": "1395:10:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 678,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 671,
														"src": "1348:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 679,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1356:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1348:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 689,
												"nodeType": "WhileStatement",
												"src": "1341:75:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 691,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 658,
															"src": "1444:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 692,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 675,
															"src": "1451:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 690,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															696,
															772
														],
														"referencedDeclaration": 772,
														"src": "1432:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1432:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 662,
												"id": 694,
												"nodeType": "Return",
												"src": "1425:33:5"
											}
										]
									},
									"documentation": {
										"id": 656,
										"nodeType": "StructuredDocumentation",
										"src": "1037:94:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 696,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1145:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1165:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1157:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:15:5"
									},
									"returnParameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1195:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 660,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1195:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:15:5"
									},
									"scope": 773,
									"src": "1136:329:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 771,
										"nodeType": "Block",
										"src": "1678:351:5",
										"statements": [
											{
												"assignments": [
													707
												],
												"declarations": [
													{
														"constant": false,
														"id": 707,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1701:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 771,
														"src": "1688:19:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 706,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1688:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 716,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 714,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 712,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 710,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1720:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 711,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 701,
																	"src": "1724:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1720:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 713,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1733:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1720:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 709,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1710:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 708,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1714:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 715,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1710:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1688:47:5"
											},
											{
												"expression": {
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 717,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 707,
															"src": "1745:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 719,
														"indexExpression": {
															"hexValue": "30",
															"id": 718,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1752:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1745:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 720,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1745:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 722,
												"nodeType": "ExpressionStatement",
												"src": "1745:15:5"
											},
											{
												"expression": {
													"id": 727,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 723,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 707,
															"src": "1770:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 725,
														"indexExpression": {
															"hexValue": "31",
															"id": 724,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1777:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1770:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 726,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1782:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1770:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 728,
												"nodeType": "ExpressionStatement",
												"src": "1770:15:5"
											},
											{
												"body": {
													"id": 757,
													"nodeType": "Block",
													"src": "1840:87:5",
													"statements": [
														{
															"expression": {
																"id": 751,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 743,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 707,
																		"src": "1854:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 745,
																	"indexExpression": {
																		"id": 744,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 730,
																		"src": "1861:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1854:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 746,
																		"name": "_HEX_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 576,
																		"src": "1866:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 750,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 749,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 747,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 699,
																			"src": "1879:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 748,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1887:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1879:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1866:25:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1854:37:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 752,
															"nodeType": "ExpressionStatement",
															"src": "1854:37:5"
														},
														{
															"expression": {
																"id": 755,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 753,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 699,
																	"src": "1905:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 754,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1905:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 756,
															"nodeType": "ExpressionStatement",
															"src": "1905:11:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 739,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 737,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 730,
														"src": "1828:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 738,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1832:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1828:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 758,
												"initializationExpression": {
													"assignments": [
														730
													],
													"declarations": [
														{
															"constant": false,
															"id": 730,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1808:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 758,
															"src": "1800:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 729,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1800:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 736,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 735,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 733,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 731,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1812:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 732,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 701,
																"src": "1816:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1812:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 734,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1825:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1812:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1800:26:5"
												},
												"loopExpression": {
													"expression": {
														"id": 741,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1835:3:5",
														"subExpression": {
															"id": 740,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 730,
															"src": "1837:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 742,
													"nodeType": "ExpressionStatement",
													"src": "1835:3:5"
												},
												"nodeType": "ForStatement",
												"src": "1795:132:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 762,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 760,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 699,
																"src": "1944:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 761,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1953:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1944:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 763,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1956:34:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 759,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1936:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1936:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 765,
												"nodeType": "ExpressionStatement",
												"src": "1936:55:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 768,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 707,
															"src": "2015:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 767,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2008:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 766,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2008:6:5",
															"typeDescriptions": {}
														}
													},
													"id": 769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2008:14:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 705,
												"id": 770,
												"nodeType": "Return",
												"src": "2001:21:5"
											}
										]
									},
									"documentation": {
										"id": 697,
										"nodeType": "StructuredDocumentation",
										"src": "1471:112:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 772,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1597:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1617:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "1609:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 698,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1609:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1632:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "1624:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 700,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1608:31:5"
									},
									"returnParameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "1663:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 703,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1663:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1662:15:5"
									},
									"scope": 773,
									"src": "1588:441:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 774,
							"src": "146:1885:5",
							"usedErrors": []
						}
					],
					"src": "86:1946:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
					"exportedSymbols": {
						"MerkleProof": [
							866
						]
					},
					"id": 867,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 775,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleProof",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 776,
								"nodeType": "StructuredDocumentation",
								"src": "143:656:6",
								"text": " @dev These functions deal with verification of Merkle Trees proofs.\n The proofs can be generated using the JavaScript library\n https://github.com/miguelmota/merkletreejs[merkletreejs].\n Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value."
							},
							"fullyImplemented": true,
							"id": 866,
							"linearizedBaseContracts": [
								866
							],
							"name": "MerkleProof",
							"nameLocation": "808:11:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 796,
										"nodeType": "Block",
										"src": "1281:57:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 794,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 790,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 780,
																"src": "1311:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 791,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 784,
																"src": "1318:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 789,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 854,
															"src": "1298:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32) pure returns (bytes32)"
															}
														},
														"id": 792,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1298:25:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 793,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 782,
														"src": "1327:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1298:33:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 788,
												"id": 795,
												"nodeType": "Return",
												"src": "1291:40:6"
											}
										]
									},
									"documentation": {
										"id": 777,
										"nodeType": "StructuredDocumentation",
										"src": "826:323:6",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."
									},
									"id": 797,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "1163:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 780,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1196:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "1179:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 778,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1179:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 779,
													"nodeType": "ArrayTypeName",
													"src": "1179:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "1219:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "1211:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 781,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1241:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "1233:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 783,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1169:82:6"
									},
									"returnParameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "1275:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 786,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1275:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1274:6:6"
									},
									"scope": 866,
									"src": "1154:184:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 853,
										"nodeType": "Block",
										"src": "1781:570:6",
										"statements": [
											{
												"assignments": [
													809
												],
												"declarations": [
													{
														"constant": false,
														"id": 809,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "1799:12:6",
														"nodeType": "VariableDeclaration",
														"scope": 853,
														"src": "1791:20:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 808,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1791:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 811,
												"initialValue": {
													"id": 810,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 803,
													"src": "1814:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1791:27:6"
											},
											{
												"body": {
													"id": 849,
													"nodeType": "Block",
													"src": "1871:445:6",
													"statements": [
														{
															"assignments": [
																824
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 824,
																	"mutability": "mutable",
																	"name": "proofElement",
																	"nameLocation": "1893:12:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 849,
																	"src": "1885:20:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 823,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "1885:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 828,
															"initialValue": {
																"baseExpression": {
																	"id": 825,
																	"name": "proof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 801,
																	"src": "1908:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	}
																},
																"id": 827,
																"indexExpression": {
																	"id": 826,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 813,
																	"src": "1914:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1908:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1885:31:6"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 831,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 829,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 809,
																	"src": "1934:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 830,
																	"name": "proofElement",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 824,
																	"src": "1950:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "1934:28:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 847,
																"nodeType": "Block",
																"src": "2138:168:6",
																"statements": [
																	{
																		"expression": {
																			"id": 845,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 840,
																				"name": "computedHash",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 809,
																				"src": "2234:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"id": 842,
																						"name": "proofElement",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 824,
																						"src": "2264:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 843,
																						"name": "computedHash",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 809,
																						"src": "2278:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 841,
																					"name": "_efficientHash",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 865,
																					"src": "2249:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																						"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																					}
																				},
																				"id": 844,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2249:42:6",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "2234:57:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 846,
																		"nodeType": "ExpressionStatement",
																		"src": "2234:57:6"
																	}
																]
															},
															"id": 848,
															"nodeType": "IfStatement",
															"src": "1930:376:6",
															"trueBody": {
																"id": 839,
																"nodeType": "Block",
																"src": "1964:168:6",
																"statements": [
																	{
																		"expression": {
																			"id": 837,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 832,
																				"name": "computedHash",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 809,
																				"src": "2060:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"id": 834,
																						"name": "computedHash",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 809,
																						"src": "2090:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 835,
																						"name": "proofElement",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 824,
																						"src": "2104:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 833,
																					"name": "_efficientHash",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 865,
																					"src": "2075:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																						"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																					}
																				},
																				"id": 836,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2075:42:6",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "2060:57:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 838,
																		"nodeType": "ExpressionStatement",
																		"src": "2060:57:6"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 816,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 813,
														"src": "1848:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 817,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 801,
															"src": "1852:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 818,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1852:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1848:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 850,
												"initializationExpression": {
													"assignments": [
														813
													],
													"declarations": [
														{
															"constant": false,
															"id": 813,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1841:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 850,
															"src": "1833:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 812,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1833:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 815,
													"initialValue": {
														"hexValue": "30",
														"id": 814,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1845:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1833:13:6"
												},
												"loopExpression": {
													"expression": {
														"id": 821,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1866:3:6",
														"subExpression": {
															"id": 820,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 813,
															"src": "1866:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 822,
													"nodeType": "ExpressionStatement",
													"src": "1866:3:6"
												},
												"nodeType": "ForStatement",
												"src": "1828:488:6"
											},
											{
												"expression": {
													"id": 851,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 809,
													"src": "2332:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 807,
												"id": 852,
												"nodeType": "Return",
												"src": "2325:19:6"
											}
										]
									},
									"documentation": {
										"id": 798,
										"nodeType": "StructuredDocumentation",
										"src": "1344:340:6",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"
									},
									"id": 854,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "1698:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 801,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1728:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1711:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 799,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1711:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 800,
													"nodeType": "ArrayTypeName",
													"src": "1711:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 803,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1743:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1735:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 802,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1735:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1710:38:6"
									},
									"returnParameters": {
										"id": 807,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1772:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 805,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1772:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1771:9:6"
									},
									"scope": 866,
									"src": "1689:662:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 864,
										"nodeType": "Block",
										"src": "2440:135:6",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2459:110:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2480:4:6",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "2486:1:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2473:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2473:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2473:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2508:4:6",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "2514:1:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2501:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2501:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2501:15:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2529:30:6",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2548:4:6",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2554:4:6",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "2538:9:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2538:21:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2529:5:6"
																}
															]
														}
													]
												},
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 856,
														"isOffset": false,
														"isSlot": false,
														"src": "2486:1:6",
														"valueSize": 1
													},
													{
														"declaration": 858,
														"isOffset": false,
														"isSlot": false,
														"src": "2514:1:6",
														"valueSize": 1
													},
													{
														"declaration": 861,
														"isOffset": false,
														"isSlot": false,
														"src": "2529:5:6",
														"valueSize": 1
													}
												],
												"id": 863,
												"nodeType": "InlineAssembly",
												"src": "2450:119:6"
											}
										]
									},
									"id": 865,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_efficientHash",
									"nameLocation": "2366:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 859,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2389:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "2381:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 855,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2381:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 858,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2400:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "2392:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 857,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2392:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2380:22:6"
									},
									"returnParameters": {
										"id": 862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 861,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2433:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "2425:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 860,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2424:15:6"
									},
									"scope": 866,
									"src": "2357:218:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 867,
							"src": "800:1777:6",
							"usedErrors": []
						}
					],
					"src": "118:2460:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							890
						],
						"IERC165": [
							902
						]
					},
					"id": 891,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 868,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 869,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 891,
							"sourceUnit": 903,
							"src": "124:23:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 871,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 902,
										"src": "754:7:7"
									},
									"id": 872,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:7"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 870,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:7",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 890,
							"linearizedBaseContracts": [
								890,
								902
							],
							"name": "ERC165",
							"nameLocation": "744:6:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										901
									],
									"body": {
										"id": 888,
										"nodeType": "Block",
										"src": "920:64:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 881,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 875,
														"src": "937:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 883,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 902,
																	"src": "957:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$902_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$902_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 882,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 884,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$902",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 885,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 880,
												"id": 887,
												"nodeType": "Return",
												"src": "930:47:7"
											}
										]
									},
									"documentation": {
										"id": 873,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:7",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 877,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:7"
									},
									"parameters": {
										"id": 876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "856:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 874,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:7"
									},
									"returnParameters": {
										"id": 880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 879,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "914:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 878,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:7"
									},
									"scope": 890,
									"src": "829:155:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 891,
							"src": "726:260:7",
							"usedErrors": []
						}
					],
					"src": "99:888:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							902
						]
					},
					"id": 903,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 892,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 893,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:8",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 902,
							"linearizedBaseContracts": [
								902
							],
							"name": "IERC165",
							"nameLocation": "415:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 894,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:8",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 901,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "801:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 895,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:8"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "844:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 898,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:8"
									},
									"scope": 902,
									"src": "774:76:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 903,
							"src": "405:447:8",
							"usedErrors": []
						}
					],
					"src": "100:753:8"
				},
				"id": 8
			},
			"INagaKidsNFT.sol": {
				"ast": {
					"absolutePath": "INagaKidsNFT.sol",
					"exportedSymbols": {
						"IAccessControl": [
							392
						],
						"IERC165": [
							902
						],
						"IERC721": [
							548
						],
						"INagaKidsNFT": [
							958
						]
					},
					"id": 959,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 904,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".15"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 905,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 959,
							"sourceUnit": 549,
							"src": "61:58:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
							"file": "@openzeppelin/contracts/access/IAccessControl.sol",
							"id": 906,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 959,
							"sourceUnit": 393,
							"src": "121:59:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 907,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 548,
										"src": "210:7:9"
									},
									"id": 908,
									"nodeType": "InheritanceSpecifier",
									"src": "210:7:9"
								},
								{
									"baseName": {
										"id": 909,
										"name": "IAccessControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 392,
										"src": "218:14:9"
									},
									"id": 910,
									"nodeType": "InheritanceSpecifier",
									"src": "218:14:9"
								}
							],
							"canonicalName": "INagaKidsNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 958,
							"linearizedBaseContracts": [
								958,
								392,
								548,
								902
							],
							"name": "INagaKidsNFT",
							"nameLocation": "194:12:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "18160ddd",
									"id": 915,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "251:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "262:2:9"
									},
									"returnParameters": {
										"id": 914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 913,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "288:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 912,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "288:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "287:9:9"
									},
									"scope": 958,
									"src": "242:55:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 916,
										"nodeType": "StructuredDocumentation",
										"src": "303:174:9",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 925,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "492:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "520:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 925,
												"src": "512:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 917,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "512:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 920,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "535:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 925,
												"src": "527:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 919,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "527:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "511:30:9"
									},
									"returnParameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 925,
												"src": "565:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "565:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "564:9:9"
									},
									"scope": 958,
									"src": "483:91:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4f6ccce7",
									"id": 932,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "589:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "610:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 932,
												"src": "602:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "602:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "601:15:9"
									},
									"returnParameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 930,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 932,
												"src": "640:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 929,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "640:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "639:9:9"
									},
									"scope": 958,
									"src": "580:69:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d5abeb01",
									"id": 937,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxSupply",
									"nameLocation": "664:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 933,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "673:2:9"
									},
									"returnParameters": {
										"id": 936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 935,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "699:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 934,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "698:9:9"
									},
									"scope": 958,
									"src": "655:53:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "5c975abb",
									"id": 942,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "723:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 938,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "729:2:9"
									},
									"returnParameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 942,
												"src": "755:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 939,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "755:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "754:6:9"
									},
									"scope": 958,
									"src": "714:47:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "40d097c3",
									"id": 947,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeMint",
									"nameLocation": "776:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "793:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "785:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 943,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "785:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:12:9"
									},
									"returnParameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "805:0:9"
									},
									"scope": 958,
									"src": "767:39:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "e63ab1e9",
									"id": 952,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "PAUSER_ROLE",
									"nameLocation": "821:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "832:2:9"
									},
									"returnParameters": {
										"id": 951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 950,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "858:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 949,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:9:9"
									},
									"scope": 958,
									"src": "812:55:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d5391393",
									"id": 957,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "MINTER_ROLE",
									"nameLocation": "882:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 953,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "893:2:9"
									},
									"returnParameters": {
										"id": 956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "919:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 954,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "919:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "918:9:9"
									},
									"scope": 958,
									"src": "873:55:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 959,
							"src": "184:749:9",
							"usedErrors": []
						}
					],
					"src": "33:900:9"
				},
				"id": 9
			},
			"MintNagaKids.sol": {
				"ast": {
					"absolutePath": "MintNagaKids.sol",
					"exportedSymbols": {
						"AccessControl": [
							319
						],
						"Context": [
							570
						],
						"ERC165": [
							890
						],
						"IAccessControl": [
							392
						],
						"IERC165": [
							902
						],
						"IERC721": [
							548
						],
						"INagaKidsNFT": [
							958
						],
						"MerkleProof": [
							866
						],
						"MintNagaKids": [
							1138
						],
						"ReentrancyGuard": [
							432
						],
						"Strings": [
							773
						],
						"Whitelist": [
							1177
						]
					},
					"id": 1139,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 960,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".15"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:10"
						},
						{
							"absolutePath": "Whitelist.sol",
							"file": "./Whitelist.sol",
							"id": 961,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1139,
							"sourceUnit": 1178,
							"src": "61:25:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 962,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1139,
							"sourceUnit": 433,
							"src": "88:62:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/AccessControl.sol",
							"file": "@openzeppelin/contracts/access/AccessControl.sol",
							"id": 963,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1139,
							"sourceUnit": 320,
							"src": "152:58:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "INagaKidsNFT.sol",
							"file": "./INagaKidsNFT.sol",
							"id": 964,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1139,
							"sourceUnit": 959,
							"src": "212:28:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 965,
										"name": "Whitelist",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1177,
										"src": "269:9:10"
									},
									"id": 966,
									"nodeType": "InheritanceSpecifier",
									"src": "269:9:10"
								},
								{
									"baseName": {
										"id": 967,
										"name": "AccessControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 319,
										"src": "279:13:10"
									},
									"id": 968,
									"nodeType": "InheritanceSpecifier",
									"src": "279:13:10"
								},
								{
									"baseName": {
										"id": 969,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 432,
										"src": "294:15:10"
									},
									"id": 970,
									"nodeType": "InheritanceSpecifier",
									"src": "294:15:10"
								}
							],
							"canonicalName": "MintNagaKids",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1138,
							"linearizedBaseContracts": [
								1138,
								432,
								319,
								890,
								902,
								392,
								570,
								1177
							],
							"name": "MintNagaKids",
							"nameLocation": "253:12:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "27c25c20",
									"id": 973,
									"mutability": "mutable",
									"name": "nagaKidsContract",
									"nameLocation": "339:16:10",
									"nodeType": "VariableDeclaration",
									"scope": 1138,
									"src": "319:36:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
										"typeString": "contract INagaKidsNFT"
									},
									"typeName": {
										"id": 972,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 971,
											"name": "INagaKidsNFT",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 958,
											"src": "319:12:10"
										},
										"referencedDeclaration": 958,
										"src": "319:12:10",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
											"typeString": "contract INagaKidsNFT"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a6f5f014",
									"id": 975,
									"mutability": "mutable",
									"name": "isFreeMintOpen",
									"nameLocation": "374:14:10",
									"nodeType": "VariableDeclaration",
									"scope": 1138,
									"src": "362:26:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 974,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "362:4:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "94f4504d",
									"id": 977,
									"mutability": "mutable",
									"name": "isWhitelistOpen",
									"nameLocation": "407:15:10",
									"nodeType": "VariableDeclaration",
									"scope": 1138,
									"src": "395:27:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 976,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "395:4:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 993,
										"nodeType": "Block",
										"src": "467:105:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 984,
															"name": "DEFAULT_ADMIN_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "489:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"expression": {
																"id": 985,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "509:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 986,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "509:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 983,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 287,
														"src": "478:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 987,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "478:42:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 988,
												"nodeType": "ExpressionStatement",
												"src": "478:42:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 990,
															"name": "_nagaKids",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 980,
															"src": "554:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
																"typeString": "contract INagaKidsNFT"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
																"typeString": "contract INagaKidsNFT"
															}
														],
														"id": 989,
														"name": "changeNagaKidsContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1020,
														"src": "531:22:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_INagaKidsNFT_$958_$returns$__$",
															"typeString": "function (contract INagaKidsNFT)"
														}
													},
													"id": 991,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "531:33:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 992,
												"nodeType": "ExpressionStatement",
												"src": "531:33:10"
											}
										]
									},
									"id": 994,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "_nagaKids",
												"nameLocation": "456:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 994,
												"src": "443:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
													"typeString": "contract INagaKidsNFT"
												},
												"typeName": {
													"id": 979,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 978,
														"name": "INagaKidsNFT",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 958,
														"src": "443:12:10"
													},
													"referencedDeclaration": 958,
													"src": "443:12:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
														"typeString": "contract INagaKidsNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "442:24:10"
									},
									"returnParameters": {
										"id": 982,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "467:0:10"
									},
									"scope": 1138,
									"src": "431:141:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1005,
										"nodeType": "Block",
										"src": "598:81:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1000,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 997,
																	"name": "isPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1137,
																	"src": "617:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																		"typeString": "function () view returns (bool)"
																	}
																},
																"id": 998,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "617:9:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 999,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "630:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "617:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6167614b69647320776173205061757365642e",
															"id": 1001,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "636:22:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cb57f8f9c8eace4f3cff285990b68679b8bb26950f0fd30c3a25c9ccd8b9c29f",
																"typeString": "literal_string \"NagaKids was Paused.\""
															},
															"value": "NagaKids was Paused."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cb57f8f9c8eace4f3cff285990b68679b8bb26950f0fd30c3a25c9ccd8b9c29f",
																"typeString": "literal_string \"NagaKids was Paused.\""
															}
														],
														"id": 996,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "609:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "609:50:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1003,
												"nodeType": "ExpressionStatement",
												"src": "609:50:10"
											},
											{
												"id": 1004,
												"nodeType": "PlaceholderStatement",
												"src": "670:1:10"
											}
										]
									},
									"id": 1006,
									"name": "Paused",
									"nameLocation": "589:6:10",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "595:2:10"
									},
									"src": "580:99:10",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1019,
										"nodeType": "Block",
										"src": "779:47:10",
										"statements": [
											{
												"expression": {
													"id": 1017,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1015,
														"name": "nagaKidsContract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 973,
														"src": "790:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
															"typeString": "contract INagaKidsNFT"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1016,
														"name": "_nagaKids",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1009,
														"src": "809:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
															"typeString": "contract INagaKidsNFT"
														}
													},
													"src": "790:28:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
														"typeString": "contract INagaKidsNFT"
													}
												},
												"id": 1018,
												"nodeType": "ExpressionStatement",
												"src": "790:28:10"
											}
										]
									},
									"functionSelector": "61aec205",
									"id": 1020,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1012,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "759:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1013,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1011,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "750:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "750:28:10"
										}
									],
									"name": "changeNagaKidsContract",
									"nameLocation": "696:22:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "_nagaKids",
												"nameLocation": "732:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "719:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
													"typeString": "contract INagaKidsNFT"
												},
												"typeName": {
													"id": 1008,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1007,
														"name": "INagaKidsNFT",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 958,
														"src": "719:12:10"
													},
													"referencedDeclaration": 958,
													"src": "719:12:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
														"typeString": "contract INagaKidsNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "718:24:10"
									},
									"returnParameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "779:0:10"
									},
									"scope": 1138,
									"src": "687:139:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1032,
										"nodeType": "Block",
										"src": "917:44:10",
										"statements": [
											{
												"expression": {
													"id": 1030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1028,
														"name": "isWhitelistOpen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 977,
														"src": "928:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1029,
														"name": "_isOpen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1022,
														"src": "946:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "928:25:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1031,
												"nodeType": "ExpressionStatement",
												"src": "928:25:10"
											}
										]
									},
									"functionSelector": "dd31a7ba",
									"id": 1033,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1025,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "897:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1026,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1024,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "888:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "888:28:10"
										}
									],
									"name": "changeWhitelistMintOpen",
									"nameLocation": "843:23:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "_isOpen",
												"nameLocation": "872:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "867:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1021,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "867:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:14:10"
									},
									"returnParameters": {
										"id": 1027,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "917:0:10"
									},
									"scope": 1138,
									"src": "834:127:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1045,
										"nodeType": "Block",
										"src": "1047:43:10",
										"statements": [
											{
												"expression": {
													"id": 1043,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1041,
														"name": "isFreeMintOpen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 975,
														"src": "1058:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1042,
														"name": "_isOpen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1035,
														"src": "1075:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1058:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1044,
												"nodeType": "ExpressionStatement",
												"src": "1058:24:10"
											}
										]
									},
									"functionSelector": "28438f68",
									"id": 1046,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1038,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "1027:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1039,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1037,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "1018:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "1018:28:10"
										}
									],
									"name": "changeFreeMintOpen",
									"nameLocation": "978:18:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1035,
												"mutability": "mutable",
												"name": "_isOpen",
												"nameLocation": "1002:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "997:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1034,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "997:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "996:14:10"
									},
									"returnParameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1047:0:10"
									},
									"scope": 1138,
									"src": "969:121:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1058,
										"nodeType": "Block",
										"src": "1182:42:10",
										"statements": [
											{
												"expression": {
													"id": 1056,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1054,
														"name": "merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1143,
														"src": "1192:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1055,
														"name": "_merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1048,
														"src": "1205:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1192:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1057,
												"nodeType": "ExpressionStatement",
												"src": "1192:24:10"
											}
										]
									},
									"functionSelector": "7cb64759",
									"id": 1059,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1051,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "1162:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1052,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1050,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "1153:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "1153:28:10"
										}
									],
									"name": "setMerkleRoot",
									"nameLocation": "1111:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "_merkleRoot",
												"nameLocation": "1133:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "1125:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1047,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1125:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1124:21:10"
									},
									"returnParameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1182:0:10"
									},
									"scope": 1138,
									"src": "1102:122:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1106,
										"nodeType": "Block",
										"src": "1306:331:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1071,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1069,
																"name": "isWhitelistOpen",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 977,
																"src": "1325:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "74727565",
																"id": 1070,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1344:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "1325:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "57686974656c697374206e6f74206f70656e20746f206d696e742e",
															"id": 1072,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1350:29:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04c899bcc4f5150e1689f9a8071396f43ad4f348d6b97ffd095d25c890be42b8",
																"typeString": "literal_string \"Whitelist not open to mint.\""
															},
															"value": "Whitelist not open to mint."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04c899bcc4f5150e1689f9a8071396f43ad4f348d6b97ffd095d25c890be42b8",
																"typeString": "literal_string \"Whitelist not open to mint.\""
															}
														],
														"id": 1068,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1317:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1073,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1317:63:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1074,
												"nodeType": "ExpressionStatement",
												"src": "1317:63:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1079,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1076,
																	"name": "getTotalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1117,
																	"src": "1399:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1077,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1399:16:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "31313131",
																"id": 1078,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1418:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1111_by_1",
																	"typeString": "int_const 1111"
																},
																"value": "1111"
															},
															"src": "1399:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f76657220737570706c79",
															"id": 1080,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1424:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6",
																"typeString": "literal_string \"Over supply\""
															},
															"value": "Over supply"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b7c457d2005d8aca2edb21a595c2941dc67f836773cd6b31f5fe85011b5a61f6",
																"typeString": "literal_string \"Over supply\""
															}
														],
														"id": 1075,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1391:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1081,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1391:47:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1082,
												"nodeType": "ExpressionStatement",
												"src": "1391:47:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1095,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"id": 1086,
																				"name": "nagaKidsContract",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 973,
																				"src": "1482:16:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
																					"typeString": "contract INagaKidsNFT"
																				}
																			},
																			"id": 1087,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "MINTER_ROLE",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 957,
																			"src": "1482:28:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$__$returns$_t_bytes32_$",
																				"typeString": "function () view external returns (bytes32)"
																			}
																		},
																		"id": 1088,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1482:30:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1091,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "1521:4:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_MintNagaKids_$1138",
																					"typeString": "contract MintNagaKids"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_MintNagaKids_$1138",
																					"typeString": "contract MintNagaKids"
																				}
																			],
																			"id": 1090,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1513:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1089,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1513:7:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1092,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1513:13:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 1084,
																		"name": "nagaKidsContract",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 973,
																		"src": "1457:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
																			"typeString": "contract INagaKidsNFT"
																		}
																	},
																	"id": 1085,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "hasRole",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 359,
																	"src": "1457:24:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																		"typeString": "function (bytes32,address) view external returns (bool)"
																	}
																},
																"id": 1093,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1457:70:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "74727565",
																"id": 1094,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1531:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "1457:78:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5468697320436f6e7472616374206e6f742068617665207065726d697373696f6e20746f206d696e742e",
															"id": 1096,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1536:44:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5ca816d2a77b3d51b4c5033631d2b3326e5b39a3fc9da3af3bdbe7c4f11cb2f6",
																"typeString": "literal_string \"This Contract not have permission to mint.\""
															},
															"value": "This Contract not have permission to mint."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5ca816d2a77b3d51b4c5033631d2b3326e5b39a3fc9da3af3bdbe7c4f11cb2f6",
																"typeString": "literal_string \"This Contract not have permission to mint.\""
															}
														],
														"id": 1083,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1449:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1097,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1449:132:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1098,
												"nodeType": "ExpressionStatement",
												"src": "1449:132:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1102,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1618:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1103,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1618:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1099,
															"name": "nagaKidsContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 973,
															"src": "1592:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
																"typeString": "contract INagaKidsNFT"
															}
														},
														"id": 1101,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeMint",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 947,
														"src": "1592:25:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address) external"
														}
													},
													"id": 1104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1592:37:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1105,
												"nodeType": "ExpressionStatement",
												"src": "1592:37:10"
											}
										]
									},
									"functionSelector": "868ff4a2",
									"id": 1107,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1064,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1063,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 431,
												"src": "1286:12:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "1286:12:10"
										},
										{
											"id": 1066,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1065,
												"name": "Paused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1006,
												"src": "1299:6:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "1299:6:10"
										}
									],
									"name": "whitelistMint",
									"nameLocation": "1241:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1263:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1107,
												"src": "1255:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1060,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1255:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1254:16:10"
									},
									"returnParameters": {
										"id": 1067,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1306:0:10"
									},
									"scope": 1138,
									"src": "1232:405:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1116,
										"nodeType": "Block",
										"src": "1701:56:10",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1112,
															"name": "nagaKidsContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 973,
															"src": "1719:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
																"typeString": "contract INagaKidsNFT"
															}
														},
														"id": 1113,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "totalSupply",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 915,
														"src": "1719:28:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
															"typeString": "function () view external returns (uint256)"
														}
													},
													"id": 1114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1719:30:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1111,
												"id": 1115,
												"nodeType": "Return",
												"src": "1712:37:10"
											}
										]
									},
									"functionSelector": "c4e41b22",
									"id": 1117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTotalSupply",
									"nameLocation": "1654:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1668:2:10"
									},
									"returnParameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1117,
												"src": "1692:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1692:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1691:9:10"
									},
									"scope": 1138,
									"src": "1645:112:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1126,
										"nodeType": "Block",
										"src": "1819:54:10",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1122,
															"name": "nagaKidsContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 973,
															"src": "1837:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
																"typeString": "contract INagaKidsNFT"
															}
														},
														"id": 1123,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "maxSupply",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 937,
														"src": "1837:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
															"typeString": "function () view external returns (uint256)"
														}
													},
													"id": 1124,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1837:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1121,
												"id": 1125,
												"nodeType": "Return",
												"src": "1830:35:10"
											}
										]
									},
									"functionSelector": "4c0f38c2",
									"id": 1127,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMaxSupply",
									"nameLocation": "1774:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1786:2:10"
									},
									"returnParameters": {
										"id": 1121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1120,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1127,
												"src": "1810:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1119,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1810:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1809:9:10"
									},
									"scope": 1138,
									"src": "1765:108:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1136,
										"nodeType": "Block",
										"src": "1927:51:10",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1132,
															"name": "nagaKidsContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 973,
															"src": "1945:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INagaKidsNFT_$958",
																"typeString": "contract INagaKidsNFT"
															}
														},
														"id": 1133,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "paused",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 942,
														"src": "1945:23:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_bool_$",
															"typeString": "function () view external returns (bool)"
														}
													},
													"id": 1134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1945:25:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1131,
												"id": 1135,
												"nodeType": "Return",
												"src": "1938:32:10"
											}
										]
									},
									"functionSelector": "ff0938a7",
									"id": 1137,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isPause",
									"nameLocation": "1890:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1128,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1897:2:10"
									},
									"returnParameters": {
										"id": 1131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "1921:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1129,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1921:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1920:6:10"
									},
									"scope": 1138,
									"src": "1881:97:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1139,
							"src": "244:1737:10",
							"usedErrors": []
						}
					],
					"src": "33:1950:10"
				},
				"id": 10
			},
			"Whitelist.sol": {
				"ast": {
					"absolutePath": "Whitelist.sol",
					"exportedSymbols": {
						"MerkleProof": [
							866
						],
						"Whitelist": [
							1177
						]
					},
					"id": 1178,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1140,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".14"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"id": 1141,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1178,
							"sourceUnit": 867,
							"src": "61:68:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Whitelist",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1177,
							"linearizedBaseContracts": [
								1177
							],
							"name": "Whitelist",
							"nameLocation": "142:9:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "2eb4a7ab",
									"id": 1143,
									"mutability": "mutable",
									"name": "merkleRoot",
									"nameLocation": "176:10:11",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "161:25:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1142,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "161:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1175,
										"nodeType": "Block",
										"src": "341:263:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1155,
														"name": "merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1143,
														"src": "356:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1156,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "370:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "356:15:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1161,
												"nodeType": "IfStatement",
												"src": "352:60:11",
												"trueBody": {
													"id": 1160,
													"nodeType": "Block",
													"src": "373:39:11",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1158,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "395:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1154,
															"id": 1159,
															"nodeType": "Return",
															"src": "388:12:11"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1164,
															"name": "_proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1146,
															"src": "481:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															}
														},
														{
															"id": 1165,
															"name": "merkleRoot",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1143,
															"src": "506:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1169,
																			"name": "_address",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1148,
																			"src": "562:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1170,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1150,
																			"src": "572:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1167,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "545:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 1168,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodePacked",
																		"nodeType": "MemberAccess",
																		"src": "545:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function () pure returns (bytes memory)"
																		}
																	},
																	"id": 1171,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "545:35:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1166,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "535:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "535:46:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1162,
															"name": "MerkleProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 866,
															"src": "444:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_MerkleProof_$866_$",
																"typeString": "type(library MerkleProof)"
															}
														},
														"id": 1163,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "verify",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 797,
														"src": "444:18:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
														}
													},
													"id": 1173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "444:152:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1154,
												"id": 1174,
												"nodeType": "Return",
												"src": "424:172:11"
											}
										]
									},
									"functionSelector": "feb2386e",
									"id": 1176,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isWhitelist",
									"nameLocation": "204:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "_proof",
												"nameLocation": "245:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "226:25:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1144,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "226:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1145,
													"nodeType": "ArrayTypeName",
													"src": "226:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1148,
												"mutability": "mutable",
												"name": "_address",
												"nameLocation": "270:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "262:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "262:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "297:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "289:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "289:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "215:96:11"
									},
									"returnParameters": {
										"id": 1154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "335:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1152,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "335:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "334:6:11"
									},
									"scope": 1177,
									"src": "195:409:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1178,
							"src": "133:476:11",
							"usedErrors": []
						}
					],
					"src": "33:578:11"
				},
				"id": 11
			}
		}
	}
}